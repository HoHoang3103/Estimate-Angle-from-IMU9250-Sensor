
BTL_DLCN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006820  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08006930  08006930  00016930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bf8  08006bf8  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08006bf8  08006bf8  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006bf8  08006bf8  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bf8  08006bf8  00016bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bfc  08006bfc  00016bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08006c00  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000180  08006d80  00020180  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08006d80  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a086  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000189b  00000000  00000000  0002a272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000948  00000000  00000000  0002bb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000744  00000000  00000000  0002c458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017687  00000000  00000000  0002cb9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c582  00000000  00000000  00044223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008532d  00000000  00000000  000507a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000031b8  00000000  00000000  000d5ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000d8c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	08006918 	.word	0x08006918

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	08006918 	.word	0x08006918

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <MPU6050_Init>:
uint8_t Ascale = AFS_2G;
uint8_t Mscale = MFS_16BITS; // Choose either 14-bit or 16-bit magnetometer resolution
uint8_t Mmode = 0x02; // 2 for 8 Hz, 6 for 100 Hz continuous magnetometer data read

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af04      	add	r7, sp, #16
 80010d6:	6078      	str	r0, [r7, #4]
	uint8_t check ;

	uint8_t Data;
    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80010d8:	2364      	movs	r3, #100	; 0x64
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	2301      	movs	r3, #1
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	f107 0317 	add.w	r3, r7, #23
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2275      	movs	r2, #117	; 0x75
 80010ea:	21d0      	movs	r1, #208	; 0xd0
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f001 ffd1 	bl	8003094 <HAL_I2C_Mem_Read>

    if (check == 113) // 0x68 will be returned by the sensor if everything goes well
 80010f2:	7dfb      	ldrb	r3, [r7, #23]
 80010f4:	2b71      	cmp	r3, #113	; 0x71
 80010f6:	f040 8095 	bne.w	8001224 <MPU6050_Init+0x154>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80010fe:	2364      	movs	r3, #100	; 0x64
 8001100:	9302      	str	r3, [sp, #8]
 8001102:	2301      	movs	r3, #1
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	f107 0316 	add.w	r3, r7, #22
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2301      	movs	r3, #1
 800110e:	226b      	movs	r2, #107	; 0x6b
 8001110:	21d0      	movs	r1, #208	; 0xd0
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f001 fec4 	bl	8002ea0 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001118:	2307      	movs	r3, #7
 800111a:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800111c:	2364      	movs	r3, #100	; 0x64
 800111e:	9302      	str	r3, [sp, #8]
 8001120:	2301      	movs	r3, #1
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	f107 0316 	add.w	r3, r7, #22
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2301      	movs	r3, #1
 800112c:	2219      	movs	r2, #25
 800112e:	21d0      	movs	r1, #208	; 0xd0
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f001 feb5 	bl	8002ea0 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001136:	2300      	movs	r3, #0
 8001138:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800113a:	2364      	movs	r3, #100	; 0x64
 800113c:	9302      	str	r3, [sp, #8]
 800113e:	2301      	movs	r3, #1
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	f107 0316 	add.w	r3, r7, #22
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2301      	movs	r3, #1
 800114a:	221c      	movs	r2, #28
 800114c:	21d0      	movs	r1, #208	; 0xd0
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f001 fea6 	bl	8002ea0 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001154:	2300      	movs	r3, #0
 8001156:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001158:	2364      	movs	r3, #100	; 0x64
 800115a:	9302      	str	r3, [sp, #8]
 800115c:	2301      	movs	r3, #1
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	f107 0316 	add.w	r3, r7, #22
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2301      	movs	r3, #1
 8001168:	221b      	movs	r2, #27
 800116a:	21d0      	movs	r1, #208	; 0xd0
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f001 fe97 	bl	8002ea0 <HAL_I2C_Mem_Write>

        // Set Magnetic configuration
    	uint8_t check1 ;
        Data = 0x22;
 8001172:	2322      	movs	r3, #34	; 0x22
 8001174:	75bb      	strb	r3, [r7, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, INT_PIN_CFG, 1, &Data, 1, i2c_timeout);
 8001176:	2364      	movs	r3, #100	; 0x64
 8001178:	9302      	str	r3, [sp, #8]
 800117a:	2301      	movs	r3, #1
 800117c:	9301      	str	r3, [sp, #4]
 800117e:	f107 0316 	add.w	r3, r7, #22
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2301      	movs	r3, #1
 8001186:	2237      	movs	r2, #55	; 0x37
 8001188:	21d0      	movs	r1, #208	; 0xd0
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f001 fe88 	bl	8002ea0 <HAL_I2C_Mem_Write>
        HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_WHO_AM_I, 1, &check1, 1, i2c_timeout);
 8001190:	2364      	movs	r3, #100	; 0x64
 8001192:	9302      	str	r3, [sp, #8]
 8001194:	2301      	movs	r3, #1
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	f107 0315 	add.w	r3, r7, #21
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2301      	movs	r3, #1
 80011a0:	2200      	movs	r2, #0
 80011a2:	2118      	movs	r1, #24
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f001 ff75 	bl	8003094 <HAL_I2C_Mem_Read>
        if (check1 == 72) {
 80011aa:	7d7b      	ldrb	r3, [r7, #21]
 80011ac:	2b48      	cmp	r3, #72	; 0x48
 80011ae:	d137      	bne.n	8001220 <MPU6050_Init+0x150>
        	//AK8963_Init(I2Cx , magCalibration);

        	 uint8_t rawMagCalData[3];
        			uint8_t Data;
        		//Power down magnetometer
        		Data = 0x00;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]
        		 HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &Data, 1, i2c_timeout);
 80011b4:	2364      	movs	r3, #100	; 0x64
 80011b6:	9302      	str	r3, [sp, #8]
 80011b8:	2301      	movs	r3, #1
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	f107 030f 	add.w	r3, r7, #15
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2301      	movs	r3, #1
 80011c4:	220a      	movs	r2, #10
 80011c6:	2118      	movs	r1, #24
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f001 fe69 	bl	8002ea0 <HAL_I2C_Mem_Write>
        		//HAL_Delay(100);
        		 //Enter Fuse ROM access mode
        		 Data = 0x0F;
 80011ce:	230f      	movs	r3, #15
 80011d0:	73fb      	strb	r3, [r7, #15]
        		HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &Data, 1, i2c_timeout);
 80011d2:	2364      	movs	r3, #100	; 0x64
 80011d4:	9302      	str	r3, [sp, #8]
 80011d6:	2301      	movs	r3, #1
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	f107 030f 	add.w	r3, r7, #15
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2301      	movs	r3, #1
 80011e2:	220a      	movs	r2, #10
 80011e4:	2118      	movs	r1, #24
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f001 fe5a 	bl	8002ea0 <HAL_I2C_Mem_Write>
        		// HAL_Delay(100);
        		Data = Mscale << 4 | Mmode;
 80011ec:	4b10      	ldr	r3, [pc, #64]	; (8001230 <MPU6050_Init+0x160>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	011b      	lsls	r3, r3, #4
 80011f2:	b25a      	sxtb	r2, r3
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MPU6050_Init+0x164>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	b25b      	sxtb	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	73fb      	strb	r3, [r7, #15]
        			HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &Data, 1, i2c_timeout);
 8001202:	2364      	movs	r3, #100	; 0x64
 8001204:	9302      	str	r3, [sp, #8]
 8001206:	2301      	movs	r3, #1
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	f107 030f 	add.w	r3, r7, #15
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2301      	movs	r3, #1
 8001212:	220a      	movs	r2, #10
 8001214:	2118      	movs	r1, #24
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f001 fe42 	bl	8002ea0 <HAL_I2C_Mem_Write>
            return 0;
 800121c:	2300      	movs	r3, #0
 800121e:	e002      	b.n	8001226 <MPU6050_Init+0x156>
            }

        return 1;
 8001220:	2301      	movs	r3, #1
 8001222:	e000      	b.n	8001226 <MPU6050_Init+0x156>
    }
    return 1;
 8001224:	2301      	movs	r3, #1
}
 8001226:	4618      	mov	r0, r3
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000108 	.word	0x20000108
 8001234:	20000109 	.word	0x20000109

08001238 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800123c:	b09f      	sub	sp, #124	; 0x7c
 800123e:	af04      	add	r7, sp, #16
 8001240:	60f8      	str	r0, [r7, #12]
 8001242:	60b9      	str	r1, [r7, #8]
    uint8_t check;
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001244:	2364      	movs	r3, #100	; 0x64
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	230e      	movs	r3, #14
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2301      	movs	r3, #1
 8001254:	223b      	movs	r2, #59	; 0x3b
 8001256:	21d0      	movs	r1, #208	; 0xd0
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f001 ff1b 	bl	8003094 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800125e:	7f3b      	ldrb	r3, [r7, #28]
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	b21a      	sxth	r2, r3
 8001264:	7f7b      	ldrb	r3, [r7, #29]
 8001266:	b21b      	sxth	r3, r3
 8001268:	4313      	orrs	r3, r2
 800126a:	b21a      	sxth	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001270:	7fbb      	ldrb	r3, [r7, #30]
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	b21a      	sxth	r2, r3
 8001276:	7ffb      	ldrb	r3, [r7, #31]
 8001278:	b21b      	sxth	r3, r3
 800127a:	4313      	orrs	r3, r2
 800127c:	b21a      	sxth	r2, r3
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001282:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001286:	021b      	lsls	r3, r3, #8
 8001288:	b21a      	sxth	r2, r3
 800128a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800128e:	b21b      	sxth	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b21a      	sxth	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001298:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	b21a      	sxth	r2, r3
 80012a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	4313      	orrs	r3, r2
 80012a8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80012ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012b8:	b21b      	sxth	r3, r3
 80012ba:	4313      	orrs	r3, r2
 80012bc:	b21a      	sxth	r2, r3
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80012c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b21a      	sxth	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80012d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80012dc:	021b      	lsls	r3, r3, #8
 80012de:	b21a      	sxth	r2, r3
 80012e0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	4313      	orrs	r3, r2
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	849a      	strh	r2, [r3, #36]	; 0x24

	getAres();
 80012ee:	f000 fe89 	bl	8002004 <getAres>
    DataStruct->Ax = g_accel*(DataStruct->Accel_X_RAW * aRes) -AX_OFFSET;
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fccf 	bl	8000c9c <__aeabi_i2f>
 80012fe:	4602      	mov	r2, r0
 8001300:	4bb5      	ldr	r3, [pc, #724]	; (80015d8 <MPU6050_Read_All+0x3a0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	4610      	mov	r0, r2
 8001308:	f7ff fd1c 	bl	8000d44 <__aeabi_fmul>
 800130c:	4603      	mov	r3, r0
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f88a 	bl	8000428 <__aeabi_f2d>
 8001314:	a3a2      	add	r3, pc, #648	; (adr r3, 80015a0 <MPU6050_Read_All+0x368>)
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	f7ff f8dd 	bl	80004d8 <__aeabi_dmul>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	a3a0      	add	r3, pc, #640	; (adr r3, 80015a8 <MPU6050_Read_All+0x370>)
 8001328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132c:	f7fe ff1c 	bl	8000168 <__aeabi_dsub>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = g_accel*(DataStruct->Accel_Y_RAW * aRes)-AY_OFFSET;
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fcab 	bl	8000c9c <__aeabi_i2f>
 8001346:	4602      	mov	r2, r0
 8001348:	4ba3      	ldr	r3, [pc, #652]	; (80015d8 <MPU6050_Read_All+0x3a0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	4610      	mov	r0, r2
 8001350:	f7ff fcf8 	bl	8000d44 <__aeabi_fmul>
 8001354:	4603      	mov	r3, r0
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f866 	bl	8000428 <__aeabi_f2d>
 800135c:	a390      	add	r3, pc, #576	; (adr r3, 80015a0 <MPU6050_Read_All+0x368>)
 800135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001362:	f7ff f8b9 	bl	80004d8 <__aeabi_dmul>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	a390      	add	r3, pc, #576	; (adr r3, 80015b0 <MPU6050_Read_All+0x378>)
 8001370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001374:	f7fe fefa 	bl	800016c <__adddf3>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = g_accel*(DataStruct->Accel_Z_RAW / Accel_Z_corrector) - AZ_OFFSET;
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f83b 	bl	8000404 <__aeabi_i2d>
 800138e:	a38a      	add	r3, pc, #552	; (adr r3, 80015b8 <MPU6050_Read_All+0x380>)
 8001390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001394:	f7ff f9ca 	bl	800072c <__aeabi_ddiv>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	a37f      	add	r3, pc, #508	; (adr r3, 80015a0 <MPU6050_Read_All+0x368>)
 80013a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a6:	f7ff f897 	bl	80004d8 <__aeabi_dmul>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	4b89      	ldr	r3, [pc, #548]	; (80015dc <MPU6050_Read_All+0x3a4>)
 80013b8:	f7fe fed8 	bl	800016c <__adddf3>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80013c6:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fc66 	bl	8000c9c <__aeabi_i2f>
 80013d0:	4603      	mov	r3, r0
 80013d2:	4983      	ldr	r1, [pc, #524]	; (80015e0 <MPU6050_Read_All+0x3a8>)
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fd69 	bl	8000eac <__aeabi_fdiv>
 80013da:	4603      	mov	r3, r0
 80013dc:	4981      	ldr	r1, [pc, #516]	; (80015e4 <MPU6050_Read_All+0x3ac>)
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fba8 	bl	8000b34 <__addsf3>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	661a      	str	r2, [r3, #96]	; 0x60
	getGres();
 80013ec:	f000 fdd8 	bl	8001fa0 <getGres>
    DataStruct->Gx = DEG_TO_RAD*(DataStruct->Gyro_X_RAW * gRes) - GX_OFFSET;
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fc50 	bl	8000c9c <__aeabi_i2f>
 80013fc:	4602      	mov	r2, r0
 80013fe:	4b7a      	ldr	r3, [pc, #488]	; (80015e8 <MPU6050_Read_All+0x3b0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4619      	mov	r1, r3
 8001404:	4610      	mov	r0, r2
 8001406:	f7ff fc9d 	bl	8000d44 <__aeabi_fmul>
 800140a:	4603      	mov	r3, r0
 800140c:	4977      	ldr	r1, [pc, #476]	; (80015ec <MPU6050_Read_All+0x3b4>)
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fc98 	bl	8000d44 <__aeabi_fmul>
 8001414:	4603      	mov	r3, r0
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f806 	bl	8000428 <__aeabi_f2d>
 800141c:	a368      	add	r3, pc, #416	; (adr r3, 80015c0 <MPU6050_Read_All+0x388>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	f7fe fea1 	bl	8000168 <__aeabi_dsub>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	68b9      	ldr	r1, [r7, #8]
 800142c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DEG_TO_RAD*(DataStruct->Gyro_Y_RAW * gRes)- GY_OFFSET;
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fc30 	bl	8000c9c <__aeabi_i2f>
 800143c:	4602      	mov	r2, r0
 800143e:	4b6a      	ldr	r3, [pc, #424]	; (80015e8 <MPU6050_Read_All+0x3b0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4619      	mov	r1, r3
 8001444:	4610      	mov	r0, r2
 8001446:	f7ff fc7d 	bl	8000d44 <__aeabi_fmul>
 800144a:	4603      	mov	r3, r0
 800144c:	4967      	ldr	r1, [pc, #412]	; (80015ec <MPU6050_Read_All+0x3b4>)
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fc78 	bl	8000d44 <__aeabi_fmul>
 8001454:	4603      	mov	r3, r0
 8001456:	4618      	mov	r0, r3
 8001458:	f7fe ffe6 	bl	8000428 <__aeabi_f2d>
 800145c:	a35a      	add	r3, pc, #360	; (adr r3, 80015c8 <MPU6050_Read_All+0x390>)
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	f7fe fe83 	bl	800016c <__adddf3>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	68b9      	ldr	r1, [r7, #8]
 800146c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DEG_TO_RAD*(DataStruct->Gyro_Z_RAW * gRes) - GZ_OFFSET;
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fc10 	bl	8000c9c <__aeabi_i2f>
 800147c:	4602      	mov	r2, r0
 800147e:	4b5a      	ldr	r3, [pc, #360]	; (80015e8 <MPU6050_Read_All+0x3b0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4619      	mov	r1, r3
 8001484:	4610      	mov	r0, r2
 8001486:	f7ff fc5d 	bl	8000d44 <__aeabi_fmul>
 800148a:	4603      	mov	r3, r0
 800148c:	4957      	ldr	r1, [pc, #348]	; (80015ec <MPU6050_Read_All+0x3b4>)
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fc58 	bl	8000d44 <__aeabi_fmul>
 8001494:	4603      	mov	r3, r0
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe ffc6 	bl	8000428 <__aeabi_f2d>
 800149c:	a34c      	add	r3, pc, #304	; (adr r3, 80015d0 <MPU6050_Read_All+0x398>)
 800149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a2:	f7fe fe63 	bl	800016c <__adddf3>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	68b9      	ldr	r1, [r7, #8]
 80014ac:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ST1, 1, &check, 1, i2c_timeout);
 80014b0:	2364      	movs	r3, #100	; 0x64
 80014b2:	9302      	str	r3, [sp, #8]
 80014b4:	2301      	movs	r3, #1
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	f107 0313 	add.w	r3, r7, #19
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	2301      	movs	r3, #1
 80014c0:	2202      	movs	r2, #2
 80014c2:	2118      	movs	r1, #24
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f001 fde5 	bl	8003094 <HAL_I2C_Mem_Read>
    if ((check & 0x01) == 0x01 ){
 80014ca:	7cfb      	ldrb	r3, [r7, #19]
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 8163 	beq.w	800179c <MPU6050_Read_All+0x564>
    	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_XOUT_L, 1, data, 7, i2c_timeout);  // Read the six raw data and ST2 registers sequentially into data array
 80014d6:	2364      	movs	r3, #100	; 0x64
 80014d8:	9302      	str	r3, [sp, #8]
 80014da:	2307      	movs	r3, #7
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	2301      	movs	r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	2118      	movs	r1, #24
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f001 fdd2 	bl	8003094 <HAL_I2C_Mem_Read>
    	uint8_t c = data[6];
 80014f0:	7ebb      	ldrb	r3, [r7, #26]
 80014f2:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
    	/* Check (ST2 Register) If Magnetic Sensor Overflow Occured */
    	if(!(c & 0x08)){
 80014f6:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f040 814c 	bne.w	800179c <MPU6050_Read_All+0x564>
    		DataStruct->Mag_X_RAW= ((int16_t)data[1] << 8) | data[0];
 8001504:	7d7b      	ldrb	r3, [r7, #21]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	b21a      	sxth	r2, r3
 800150a:	7d3b      	ldrb	r3, [r7, #20]
 800150c:	b21b      	sxth	r3, r3
 800150e:	4313      	orrs	r3, r2
 8001510:	b21a      	sxth	r2, r3
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    		DataStruct->Mag_Y_RAW = ((int16_t)data[3] << 8) | data[2];
 8001518:	7dfb      	ldrb	r3, [r7, #23]
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	b21a      	sxth	r2, r3
 800151e:	7dbb      	ldrb	r3, [r7, #22]
 8001520:	b21b      	sxth	r3, r3
 8001522:	4313      	orrs	r3, r2
 8001524:	b21a      	sxth	r2, r3
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    		DataStruct->Mag_Z_RAW = ((int16_t)data[5] << 8) | data[4];
 800152c:	7e7b      	ldrb	r3, [r7, #25]
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	b21a      	sxth	r2, r3
 8001532:	7e3b      	ldrb	r3, [r7, #24]
 8001534:	b21b      	sxth	r3, r3
 8001536:	4313      	orrs	r3, r2
 8001538:	b21a      	sxth	r2, r3
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    		getMres();
 8001540:	f000 fd10 	bl	8001f64 <getMres>
/*
    		    		DataStruct->Mx = (float)(DataStruct->Mag_X_RAW * mRes );
    		    		DataStruct->My = (float)(DataStruct->Mag_Y_RAW * mRes);
 	    		DataStruct->Mz = (float)(DataStruct->Mag_Z_RAW * mRes);
*/
    		DataStruct->Mx = (float)(DataStruct->Mag_X_RAW * mRes )- mag_b[0];
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fba6 	bl	8000c9c <__aeabi_i2f>
 8001550:	4602      	mov	r2, r0
 8001552:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <MPU6050_Read_All+0x3b8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4619      	mov	r1, r3
 8001558:	4610      	mov	r0, r2
 800155a:	f7ff fbf3 	bl	8000d44 <__aeabi_fmul>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <MPU6050_Read_All+0x3bc>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4619      	mov	r1, r3
 8001568:	4610      	mov	r0, r2
 800156a:	f7ff fae1 	bl	8000b30 <__aeabi_fsub>
 800156e:	4603      	mov	r3, r0
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe ff59 	bl	8000428 <__aeabi_f2d>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    		DataStruct->My = (float)(DataStruct->Mag_Y_RAW * mRes)- mag_b[1];
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fb88 	bl	8000c9c <__aeabi_i2f>
 800158c:	4602      	mov	r2, r0
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <MPU6050_Read_All+0x3b8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4619      	mov	r1, r3
 8001594:	4610      	mov	r0, r2
 8001596:	f7ff fbd5 	bl	8000d44 <__aeabi_fmul>
 800159a:	4603      	mov	r3, r0
 800159c:	461a      	mov	r2, r3
 800159e:	e02b      	b.n	80015f8 <MPU6050_Read_All+0x3c0>
 80015a0:	3a92a305 	.word	0x3a92a305
 80015a4:	40239d01 	.word	0x40239d01
 80015a8:	eb851eb8 	.word	0xeb851eb8
 80015ac:	3f9eb851 	.word	0x3f9eb851
 80015b0:	33333333 	.word	0x33333333
 80015b4:	3fc33333 	.word	0x3fc33333
 80015b8:	00000000 	.word	0x00000000
 80015bc:	40cc2900 	.word	0x40cc2900
 80015c0:	56041893 	.word	0x56041893
 80015c4:	3fa22d0e 	.word	0x3fa22d0e
 80015c8:	c8b43958 	.word	0xc8b43958
 80015cc:	3f9fbe76 	.word	0x3f9fbe76
 80015d0:	b645a1cb 	.word	0xb645a1cb
 80015d4:	3fa4fdf3 	.word	0x3fa4fdf3
 80015d8:	200001a0 	.word	0x200001a0
 80015dc:	3ff40000 	.word	0x3ff40000
 80015e0:	43aa0000 	.word	0x43aa0000
 80015e4:	42121eb8 	.word	0x42121eb8
 80015e8:	200001a4 	.word	0x200001a4
 80015ec:	3c8efa35 	.word	0x3c8efa35
 80015f0:	200001a8 	.word	0x200001a8
 80015f4:	200000d8 	.word	0x200000d8
 80015f8:	4b92      	ldr	r3, [pc, #584]	; (8001844 <MPU6050_Read_All+0x60c>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4619      	mov	r1, r3
 80015fe:	4610      	mov	r0, r2
 8001600:	f7ff fa96 	bl	8000b30 <__aeabi_fsub>
 8001604:	4603      	mov	r3, r0
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ff0e 	bl	8000428 <__aeabi_f2d>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    		DataStruct->Mz = (float)(DataStruct->Mag_Z_RAW * mRes)- mag_b[2];
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fb3d 	bl	8000c9c <__aeabi_i2f>
 8001622:	4602      	mov	r2, r0
 8001624:	4b88      	ldr	r3, [pc, #544]	; (8001848 <MPU6050_Read_All+0x610>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	4610      	mov	r0, r2
 800162c:	f7ff fb8a 	bl	8000d44 <__aeabi_fmul>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	4b83      	ldr	r3, [pc, #524]	; (8001844 <MPU6050_Read_All+0x60c>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	4619      	mov	r1, r3
 800163a:	4610      	mov	r0, r2
 800163c:	f7ff fa78 	bl	8000b30 <__aeabi_fsub>
 8001640:	4603      	mov	r3, r0
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe fef0 	bl	8000428 <__aeabi_f2d>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	68b9      	ldr	r1, [r7, #8]
 800164e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

    		DataStruct->Mx = mag_A[0][0]*DataStruct->Mx + mag_A[0][1]*DataStruct->My + mag_A[0][2]*DataStruct->Mz;
 8001652:	4b7e      	ldr	r3, [pc, #504]	; (800184c <MPU6050_Read_All+0x614>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fee6 	bl	8000428 <__aeabi_f2d>
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001662:	f7fe ff39 	bl	80004d8 <__aeabi_dmul>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4614      	mov	r4, r2
 800166c:	461d      	mov	r5, r3
 800166e:	4b77      	ldr	r3, [pc, #476]	; (800184c <MPU6050_Read_All+0x614>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe fed8 	bl	8000428 <__aeabi_f2d>
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800167e:	f7fe ff2b 	bl	80004d8 <__aeabi_dmul>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4620      	mov	r0, r4
 8001688:	4629      	mov	r1, r5
 800168a:	f7fe fd6f 	bl	800016c <__adddf3>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4614      	mov	r4, r2
 8001694:	461d      	mov	r5, r3
 8001696:	4b6d      	ldr	r3, [pc, #436]	; (800184c <MPU6050_Read_All+0x614>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fec4 	bl	8000428 <__aeabi_f2d>
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80016a6:	f7fe ff17 	bl	80004d8 <__aeabi_dmul>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4620      	mov	r0, r4
 80016b0:	4629      	mov	r1, r5
 80016b2:	f7fe fd5b 	bl	800016c <__adddf3>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	68b9      	ldr	r1, [r7, #8]
 80016bc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    		DataStruct->My = mag_A[1][0]*DataStruct->Mx + mag_A[1][1]*DataStruct->My + mag_A[1][2]*DataStruct->Mz;
 80016c0:	4b62      	ldr	r3, [pc, #392]	; (800184c <MPU6050_Read_All+0x614>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe feaf 	bl	8000428 <__aeabi_f2d>
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80016d0:	f7fe ff02 	bl	80004d8 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4614      	mov	r4, r2
 80016da:	461d      	mov	r5, r3
 80016dc:	4b5b      	ldr	r3, [pc, #364]	; (800184c <MPU6050_Read_All+0x614>)
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe fea1 	bl	8000428 <__aeabi_f2d>
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80016ec:	f7fe fef4 	bl	80004d8 <__aeabi_dmul>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4620      	mov	r0, r4
 80016f6:	4629      	mov	r1, r5
 80016f8:	f7fe fd38 	bl	800016c <__adddf3>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4614      	mov	r4, r2
 8001702:	461d      	mov	r5, r3
 8001704:	4b51      	ldr	r3, [pc, #324]	; (800184c <MPU6050_Read_All+0x614>)
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe fe8d 	bl	8000428 <__aeabi_f2d>
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001714:	f7fe fee0 	bl	80004d8 <__aeabi_dmul>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4620      	mov	r0, r4
 800171e:	4629      	mov	r1, r5
 8001720:	f7fe fd24 	bl	800016c <__adddf3>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    		DataStruct->Mz = mag_A[2][0]*DataStruct->Mx + mag_A[2][1]*DataStruct->My + mag_A[2][2]*DataStruct->Mz;
 800172e:	4b47      	ldr	r3, [pc, #284]	; (800184c <MPU6050_Read_All+0x614>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fe78 	bl	8000428 <__aeabi_f2d>
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800173e:	f7fe fecb 	bl	80004d8 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4614      	mov	r4, r2
 8001748:	461d      	mov	r5, r3
 800174a:	4b40      	ldr	r3, [pc, #256]	; (800184c <MPU6050_Read_All+0x614>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe fe6a 	bl	8000428 <__aeabi_f2d>
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800175a:	f7fe febd 	bl	80004d8 <__aeabi_dmul>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4620      	mov	r0, r4
 8001764:	4629      	mov	r1, r5
 8001766:	f7fe fd01 	bl	800016c <__adddf3>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4614      	mov	r4, r2
 8001770:	461d      	mov	r5, r3
 8001772:	4b36      	ldr	r3, [pc, #216]	; (800184c <MPU6050_Read_All+0x614>)
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fe56 	bl	8000428 <__aeabi_f2d>
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001782:	f7fe fea9 	bl	80004d8 <__aeabi_dmul>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4620      	mov	r0, r4
 800178c:	4629      	mov	r1, r5
 800178e:	f7fe fced 	bl	800016c <__adddf3>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	68b9      	ldr	r1, [r7, #8]
 8001798:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

    		}
    	}

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800179c:	f000 ffca 	bl	8002734 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <MPU6050_Read_All+0x618>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fe1b 	bl	80003e4 <__aeabi_ui2d>
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	4b28      	ldr	r3, [pc, #160]	; (8001854 <MPU6050_Read_All+0x61c>)
 80017b4:	f7fe ffba 	bl	800072c <__aeabi_ddiv>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    timer = HAL_GetTick();
 80017c0:	f000 ffb8 	bl	8002734 <HAL_GetTick>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4a22      	ldr	r2, [pc, #136]	; (8001850 <MPU6050_Read_All+0x618>)
 80017c8:	6013      	str	r3, [r2, #0]
    //double roll = atan2(DataStruct->Ay,DataStruct->Az);
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d0:	461a      	mov	r2, r3
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d8:	fb03 f202 	mul.w	r2, r3, r2
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017e2:	4619      	mov	r1, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017ea:	fb01 f303 	mul.w	r3, r1, r3
 80017ee:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fe07 	bl	8000404 <__aeabi_i2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	f003 fcf8 	bl	80051f2 <sqrt>
 8001802:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
    if (roll_sqrt != 0.0)
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001812:	f7ff f8c9 	bl	80009a8 <__aeabi_dcmpeq>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d11d      	bne.n	8001858 <MPU6050_Read_All+0x620>
    {
    	roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) ;
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fdee 	bl	8000404 <__aeabi_i2d>
 8001828:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800182c:	f7fe ff7e 	bl	800072c <__aeabi_ddiv>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f003 fd02 	bl	8005240 <atan>
 800183c:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
 8001840:	e010      	b.n	8001864 <MPU6050_Read_All+0x62c>
 8001842:	bf00      	nop
 8001844:	200000d8 	.word	0x200000d8
 8001848:	200001a8 	.word	0x200001a8
 800184c:	200000e4 	.word	0x200000e4
 8001850:	2000019c 	.word	0x2000019c
 8001854:	408f4000 	.word	0x408f4000
        //roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
    }
    else
    {
        roll = 0.0;
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    }

   //double pitch = asin(-DataStruct->Ax/norm(DataStruct->Ax,DataStruct->Ay,DataStruct->Az));
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW);
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	f9b3 3000 	ldrsh.w	r3, [r3]
 800186a:	425b      	negs	r3, r3
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fdc9 	bl	8000404 <__aeabi_i2d>
 8001872:	4604      	mov	r4, r0
 8001874:	460d      	mov	r5, r1
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fdc1 	bl	8000404 <__aeabi_i2d>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4620      	mov	r0, r4
 8001888:	4629      	mov	r1, r5
 800188a:	f003 fcb0 	bl	80051ee <atan2>
 800188e:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
    //double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
    if ((pitch < -90*DEG_TO_RAD && DataStruct->KalmanAngleY > 90*DEG_TO_RAD) || (pitch > 90*DEG_TO_RAD && DataStruct->KalmanAngleY < -90*DEG_TO_RAD))
 8001892:	a31b      	add	r3, pc, #108	; (adr r3, 8001900 <MPU6050_Read_All+0x6c8>)
 8001894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001898:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800189c:	f7ff f88e 	bl	80009bc <__aeabi_dcmplt>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00a      	beq.n	80018bc <MPU6050_Read_All+0x684>
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80018ac:	a316      	add	r3, pc, #88	; (adr r3, 8001908 <MPU6050_Read_All+0x6d0>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	f7ff f8a1 	bl	80009f8 <__aeabi_dcmpgt>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d114      	bne.n	80018e6 <MPU6050_Read_All+0x6ae>
 80018bc:	a312      	add	r3, pc, #72	; (adr r3, 8001908 <MPU6050_Read_All+0x6d0>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80018c6:	f7ff f897 	bl	80009f8 <__aeabi_dcmpgt>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d021      	beq.n	8001914 <MPU6050_Read_All+0x6dc>
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80018d6:	a30a      	add	r3, pc, #40	; (adr r3, 8001900 <MPU6050_Read_All+0x6c8>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7ff f86e 	bl	80009bc <__aeabi_dcmplt>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d016      	beq.n	8001914 <MPU6050_Read_All+0x6dc>
    {
        KalmanY.angle = pitch;
 80018e6:	490a      	ldr	r1, [pc, #40]	; (8001910 <MPU6050_Read_All+0x6d8>)
 80018e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80018ec:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80018f0:	68b9      	ldr	r1, [r7, #8]
 80018f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80018f6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 80018fa:	e01e      	b.n	800193a <MPU6050_Read_All+0x702>
 80018fc:	f3af 8000 	nop.w
 8001900:	60000000 	.word	0x60000000
 8001904:	bff921fb 	.word	0xbff921fb
 8001908:	60000000 	.word	0x60000000
 800190c:	3ff921fb 	.word	0x3ff921fb
 8001910:	20000048 	.word	0x20000048
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800191a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800191e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001922:	e9cd 2300 	strd	r2, r3, [sp]
 8001926:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800192a:	48bf      	ldr	r0, [pc, #764]	; (8001c28 <MPU6050_Read_All+0x9f0>)
 800192c:	f000 f9c6 	bl	8001cbc <Kalman_getAngle>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
    }

    if (fabs(DataStruct->KalmanAngleY) > 90*DEG_TO_RAD)
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8001940:	603a      	str	r2, [r7, #0]
 8001942:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	a3b5      	add	r3, pc, #724	; (adr r3, 8001c20 <MPU6050_Read_All+0x9e8>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001952:	f7ff f851 	bl	80009f8 <__aeabi_dcmpgt>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d008      	beq.n	800196e <MPU6050_Read_All+0x736>
        DataStruct->Gx = -DataStruct->Gx;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001962:	4690      	mov	r8, r2
 8001964:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	e9c3 890a 	strd	r8, r9, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001974:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001978:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800197c:	e9cd 2300 	strd	r2, r3, [sp]
 8001980:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001984:	48a9      	ldr	r0, [pc, #676]	; (8001c2c <MPU6050_Read_All+0x9f4>)
 8001986:	f000 f999 	bl	8001cbc <Kalman_getAngle>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	68b9      	ldr	r1, [r7, #8]
 8001990:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

     float mx = (DataStruct->Mx )/ norm(DataStruct->Mx,DataStruct->My,DataStruct->Mz);
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	f7ff f870 	bl	8000a88 <__aeabi_d2f>
 80019a8:	4606      	mov	r6, r0
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	f7ff f868 	bl	8000a88 <__aeabi_d2f>
 80019b8:	4680      	mov	r8, r0
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	f7ff f860 	bl	8000a88 <__aeabi_d2f>
 80019c8:	4603      	mov	r3, r0
 80019ca:	461a      	mov	r2, r3
 80019cc:	4641      	mov	r1, r8
 80019ce:	4630      	mov	r0, r6
 80019d0:	f000 fb46 	bl	8002060 <norm>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fd26 	bl	8000428 <__aeabi_f2d>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4620      	mov	r0, r4
 80019e2:	4629      	mov	r1, r5
 80019e4:	f7fe fea2 	bl	800072c <__aeabi_ddiv>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	f7ff f84a 	bl	8000a88 <__aeabi_d2f>
 80019f4:	4603      	mov	r3, r0
 80019f6:	63fb      	str	r3, [r7, #60]	; 0x3c
     float my = - (DataStruct->My )/ norm(DataStruct->Mx,DataStruct->My,DataStruct->Mz);
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80019fe:	4692      	mov	sl, r2
 8001a00:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f7ff f83b 	bl	8000a88 <__aeabi_d2f>
 8001a12:	4604      	mov	r4, r0
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f7ff f833 	bl	8000a88 <__aeabi_d2f>
 8001a22:	4605      	mov	r5, r0
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f7ff f82b 	bl	8000a88 <__aeabi_d2f>
 8001a32:	4603      	mov	r3, r0
 8001a34:	461a      	mov	r2, r3
 8001a36:	4629      	mov	r1, r5
 8001a38:	4620      	mov	r0, r4
 8001a3a:	f000 fb11 	bl	8002060 <norm>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fcf1 	bl	8000428 <__aeabi_f2d>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4650      	mov	r0, sl
 8001a4c:	4659      	mov	r1, fp
 8001a4e:	f7fe fe6d 	bl	800072c <__aeabi_ddiv>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4610      	mov	r0, r2
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f7ff f815 	bl	8000a88 <__aeabi_d2f>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	63bb      	str	r3, [r7, #56]	; 0x38
     float mz = (DataStruct->Mz )/ norm(DataStruct->Mx,DataStruct->My,DataStruct->Mz);
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7ff f809 	bl	8000a88 <__aeabi_d2f>
 8001a76:	4606      	mov	r6, r0
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f7ff f801 	bl	8000a88 <__aeabi_d2f>
 8001a86:	4680      	mov	r8, r0
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001a8e:	4610      	mov	r0, r2
 8001a90:	4619      	mov	r1, r3
 8001a92:	f7fe fff9 	bl	8000a88 <__aeabi_d2f>
 8001a96:	4603      	mov	r3, r0
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4641      	mov	r1, r8
 8001a9c:	4630      	mov	r0, r6
 8001a9e:	f000 fadf 	bl	8002060 <norm>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fcbf 	bl	8000428 <__aeabi_f2d>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4620      	mov	r0, r4
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	f7fe fe3b 	bl	800072c <__aeabi_ddiv>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	f7fe ffe3 	bl	8000a88 <__aeabi_d2f>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	637b      	str	r3, [r7, #52]	; 0x34

     float Mx = mx * cos(pitch) + mz * sin(pitch);
 8001ac6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001ac8:	f7fe fcae 	bl	8000428 <__aeabi_f2d>
 8001acc:	4604      	mov	r4, r0
 8001ace:	460d      	mov	r5, r1
 8001ad0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001ad4:	f003 fd3e 	bl	8005554 <cos>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4620      	mov	r0, r4
 8001ade:	4629      	mov	r1, r5
 8001ae0:	f7fe fcfa 	bl	80004d8 <__aeabi_dmul>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4690      	mov	r8, r2
 8001aea:	4699      	mov	r9, r3
 8001aec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001aee:	f7fe fc9b 	bl	8000428 <__aeabi_f2d>
 8001af2:	4604      	mov	r4, r0
 8001af4:	460d      	mov	r5, r1
 8001af6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001afa:	f003 fd75 	bl	80055e8 <sin>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4620      	mov	r0, r4
 8001b04:	4629      	mov	r1, r5
 8001b06:	f7fe fce7 	bl	80004d8 <__aeabi_dmul>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4640      	mov	r0, r8
 8001b10:	4649      	mov	r1, r9
 8001b12:	f7fe fb2b 	bl	800016c <__adddf3>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f7fe ffb3 	bl	8000a88 <__aeabi_d2f>
 8001b22:	4603      	mov	r3, r0
 8001b24:	633b      	str	r3, [r7, #48]	; 0x30
     float My = mx * sin(roll) * sin(pitch) + my * cos(roll) - mz * sin(roll) * cos(pitch);
 8001b26:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001b28:	f7fe fc7e 	bl	8000428 <__aeabi_f2d>
 8001b2c:	4604      	mov	r4, r0
 8001b2e:	460d      	mov	r5, r1
 8001b30:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001b34:	f003 fd58 	bl	80055e8 <sin>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	4629      	mov	r1, r5
 8001b40:	f7fe fcca 	bl	80004d8 <__aeabi_dmul>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4614      	mov	r4, r2
 8001b4a:	461d      	mov	r5, r3
 8001b4c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001b50:	f003 fd4a 	bl	80055e8 <sin>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4620      	mov	r0, r4
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	f7fe fcbc 	bl	80004d8 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4690      	mov	r8, r2
 8001b66:	4699      	mov	r9, r3
 8001b68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001b6a:	f7fe fc5d 	bl	8000428 <__aeabi_f2d>
 8001b6e:	4604      	mov	r4, r0
 8001b70:	460d      	mov	r5, r1
 8001b72:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001b76:	f003 fced 	bl	8005554 <cos>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4620      	mov	r0, r4
 8001b80:	4629      	mov	r1, r5
 8001b82:	f7fe fca9 	bl	80004d8 <__aeabi_dmul>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4640      	mov	r0, r8
 8001b8c:	4649      	mov	r1, r9
 8001b8e:	f7fe faed 	bl	800016c <__adddf3>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4690      	mov	r8, r2
 8001b98:	4699      	mov	r9, r3
 8001b9a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b9c:	f7fe fc44 	bl	8000428 <__aeabi_f2d>
 8001ba0:	4604      	mov	r4, r0
 8001ba2:	460d      	mov	r5, r1
 8001ba4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001ba8:	f003 fd1e 	bl	80055e8 <sin>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	f7fe fc90 	bl	80004d8 <__aeabi_dmul>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4614      	mov	r4, r2
 8001bbe:	461d      	mov	r5, r3
 8001bc0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001bc4:	f003 fcc6 	bl	8005554 <cos>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4620      	mov	r0, r4
 8001bce:	4629      	mov	r1, r5
 8001bd0:	f7fe fc82 	bl	80004d8 <__aeabi_dmul>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4640      	mov	r0, r8
 8001bda:	4649      	mov	r1, r9
 8001bdc:	f7fe fac4 	bl	8000168 <__aeabi_dsub>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	f7fe ff4e 	bl	8000a88 <__aeabi_d2f>
 8001bec:	4603      	mov	r3, r0
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
     float yaw = atan2(-My,Mx);
 8001bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fc16 	bl	8000428 <__aeabi_f2d>
 8001bfc:	4604      	mov	r4, r0
 8001bfe:	460d      	mov	r5, r1
 8001c00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c02:	f7fe fc11 	bl	8000428 <__aeabi_f2d>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	4629      	mov	r1, r5
 8001c0e:	f003 faee 	bl	80051ee <atan2>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4610      	mov	r0, r2
 8001c18:	e00a      	b.n	8001c30 <MPU6050_Read_All+0x9f8>
 8001c1a:	bf00      	nop
 8001c1c:	f3af 8000 	nop.w
 8001c20:	60000000 	.word	0x60000000
 8001c24:	3ff921fb 	.word	0x3ff921fb
 8001c28:	20000048 	.word	0x20000048
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	4619      	mov	r1, r3
 8001c32:	f7fe ff29 	bl	8000a88 <__aeabi_d2f>
 8001c36:	4603      	mov	r3, r0
 8001c38:	65fb      	str	r3, [r7, #92]	; 0x5c

     float Mx = mx * cos(pitch) + my*sin(pitch)*sin(roll) + mz * sin(pitch)*cos(roll);
     float My =  my * cos(roll) - mz * sin(roll);
     float yaw = atan2(-My,Mx);
*/
     if (yaw > PI) {
 8001c3a:	491c      	ldr	r1, [pc, #112]	; (8001cac <MPU6050_Read_All+0xa74>)
 8001c3c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001c3e:	f7ff fa3d 	bl	80010bc <__aeabi_fcmpgt>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d006      	beq.n	8001c56 <MPU6050_Read_All+0xa1e>
      yaw -= 2*PI;
 8001c48:	4919      	ldr	r1, [pc, #100]	; (8001cb0 <MPU6050_Read_All+0xa78>)
 8001c4a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001c4c:	f7fe ff70 	bl	8000b30 <__aeabi_fsub>
 8001c50:	4603      	mov	r3, r0
 8001c52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c54:	e00c      	b.n	8001c70 <MPU6050_Read_All+0xa38>
      }
     else if (yaw < -PI) {
 8001c56:	4917      	ldr	r1, [pc, #92]	; (8001cb4 <MPU6050_Read_All+0xa7c>)
 8001c58:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001c5a:	f7ff fa11 	bl	8001080 <__aeabi_fcmplt>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <MPU6050_Read_All+0xa38>
      yaw += 2*PI;
 8001c64:	4912      	ldr	r1, [pc, #72]	; (8001cb0 <MPU6050_Read_All+0xa78>)
 8001c66:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001c68:	f7fe ff64 	bl	8000b34 <__addsf3>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
     DataStruct->KalmanAngleZ = Kalman_getAngle(&KalmanZ, yaw, DataStruct->Gz, dt);
 8001c70:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001c72:	f7fe fbd9 	bl	8000428 <__aeabi_f2d>
 8001c76:	4604      	mov	r4, r0
 8001c78:	460d      	mov	r5, r1
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001c80:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001c88:	e9cd 2300 	strd	r2, r3, [sp]
 8001c8c:	4622      	mov	r2, r4
 8001c8e:	462b      	mov	r3, r5
 8001c90:	4809      	ldr	r0, [pc, #36]	; (8001cb8 <MPU6050_Read_All+0xa80>)
 8001c92:	f000 f813 	bl	8001cbc <Kalman_getAngle>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	68b9      	ldr	r1, [r7, #8]
 8001c9c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
}
 8001ca0:	bf00      	nop
 8001ca2:	376c      	adds	r7, #108	; 0x6c
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001caa:	bf00      	nop
 8001cac:	40490fdb 	.word	0x40490fdb
 8001cb0:	40c90fdb 	.word	0x40c90fdb
 8001cb4:	c0490fdb 	.word	0xc0490fdb
 8001cb8:	20000090 	.word	0x20000090

08001cbc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001cbc:	b5b0      	push	{r4, r5, r7, lr}
 8001cbe:	b092      	sub	sp, #72	; 0x48
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001cce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001cd2:	f7fe fa49 	bl	8000168 <__aeabi_dsub>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate; // predict goc , dua vao rate cua gyro (van toc goc)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001ce4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ce8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001cec:	f7fe fbf4 	bl	80004d8 <__aeabi_dmul>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	4629      	mov	r1, r5
 8001cf8:	f7fe fa38 	bl	800016c <__adddf3>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	68f9      	ldr	r1, [r7, #12]
 8001d02:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001d12:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d16:	f7fe fbdf 	bl	80004d8 <__aeabi_dmul>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4619      	mov	r1, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001d28:	f7fe fa1e 	bl	8000168 <__aeabi_dsub>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4610      	mov	r0, r2
 8001d32:	4619      	mov	r1, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001d3a:	f7fe fa15 	bl	8000168 <__aeabi_dsub>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4c:	f7fe fa0e 	bl	800016c <__adddf3>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4610      	mov	r0, r2
 8001d56:	4619      	mov	r1, r3
 8001d58:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d5c:	f7fe fbbc 	bl	80004d8 <__aeabi_dmul>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4620      	mov	r0, r4
 8001d66:	4629      	mov	r1, r5
 8001d68:	f7fe fa00 	bl	800016c <__adddf3>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	68f9      	ldr	r1, [r7, #12]
 8001d72:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001d82:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d86:	f7fe fba7 	bl	80004d8 <__aeabi_dmul>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4620      	mov	r0, r4
 8001d90:	4629      	mov	r1, r5
 8001d92:	f7fe f9e9 	bl	8000168 <__aeabi_dsub>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	68f9      	ldr	r1, [r7, #12]
 8001d9c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001dac:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001db0:	f7fe fb92 	bl	80004d8 <__aeabi_dmul>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4620      	mov	r0, r4
 8001dba:	4629      	mov	r1, r5
 8001dbc:	f7fe f9d4 	bl	8000168 <__aeabi_dsub>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	68f9      	ldr	r1, [r7, #12]
 8001dc6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001dd6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001dda:	f7fe fb7d 	bl	80004d8 <__aeabi_dmul>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4620      	mov	r0, r4
 8001de4:	4629      	mov	r1, r5
 8001de6:	f7fe f9c1 	bl	800016c <__adddf3>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	68f9      	ldr	r1, [r7, #12]
 8001df0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e00:	f7fe f9b4 	bl	800016c <__adddf3>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001e12:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e16:	f7fe fc89 	bl	800072c <__aeabi_ddiv>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001e28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e2c:	f7fe fc7e 	bl	800072c <__aeabi_ddiv>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001e3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e42:	f7fe f991 	bl	8000168 <__aeabi_dsub>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;  // update tu roll/pitch cua accel
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001e54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e58:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e5c:	f7fe fb3c 	bl	80004d8 <__aeabi_dmul>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4620      	mov	r0, r4
 8001e66:	4629      	mov	r1, r5
 8001e68:	f7fe f980 	bl	800016c <__adddf3>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	68f9      	ldr	r1, [r7, #12]
 8001e72:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001e7c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e84:	f7fe fb28 	bl	80004d8 <__aeabi_dmul>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	4629      	mov	r1, r5
 8001e90:	f7fe f96c 	bl	800016c <__adddf3>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	68f9      	ldr	r1, [r7, #12]
 8001e9a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001ea4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001eae:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001eb8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ebc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ec0:	f7fe fb0a 	bl	80004d8 <__aeabi_dmul>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4620      	mov	r0, r4
 8001eca:	4629      	mov	r1, r5
 8001ecc:	f7fe f94c 	bl	8000168 <__aeabi_dsub>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	68f9      	ldr	r1, [r7, #12]
 8001ed6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001ee0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ee4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ee8:	f7fe faf6 	bl	80004d8 <__aeabi_dmul>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	4629      	mov	r1, r5
 8001ef4:	f7fe f938 	bl	8000168 <__aeabi_dsub>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	68f9      	ldr	r1, [r7, #12]
 8001efe:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001f08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f10:	f7fe fae2 	bl	80004d8 <__aeabi_dmul>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4620      	mov	r0, r4
 8001f1a:	4629      	mov	r1, r5
 8001f1c:	f7fe f924 	bl	8000168 <__aeabi_dsub>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	68f9      	ldr	r1, [r7, #12]
 8001f26:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001f30:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f34:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f38:	f7fe face 	bl	80004d8 <__aeabi_dmul>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4620      	mov	r0, r4
 8001f42:	4629      	mov	r1, r5
 8001f44:	f7fe f910 	bl	8000168 <__aeabi_dsub>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	68f9      	ldr	r1, [r7, #12]
 8001f4e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	3748      	adds	r7, #72	; 0x48
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001f64 <getMres>:
	destination[2] =  (float)(rawMagCalData[2] - 128)/256. + 1.;
	// Set magnetometer data resolution and sample ODR
	Data = Mscale << 4 | Mmode;
	HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &Data, 1, i2c_timeout);
}
void getMres() {
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  switch (Mscale)
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <getMres+0x2c>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <getMres+0x12>
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d004      	beq.n	8001f7e <getMres+0x1a>
          break;
    case MFS_16BITS:
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
          break;
  }
}
 8001f74:	e007      	b.n	8001f86 <getMres+0x22>
          mRes = 10.*4912./8190.; // Proper scale to return milliGauss
 8001f76:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <getMres+0x30>)
 8001f78:	4a07      	ldr	r2, [pc, #28]	; (8001f98 <getMres+0x34>)
 8001f7a:	601a      	str	r2, [r3, #0]
          break;
 8001f7c:	e003      	b.n	8001f86 <getMres+0x22>
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <getMres+0x30>)
 8001f80:	4a06      	ldr	r2, [pc, #24]	; (8001f9c <getMres+0x38>)
 8001f82:	601a      	str	r2, [r3, #0]
          break;
 8001f84:	bf00      	nop
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	20000108 	.word	0x20000108
 8001f94:	200001a8 	.word	0x200001a8
 8001f98:	40bfebff 	.word	0x40bfebff
 8001f9c:	3fbfebff 	.word	0x3fbfebff

08001fa0 <getGres>:
void getGres() {
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  switch (Gscale)
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <getGres+0x4c>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d81b      	bhi.n	8001fe4 <getGres+0x44>
 8001fac:	a201      	add	r2, pc, #4	; (adr r2, 8001fb4 <getGres+0x14>)
 8001fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb2:	bf00      	nop
 8001fb4:	08001fc5 	.word	0x08001fc5
 8001fb8:	08001fcd 	.word	0x08001fcd
 8001fbc:	08001fd5 	.word	0x08001fd5
 8001fc0:	08001fdd 	.word	0x08001fdd
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          gRes = 250.0/32768.0;
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <getGres+0x50>)
 8001fc6:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <getGres+0x54>)
 8001fc8:	601a      	str	r2, [r3, #0]
          break;
 8001fca:	e00b      	b.n	8001fe4 <getGres+0x44>
    case GFS_500DPS:
          gRes = 500.0/32768.0;
 8001fcc:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <getGres+0x50>)
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <getGres+0x58>)
 8001fd0:	601a      	str	r2, [r3, #0]
          break;
 8001fd2:	e007      	b.n	8001fe4 <getGres+0x44>
    case GFS_1000DPS:
          gRes = 1000.0/32768.0;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <getGres+0x50>)
 8001fd6:	4a09      	ldr	r2, [pc, #36]	; (8001ffc <getGres+0x5c>)
 8001fd8:	601a      	str	r2, [r3, #0]
          break;
 8001fda:	e003      	b.n	8001fe4 <getGres+0x44>
    case GFS_2000DPS:
          gRes = 2000.0/32768.0;
 8001fdc:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <getGres+0x50>)
 8001fde:	4a08      	ldr	r2, [pc, #32]	; (8002000 <getGres+0x60>)
 8001fe0:	601a      	str	r2, [r3, #0]
          break;
 8001fe2:	bf00      	nop
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr
 8001fec:	200001ac 	.word	0x200001ac
 8001ff0:	200001a4 	.word	0x200001a4
 8001ff4:	3bfa0000 	.word	0x3bfa0000
 8001ff8:	3c7a0000 	.word	0x3c7a0000
 8001ffc:	3cfa0000 	.word	0x3cfa0000
 8002000:	3d7a0000 	.word	0x3d7a0000

08002004 <getAres>:
void getAres() {
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  switch (Ascale)
 8002008:	4b13      	ldr	r3, [pc, #76]	; (8002058 <getAres+0x54>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b03      	cmp	r3, #3
 800200e:	d81f      	bhi.n	8002050 <getAres+0x4c>
 8002010:	a201      	add	r2, pc, #4	; (adr r2, 8002018 <getAres+0x14>)
 8002012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002016:	bf00      	nop
 8002018:	08002029 	.word	0x08002029
 800201c:	08002033 	.word	0x08002033
 8002020:	0800203d 	.word	0x0800203d
 8002024:	08002047 	.word	0x08002047
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
          aRes = 2.0/32768.0;
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <getAres+0x58>)
 800202a:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800202e:	601a      	str	r2, [r3, #0]
          break;
 8002030:	e00e      	b.n	8002050 <getAres+0x4c>
    case AFS_4G:
          aRes = 4.0/32768.0;
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <getAres+0x58>)
 8002034:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8002038:	601a      	str	r2, [r3, #0]
          break;
 800203a:	e009      	b.n	8002050 <getAres+0x4c>
    case AFS_8G:
          aRes = 8.0/32768.0;
 800203c:	4b07      	ldr	r3, [pc, #28]	; (800205c <getAres+0x58>)
 800203e:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8002042:	601a      	str	r2, [r3, #0]
          break;
 8002044:	e004      	b.n	8002050 <getAres+0x4c>
    case AFS_16G:
          aRes = 16.0/32768.0;
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <getAres+0x58>)
 8002048:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 800204c:	601a      	str	r2, [r3, #0]
          break;
 800204e:	bf00      	nop
  }
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr
 8002058:	200001ad 	.word	0x200001ad
 800205c:	200001a0 	.word	0x200001a0

08002060 <norm>:
float norm(float a, float b, float c) {
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
 return sqrt(a*a + b*b + c*c);
 800206c:	68f9      	ldr	r1, [r7, #12]
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f7fe fe68 	bl	8000d44 <__aeabi_fmul>
 8002074:	4603      	mov	r3, r0
 8002076:	461c      	mov	r4, r3
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	68b8      	ldr	r0, [r7, #8]
 800207c:	f7fe fe62 	bl	8000d44 <__aeabi_fmul>
 8002080:	4603      	mov	r3, r0
 8002082:	4619      	mov	r1, r3
 8002084:	4620      	mov	r0, r4
 8002086:	f7fe fd55 	bl	8000b34 <__addsf3>
 800208a:	4603      	mov	r3, r0
 800208c:	461c      	mov	r4, r3
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7fe fe57 	bl	8000d44 <__aeabi_fmul>
 8002096:	4603      	mov	r3, r0
 8002098:	4619      	mov	r1, r3
 800209a:	4620      	mov	r0, r4
 800209c:	f7fe fd4a 	bl	8000b34 <__addsf3>
 80020a0:	4603      	mov	r3, r0
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe f9c0 	bl	8000428 <__aeabi_f2d>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4610      	mov	r0, r2
 80020ae:	4619      	mov	r1, r3
 80020b0:	f003 f89f 	bl	80051f2 <sqrt>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4610      	mov	r0, r2
 80020ba:	4619      	mov	r1, r3
 80020bc:	f7fe fce4 	bl	8000a88 <__aeabi_d2f>
 80020c0:	4603      	mov	r3, r0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd90      	pop	{r4, r7, pc}
 80020ca:	0000      	movs	r0, r0
 80020cc:	0000      	movs	r0, r0
	...

080020d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d0:	b5b0      	push	{r4, r5, r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020d6:	f000 fad5 	bl	8002684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020da:	f000 f8c7 	bl	800226c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020de:	f000 f959 	bl	8002394 <MX_GPIO_Init>
  MX_I2C1_Init();
 80020e2:	f000 f8ff 	bl	80022e4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80020e6:	f000 f92b 	bl	8002340 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 80020ea:	bf00      	nop
 80020ec:	4852      	ldr	r0, [pc, #328]	; (8002238 <main+0x168>)
 80020ee:	f7fe ffef 	bl	80010d0 <MPU6050_Init>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d0f9      	beq.n	80020ec <main+0x1c>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GetTick()- time_current >= time_example)
 80020f8:	f000 fb1c 	bl	8002734 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	4b4f      	ldr	r3, [pc, #316]	; (800223c <main+0x16c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	1ad2      	subs	r2, r2, r3
 8002104:	4b4e      	ldr	r3, [pc, #312]	; (8002240 <main+0x170>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d3f5      	bcc.n	80020f8 <main+0x28>
	 	   	  {
	 	   		 time_current = HAL_GetTick();
 800210c:	f000 fb12 	bl	8002734 <HAL_GetTick>
 8002110:	4603      	mov	r3, r0
 8002112:	4a4a      	ldr	r2, [pc, #296]	; (800223c <main+0x16c>)
 8002114:	6013      	str	r3, [r2, #0]
	 	   		 MPU6050_Read_All(&hi2c1,&MPU6050);
 8002116:	494b      	ldr	r1, [pc, #300]	; (8002244 <main+0x174>)
 8002118:	4847      	ldr	r0, [pc, #284]	; (8002238 <main+0x168>)
 800211a:	f7ff f88d 	bl	8001238 <MPU6050_Read_All>

	 	   		 datax = RAD_TO_DEG*MPU6050.KalmanAngleX*1000;
 800211e:	4b49      	ldr	r3, [pc, #292]	; (8002244 <main+0x174>)
 8002120:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002124:	a342      	add	r3, pc, #264	; (adr r3, 8002230 <main+0x160>)
 8002126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212a:	f7fe f9d5 	bl	80004d8 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4610      	mov	r0, r2
 8002134:	4619      	mov	r1, r3
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	4b43      	ldr	r3, [pc, #268]	; (8002248 <main+0x178>)
 800213c:	f7fe f9cc 	bl	80004d8 <__aeabi_dmul>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4610      	mov	r0, r2
 8002146:	4619      	mov	r1, r3
 8002148:	f7fe fc76 	bl	8000a38 <__aeabi_d2iz>
 800214c:	4603      	mov	r3, r0
 800214e:	4a3f      	ldr	r2, [pc, #252]	; (800224c <main+0x17c>)
 8002150:	6013      	str	r3, [r2, #0]
	 	   		 datay = RAD_TO_DEG*MPU6050.KalmanAngleY*1000;
 8002152:	4b3c      	ldr	r3, [pc, #240]	; (8002244 <main+0x174>)
 8002154:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8002158:	a335      	add	r3, pc, #212	; (adr r3, 8002230 <main+0x160>)
 800215a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215e:	f7fe f9bb 	bl	80004d8 <__aeabi_dmul>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4610      	mov	r0, r2
 8002168:	4619      	mov	r1, r3
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	4b36      	ldr	r3, [pc, #216]	; (8002248 <main+0x178>)
 8002170:	f7fe f9b2 	bl	80004d8 <__aeabi_dmul>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	f7fe fc5c 	bl	8000a38 <__aeabi_d2iz>
 8002180:	4603      	mov	r3, r0
 8002182:	4a33      	ldr	r2, [pc, #204]	; (8002250 <main+0x180>)
 8002184:	6013      	str	r3, [r2, #0]
	 	   		 dataz = RAD_TO_DEG*MPU6050.KalmanAngleZ*1000;
 8002186:	4b2f      	ldr	r3, [pc, #188]	; (8002244 <main+0x174>)
 8002188:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 800218c:	a328      	add	r3, pc, #160	; (adr r3, 8002230 <main+0x160>)
 800218e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002192:	f7fe f9a1 	bl	80004d8 <__aeabi_dmul>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4610      	mov	r0, r2
 800219c:	4619      	mov	r1, r3
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	4b29      	ldr	r3, [pc, #164]	; (8002248 <main+0x178>)
 80021a4:	f7fe f998 	bl	80004d8 <__aeabi_dmul>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4610      	mov	r0, r2
 80021ae:	4619      	mov	r1, r3
 80021b0:	f7fe fc42 	bl	8000a38 <__aeabi_d2iz>
 80021b4:	4603      	mov	r3, r0
 80021b6:	4a27      	ldr	r2, [pc, #156]	; (8002254 <main+0x184>)
 80021b8:	6013      	str	r3, [r2, #0]

	 	   		sprintf(data,FRAME,SIGN(datax),ABS(datax),SIGN(datay),ABS(datay),SIGN(dataz),ABS(dataz));
 80021ba:	4b24      	ldr	r3, [pc, #144]	; (800224c <main+0x17c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	db01      	blt.n	80021c6 <main+0xf6>
 80021c2:	4c25      	ldr	r4, [pc, #148]	; (8002258 <main+0x188>)
 80021c4:	e000      	b.n	80021c8 <main+0xf8>
 80021c6:	4c25      	ldr	r4, [pc, #148]	; (800225c <main+0x18c>)
 80021c8:	4b20      	ldr	r3, [pc, #128]	; (800224c <main+0x17c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 80021d0:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
 80021d4:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <main+0x180>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	db01      	blt.n	80021e0 <main+0x110>
 80021dc:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <main+0x188>)
 80021de:	e000      	b.n	80021e2 <main+0x112>
 80021e0:	4b1e      	ldr	r3, [pc, #120]	; (800225c <main+0x18c>)
 80021e2:	4a1b      	ldr	r2, [pc, #108]	; (8002250 <main+0x180>)
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	2a00      	cmp	r2, #0
 80021e8:	bfb8      	it	lt
 80021ea:	4252      	neglt	r2, r2
 80021ec:	4919      	ldr	r1, [pc, #100]	; (8002254 <main+0x184>)
 80021ee:	6809      	ldr	r1, [r1, #0]
 80021f0:	2900      	cmp	r1, #0
 80021f2:	db01      	blt.n	80021f8 <main+0x128>
 80021f4:	4918      	ldr	r1, [pc, #96]	; (8002258 <main+0x188>)
 80021f6:	e000      	b.n	80021fa <main+0x12a>
 80021f8:	4918      	ldr	r1, [pc, #96]	; (800225c <main+0x18c>)
 80021fa:	4816      	ldr	r0, [pc, #88]	; (8002254 <main+0x184>)
 80021fc:	6800      	ldr	r0, [r0, #0]
 80021fe:	2800      	cmp	r0, #0
 8002200:	bfb8      	it	lt
 8002202:	4240      	neglt	r0, r0
 8002204:	9003      	str	r0, [sp, #12]
 8002206:	9102      	str	r1, [sp, #8]
 8002208:	9201      	str	r2, [sp, #4]
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	462b      	mov	r3, r5
 800220e:	4622      	mov	r2, r4
 8002210:	4913      	ldr	r1, [pc, #76]	; (8002260 <main+0x190>)
 8002212:	4814      	ldr	r0, [pc, #80]	; (8002264 <main+0x194>)
 8002214:	f002 fb3a 	bl	800488c <siprintf>
		   		HAL_UART_Transmit(&huart2,(uint8_t*)data, strlen(data), 5);
 8002218:	4812      	ldr	r0, [pc, #72]	; (8002264 <main+0x194>)
 800221a:	f7fd ff99 	bl	8000150 <strlen>
 800221e:	4603      	mov	r3, r0
 8002220:	b29a      	uxth	r2, r3
 8002222:	2305      	movs	r3, #5
 8002224:	490f      	ldr	r1, [pc, #60]	; (8002264 <main+0x194>)
 8002226:	4810      	ldr	r0, [pc, #64]	; (8002268 <main+0x198>)
 8002228:	f002 f9b0 	bl	800458c <HAL_UART_Transmit>
	  if (HAL_GetTick()- time_current >= time_example)
 800222c:	e764      	b.n	80020f8 <main+0x28>
 800222e:	bf00      	nop
 8002230:	20000000 	.word	0x20000000
 8002234:	404ca5dc 	.word	0x404ca5dc
 8002238:	200001b0 	.word	0x200001b0
 800223c:	200002d0 	.word	0x200002d0
 8002240:	2000010c 	.word	0x2000010c
 8002244:	20000250 	.word	0x20000250
 8002248:	408f4000 	.word	0x408f4000
 800224c:	20000338 	.word	0x20000338
 8002250:	2000033c 	.word	0x2000033c
 8002254:	20000340 	.word	0x20000340
 8002258:	08006930 	.word	0x08006930
 800225c:	08006934 	.word	0x08006934
 8002260:	08006938 	.word	0x08006938
 8002264:	200002d4 	.word	0x200002d4
 8002268:	20000204 	.word	0x20000204

0800226c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b090      	sub	sp, #64	; 0x40
 8002270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002272:	f107 0318 	add.w	r3, r7, #24
 8002276:	2228      	movs	r2, #40	; 0x28
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f002 fb26 	bl	80048cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	60da      	str	r2, [r3, #12]
 800228c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800228e:	2302      	movs	r3, #2
 8002290:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002292:	2301      	movs	r3, #1
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002296:	2310      	movs	r3, #16
 8002298:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800229a:	2300      	movs	r3, #0
 800229c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800229e:	f107 0318 	add.w	r3, r7, #24
 80022a2:	4618      	mov	r0, r3
 80022a4:	f001 fd12 	bl	8003ccc <HAL_RCC_OscConfig>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80022ae:	f000 f89f 	bl	80023f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022b2:	230f      	movs	r3, #15
 80022b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80022c6:	1d3b      	adds	r3, r7, #4
 80022c8:	2100      	movs	r1, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f001 ff80 	bl	80041d0 <HAL_RCC_ClockConfig>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80022d6:	f000 f88b 	bl	80023f0 <Error_Handler>
  }
}
 80022da:	bf00      	nop
 80022dc:	3740      	adds	r7, #64	; 0x40
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <MX_I2C1_Init+0x50>)
 80022ea:	4a13      	ldr	r2, [pc, #76]	; (8002338 <MX_I2C1_Init+0x54>)
 80022ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80022ee:	4b11      	ldr	r3, [pc, #68]	; (8002334 <MX_I2C1_Init+0x50>)
 80022f0:	4a12      	ldr	r2, [pc, #72]	; (800233c <MX_I2C1_Init+0x58>)
 80022f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <MX_I2C1_Init+0x50>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <MX_I2C1_Init+0x50>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <MX_I2C1_Init+0x50>)
 8002302:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002306:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <MX_I2C1_Init+0x50>)
 800230a:	2200      	movs	r2, #0
 800230c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800230e:	4b09      	ldr	r3, [pc, #36]	; (8002334 <MX_I2C1_Init+0x50>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002314:	4b07      	ldr	r3, [pc, #28]	; (8002334 <MX_I2C1_Init+0x50>)
 8002316:	2200      	movs	r2, #0
 8002318:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <MX_I2C1_Init+0x50>)
 800231c:	2200      	movs	r2, #0
 800231e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002320:	4804      	ldr	r0, [pc, #16]	; (8002334 <MX_I2C1_Init+0x50>)
 8002322:	f000 fc79 	bl	8002c18 <HAL_I2C_Init>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800232c:	f000 f860 	bl	80023f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}
 8002334:	200001b0 	.word	0x200001b0
 8002338:	40005400 	.word	0x40005400
 800233c:	000186a0 	.word	0x000186a0

08002340 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <MX_USART2_UART_Init+0x4c>)
 8002346:	4a12      	ldr	r2, [pc, #72]	; (8002390 <MX_USART2_UART_Init+0x50>)
 8002348:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800234a:	4b10      	ldr	r3, [pc, #64]	; (800238c <MX_USART2_UART_Init+0x4c>)
 800234c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002350:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <MX_USART2_UART_Init+0x4c>)
 8002354:	2200      	movs	r2, #0
 8002356:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002358:	4b0c      	ldr	r3, [pc, #48]	; (800238c <MX_USART2_UART_Init+0x4c>)
 800235a:	2200      	movs	r2, #0
 800235c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800235e:	4b0b      	ldr	r3, [pc, #44]	; (800238c <MX_USART2_UART_Init+0x4c>)
 8002360:	2200      	movs	r2, #0
 8002362:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002364:	4b09      	ldr	r3, [pc, #36]	; (800238c <MX_USART2_UART_Init+0x4c>)
 8002366:	220c      	movs	r2, #12
 8002368:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800236a:	4b08      	ldr	r3, [pc, #32]	; (800238c <MX_USART2_UART_Init+0x4c>)
 800236c:	2200      	movs	r2, #0
 800236e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <MX_USART2_UART_Init+0x4c>)
 8002372:	2200      	movs	r2, #0
 8002374:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002376:	4805      	ldr	r0, [pc, #20]	; (800238c <MX_USART2_UART_Init+0x4c>)
 8002378:	f002 f8b8 	bl	80044ec <HAL_UART_Init>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002382:	f000 f835 	bl	80023f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000204 	.word	0x20000204
 8002390:	40004400 	.word	0x40004400

08002394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800239a:	4b14      	ldr	r3, [pc, #80]	; (80023ec <MX_GPIO_Init+0x58>)
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	4a13      	ldr	r2, [pc, #76]	; (80023ec <MX_GPIO_Init+0x58>)
 80023a0:	f043 0320 	orr.w	r3, r3, #32
 80023a4:	6193      	str	r3, [r2, #24]
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <MX_GPIO_Init+0x58>)
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	f003 0320 	and.w	r3, r3, #32
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <MX_GPIO_Init+0x58>)
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	4a0d      	ldr	r2, [pc, #52]	; (80023ec <MX_GPIO_Init+0x58>)
 80023b8:	f043 0304 	orr.w	r3, r3, #4
 80023bc:	6193      	str	r3, [r2, #24]
 80023be:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <MX_GPIO_Init+0x58>)
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ca:	4b08      	ldr	r3, [pc, #32]	; (80023ec <MX_GPIO_Init+0x58>)
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	4a07      	ldr	r2, [pc, #28]	; (80023ec <MX_GPIO_Init+0x58>)
 80023d0:	f043 0308 	orr.w	r3, r3, #8
 80023d4:	6193      	str	r3, [r2, #24]
 80023d6:	4b05      	ldr	r3, [pc, #20]	; (80023ec <MX_GPIO_Init+0x58>)
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023e2:	bf00      	nop
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	40021000 	.word	0x40021000

080023f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023f4:	b672      	cpsid	i
}
 80023f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023f8:	e7fe      	b.n	80023f8 <Error_Handler+0x8>
	...

080023fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <HAL_MspInit+0x5c>)
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	4a14      	ldr	r2, [pc, #80]	; (8002458 <HAL_MspInit+0x5c>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6193      	str	r3, [r2, #24]
 800240e:	4b12      	ldr	r3, [pc, #72]	; (8002458 <HAL_MspInit+0x5c>)
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800241a:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <HAL_MspInit+0x5c>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <HAL_MspInit+0x5c>)
 8002420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002424:	61d3      	str	r3, [r2, #28]
 8002426:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <HAL_MspInit+0x5c>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002432:	4b0a      	ldr	r3, [pc, #40]	; (800245c <HAL_MspInit+0x60>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	4a04      	ldr	r2, [pc, #16]	; (800245c <HAL_MspInit+0x60>)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800244e:	bf00      	nop
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	40021000 	.word	0x40021000
 800245c:	40010000 	.word	0x40010000

08002460 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 0310 	add.w	r3, r7, #16
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a15      	ldr	r2, [pc, #84]	; (80024d0 <HAL_I2C_MspInit+0x70>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d123      	bne.n	80024c8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002480:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <HAL_I2C_MspInit+0x74>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	4a13      	ldr	r2, [pc, #76]	; (80024d4 <HAL_I2C_MspInit+0x74>)
 8002486:	f043 0308 	orr.w	r3, r3, #8
 800248a:	6193      	str	r3, [r2, #24]
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <HAL_I2C_MspInit+0x74>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002498:	23c0      	movs	r3, #192	; 0xc0
 800249a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800249c:	2312      	movs	r3, #18
 800249e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024a0:	2303      	movs	r3, #3
 80024a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a4:	f107 0310 	add.w	r3, r7, #16
 80024a8:	4619      	mov	r1, r3
 80024aa:	480b      	ldr	r0, [pc, #44]	; (80024d8 <HAL_I2C_MspInit+0x78>)
 80024ac:	f000 fa30 	bl	8002910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024b0:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <HAL_I2C_MspInit+0x74>)
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	4a07      	ldr	r2, [pc, #28]	; (80024d4 <HAL_I2C_MspInit+0x74>)
 80024b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024ba:	61d3      	str	r3, [r2, #28]
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_I2C_MspInit+0x74>)
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024c8:	bf00      	nop
 80024ca:	3720      	adds	r7, #32
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40005400 	.word	0x40005400
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40010c00 	.word	0x40010c00

080024dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	f107 0310 	add.w	r3, r7, #16
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1b      	ldr	r2, [pc, #108]	; (8002564 <HAL_UART_MspInit+0x88>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d12f      	bne.n	800255c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024fc:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <HAL_UART_MspInit+0x8c>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	4a19      	ldr	r2, [pc, #100]	; (8002568 <HAL_UART_MspInit+0x8c>)
 8002502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002506:	61d3      	str	r3, [r2, #28]
 8002508:	4b17      	ldr	r3, [pc, #92]	; (8002568 <HAL_UART_MspInit+0x8c>)
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002514:	4b14      	ldr	r3, [pc, #80]	; (8002568 <HAL_UART_MspInit+0x8c>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	4a13      	ldr	r2, [pc, #76]	; (8002568 <HAL_UART_MspInit+0x8c>)
 800251a:	f043 0304 	orr.w	r3, r3, #4
 800251e:	6193      	str	r3, [r2, #24]
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <HAL_UART_MspInit+0x8c>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800252c:	2304      	movs	r3, #4
 800252e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002530:	2302      	movs	r3, #2
 8002532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002534:	2303      	movs	r3, #3
 8002536:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002538:	f107 0310 	add.w	r3, r7, #16
 800253c:	4619      	mov	r1, r3
 800253e:	480b      	ldr	r0, [pc, #44]	; (800256c <HAL_UART_MspInit+0x90>)
 8002540:	f000 f9e6 	bl	8002910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002544:	2308      	movs	r3, #8
 8002546:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	f107 0310 	add.w	r3, r7, #16
 8002554:	4619      	mov	r1, r3
 8002556:	4805      	ldr	r0, [pc, #20]	; (800256c <HAL_UART_MspInit+0x90>)
 8002558:	f000 f9da 	bl	8002910 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800255c:	bf00      	nop
 800255e:	3720      	adds	r7, #32
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40004400 	.word	0x40004400
 8002568:	40021000 	.word	0x40021000
 800256c:	40010800 	.word	0x40010800

08002570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002574:	e7fe      	b.n	8002574 <NMI_Handler+0x4>

08002576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800257a:	e7fe      	b.n	800257a <HardFault_Handler+0x4>

0800257c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002580:	e7fe      	b.n	8002580 <MemManage_Handler+0x4>

08002582 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002586:	e7fe      	b.n	8002586 <BusFault_Handler+0x4>

08002588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800258c:	e7fe      	b.n	800258c <UsageFault_Handler+0x4>

0800258e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr

0800259a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025a6:	b480      	push	{r7}
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr

080025b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025b6:	f000 f8ab 	bl	8002710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025c8:	4a14      	ldr	r2, [pc, #80]	; (800261c <_sbrk+0x5c>)
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <_sbrk+0x60>)
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025d4:	4b13      	ldr	r3, [pc, #76]	; (8002624 <_sbrk+0x64>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025dc:	4b11      	ldr	r3, [pc, #68]	; (8002624 <_sbrk+0x64>)
 80025de:	4a12      	ldr	r2, [pc, #72]	; (8002628 <_sbrk+0x68>)
 80025e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <_sbrk+0x64>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d207      	bcs.n	8002600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025f0:	f002 f974 	bl	80048dc <__errno>
 80025f4:	4603      	mov	r3, r0
 80025f6:	220c      	movs	r2, #12
 80025f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	e009      	b.n	8002614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <_sbrk+0x64>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002606:	4b07      	ldr	r3, [pc, #28]	; (8002624 <_sbrk+0x64>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4413      	add	r3, r2
 800260e:	4a05      	ldr	r2, [pc, #20]	; (8002624 <_sbrk+0x64>)
 8002610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002612:	68fb      	ldr	r3, [r7, #12]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20005000 	.word	0x20005000
 8002620:	00000400 	.word	0x00000400
 8002624:	20000344 	.word	0x20000344
 8002628:	20000498 	.word	0x20000498

0800262c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002638:	f7ff fff8 	bl	800262c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800263c:	480b      	ldr	r0, [pc, #44]	; (800266c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800263e:	490c      	ldr	r1, [pc, #48]	; (8002670 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002640:	4a0c      	ldr	r2, [pc, #48]	; (8002674 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002644:	e002      	b.n	800264c <LoopCopyDataInit>

08002646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800264a:	3304      	adds	r3, #4

0800264c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800264c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800264e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002650:	d3f9      	bcc.n	8002646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002652:	4a09      	ldr	r2, [pc, #36]	; (8002678 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002654:	4c09      	ldr	r4, [pc, #36]	; (800267c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002658:	e001      	b.n	800265e <LoopFillZerobss>

0800265a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800265a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800265c:	3204      	adds	r2, #4

0800265e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800265e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002660:	d3fb      	bcc.n	800265a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002662:	f002 f941 	bl	80048e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002666:	f7ff fd33 	bl	80020d0 <main>
  bx lr
 800266a:	4770      	bx	lr
  ldr r0, =_sdata
 800266c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002670:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8002674:	08006c00 	.word	0x08006c00
  ldr r2, =_sbss
 8002678:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800267c:	20000494 	.word	0x20000494

08002680 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002680:	e7fe      	b.n	8002680 <ADC1_2_IRQHandler>
	...

08002684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002688:	4b08      	ldr	r3, [pc, #32]	; (80026ac <HAL_Init+0x28>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a07      	ldr	r2, [pc, #28]	; (80026ac <HAL_Init+0x28>)
 800268e:	f043 0310 	orr.w	r3, r3, #16
 8002692:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002694:	2003      	movs	r0, #3
 8002696:	f000 f907 	bl	80028a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800269a:	200f      	movs	r0, #15
 800269c:	f000 f808 	bl	80026b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026a0:	f7ff feac 	bl	80023fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40022000 	.word	0x40022000

080026b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026b8:	4b12      	ldr	r3, [pc, #72]	; (8002704 <HAL_InitTick+0x54>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_InitTick+0x58>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	4619      	mov	r1, r3
 80026c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f911 	bl	80028f6 <HAL_SYSTICK_Config>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e00e      	b.n	80026fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b0f      	cmp	r3, #15
 80026e2:	d80a      	bhi.n	80026fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e4:	2200      	movs	r2, #0
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ec:	f000 f8e7 	bl	80028be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026f0:	4a06      	ldr	r2, [pc, #24]	; (800270c <HAL_InitTick+0x5c>)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	e000      	b.n	80026fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20000110 	.word	0x20000110
 8002708:	20000118 	.word	0x20000118
 800270c:	20000114 	.word	0x20000114

08002710 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <HAL_IncTick+0x1c>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_IncTick+0x20>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4413      	add	r3, r2
 8002720:	4a03      	ldr	r2, [pc, #12]	; (8002730 <HAL_IncTick+0x20>)
 8002722:	6013      	str	r3, [r2, #0]
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	20000118 	.word	0x20000118
 8002730:	20000348 	.word	0x20000348

08002734 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return uwTick;
 8002738:	4b02      	ldr	r3, [pc, #8]	; (8002744 <HAL_GetTick+0x10>)
 800273a:	681b      	ldr	r3, [r3, #0]
}
 800273c:	4618      	mov	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	20000348 	.word	0x20000348

08002748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002758:	4b0c      	ldr	r3, [pc, #48]	; (800278c <__NVIC_SetPriorityGrouping+0x44>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002764:	4013      	ands	r3, r2
 8002766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800277a:	4a04      	ldr	r2, [pc, #16]	; (800278c <__NVIC_SetPriorityGrouping+0x44>)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	60d3      	str	r3, [r2, #12]
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002794:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	0a1b      	lsrs	r3, r3, #8
 800279a:	f003 0307 	and.w	r3, r3, #7
}
 800279e:	4618      	mov	r0, r3
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	6039      	str	r1, [r7, #0]
 80027b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	db0a      	blt.n	80027d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	490c      	ldr	r1, [pc, #48]	; (80027f8 <__NVIC_SetPriority+0x4c>)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	0112      	lsls	r2, r2, #4
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	440b      	add	r3, r1
 80027d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d4:	e00a      	b.n	80027ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	4908      	ldr	r1, [pc, #32]	; (80027fc <__NVIC_SetPriority+0x50>)
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	3b04      	subs	r3, #4
 80027e4:	0112      	lsls	r2, r2, #4
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	440b      	add	r3, r1
 80027ea:	761a      	strb	r2, [r3, #24]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	e000e100 	.word	0xe000e100
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002800:	b480      	push	{r7}
 8002802:	b089      	sub	sp, #36	; 0x24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f1c3 0307 	rsb	r3, r3, #7
 800281a:	2b04      	cmp	r3, #4
 800281c:	bf28      	it	cs
 800281e:	2304      	movcs	r3, #4
 8002820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3304      	adds	r3, #4
 8002826:	2b06      	cmp	r3, #6
 8002828:	d902      	bls.n	8002830 <NVIC_EncodePriority+0x30>
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3b03      	subs	r3, #3
 800282e:	e000      	b.n	8002832 <NVIC_EncodePriority+0x32>
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002834:	f04f 32ff 	mov.w	r2, #4294967295
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43da      	mvns	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	401a      	ands	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002848:	f04f 31ff 	mov.w	r1, #4294967295
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	43d9      	mvns	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002858:	4313      	orrs	r3, r2
         );
}
 800285a:	4618      	mov	r0, r3
 800285c:	3724      	adds	r7, #36	; 0x24
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3b01      	subs	r3, #1
 8002870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002874:	d301      	bcc.n	800287a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002876:	2301      	movs	r3, #1
 8002878:	e00f      	b.n	800289a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <SysTick_Config+0x40>)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002882:	210f      	movs	r1, #15
 8002884:	f04f 30ff 	mov.w	r0, #4294967295
 8002888:	f7ff ff90 	bl	80027ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800288c:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <SysTick_Config+0x40>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002892:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <SysTick_Config+0x40>)
 8002894:	2207      	movs	r2, #7
 8002896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	e000e010 	.word	0xe000e010

080028a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ff49 	bl	8002748 <__NVIC_SetPriorityGrouping>
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	4603      	mov	r3, r0
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d0:	f7ff ff5e 	bl	8002790 <__NVIC_GetPriorityGrouping>
 80028d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	6978      	ldr	r0, [r7, #20]
 80028dc:	f7ff ff90 	bl	8002800 <NVIC_EncodePriority>
 80028e0:	4602      	mov	r2, r0
 80028e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff5f 	bl	80027ac <__NVIC_SetPriority>
}
 80028ee:	bf00      	nop
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ffb0 	bl	8002864 <SysTick_Config>
 8002904:	4603      	mov	r3, r0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002910:	b480      	push	{r7}
 8002912:	b08b      	sub	sp, #44	; 0x2c
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800291a:	2300      	movs	r3, #0
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800291e:	2300      	movs	r3, #0
 8002920:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002922:	e169      	b.n	8002bf8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002924:	2201      	movs	r2, #1
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	429a      	cmp	r2, r3
 800293e:	f040 8158 	bne.w	8002bf2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4a9a      	ldr	r2, [pc, #616]	; (8002bb0 <HAL_GPIO_Init+0x2a0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d05e      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 800294c:	4a98      	ldr	r2, [pc, #608]	; (8002bb0 <HAL_GPIO_Init+0x2a0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d875      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 8002952:	4a98      	ldr	r2, [pc, #608]	; (8002bb4 <HAL_GPIO_Init+0x2a4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d058      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 8002958:	4a96      	ldr	r2, [pc, #600]	; (8002bb4 <HAL_GPIO_Init+0x2a4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d86f      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 800295e:	4a96      	ldr	r2, [pc, #600]	; (8002bb8 <HAL_GPIO_Init+0x2a8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d052      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 8002964:	4a94      	ldr	r2, [pc, #592]	; (8002bb8 <HAL_GPIO_Init+0x2a8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d869      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 800296a:	4a94      	ldr	r2, [pc, #592]	; (8002bbc <HAL_GPIO_Init+0x2ac>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d04c      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 8002970:	4a92      	ldr	r2, [pc, #584]	; (8002bbc <HAL_GPIO_Init+0x2ac>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d863      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 8002976:	4a92      	ldr	r2, [pc, #584]	; (8002bc0 <HAL_GPIO_Init+0x2b0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d046      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 800297c:	4a90      	ldr	r2, [pc, #576]	; (8002bc0 <HAL_GPIO_Init+0x2b0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d85d      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 8002982:	2b12      	cmp	r3, #18
 8002984:	d82a      	bhi.n	80029dc <HAL_GPIO_Init+0xcc>
 8002986:	2b12      	cmp	r3, #18
 8002988:	d859      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 800298a:	a201      	add	r2, pc, #4	; (adr r2, 8002990 <HAL_GPIO_Init+0x80>)
 800298c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002990:	08002a0b 	.word	0x08002a0b
 8002994:	080029e5 	.word	0x080029e5
 8002998:	080029f7 	.word	0x080029f7
 800299c:	08002a39 	.word	0x08002a39
 80029a0:	08002a3f 	.word	0x08002a3f
 80029a4:	08002a3f 	.word	0x08002a3f
 80029a8:	08002a3f 	.word	0x08002a3f
 80029ac:	08002a3f 	.word	0x08002a3f
 80029b0:	08002a3f 	.word	0x08002a3f
 80029b4:	08002a3f 	.word	0x08002a3f
 80029b8:	08002a3f 	.word	0x08002a3f
 80029bc:	08002a3f 	.word	0x08002a3f
 80029c0:	08002a3f 	.word	0x08002a3f
 80029c4:	08002a3f 	.word	0x08002a3f
 80029c8:	08002a3f 	.word	0x08002a3f
 80029cc:	08002a3f 	.word	0x08002a3f
 80029d0:	08002a3f 	.word	0x08002a3f
 80029d4:	080029ed 	.word	0x080029ed
 80029d8:	08002a01 	.word	0x08002a01
 80029dc:	4a79      	ldr	r2, [pc, #484]	; (8002bc4 <HAL_GPIO_Init+0x2b4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d013      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029e2:	e02c      	b.n	8002a3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	623b      	str	r3, [r7, #32]
          break;
 80029ea:	e029      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	3304      	adds	r3, #4
 80029f2:	623b      	str	r3, [r7, #32]
          break;
 80029f4:	e024      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	3308      	adds	r3, #8
 80029fc:	623b      	str	r3, [r7, #32]
          break;
 80029fe:	e01f      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	330c      	adds	r3, #12
 8002a06:	623b      	str	r3, [r7, #32]
          break;
 8002a08:	e01a      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d102      	bne.n	8002a18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a12:	2304      	movs	r3, #4
 8002a14:	623b      	str	r3, [r7, #32]
          break;
 8002a16:	e013      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d105      	bne.n	8002a2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a20:	2308      	movs	r3, #8
 8002a22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	611a      	str	r2, [r3, #16]
          break;
 8002a2a:	e009      	b.n	8002a40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a2c:	2308      	movs	r3, #8
 8002a2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	615a      	str	r2, [r3, #20]
          break;
 8002a36:	e003      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	623b      	str	r3, [r7, #32]
          break;
 8002a3c:	e000      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          break;
 8002a3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	2bff      	cmp	r3, #255	; 0xff
 8002a44:	d801      	bhi.n	8002a4a <HAL_GPIO_Init+0x13a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	e001      	b.n	8002a4e <HAL_GPIO_Init+0x13e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	2bff      	cmp	r3, #255	; 0xff
 8002a54:	d802      	bhi.n	8002a5c <HAL_GPIO_Init+0x14c>
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	e002      	b.n	8002a62 <HAL_GPIO_Init+0x152>
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	3b08      	subs	r3, #8
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	210f      	movs	r1, #15
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	401a      	ands	r2, r3
 8002a74:	6a39      	ldr	r1, [r7, #32]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 80b1 	beq.w	8002bf2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a90:	4b4d      	ldr	r3, [pc, #308]	; (8002bc8 <HAL_GPIO_Init+0x2b8>)
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	4a4c      	ldr	r2, [pc, #304]	; (8002bc8 <HAL_GPIO_Init+0x2b8>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6193      	str	r3, [r2, #24]
 8002a9c:	4b4a      	ldr	r3, [pc, #296]	; (8002bc8 <HAL_GPIO_Init+0x2b8>)
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002aa8:	4a48      	ldr	r2, [pc, #288]	; (8002bcc <HAL_GPIO_Init+0x2bc>)
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	089b      	lsrs	r3, r3, #2
 8002aae:	3302      	adds	r3, #2
 8002ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	220f      	movs	r2, #15
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a40      	ldr	r2, [pc, #256]	; (8002bd0 <HAL_GPIO_Init+0x2c0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d013      	beq.n	8002afc <HAL_GPIO_Init+0x1ec>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a3f      	ldr	r2, [pc, #252]	; (8002bd4 <HAL_GPIO_Init+0x2c4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d00d      	beq.n	8002af8 <HAL_GPIO_Init+0x1e8>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a3e      	ldr	r2, [pc, #248]	; (8002bd8 <HAL_GPIO_Init+0x2c8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d007      	beq.n	8002af4 <HAL_GPIO_Init+0x1e4>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a3d      	ldr	r2, [pc, #244]	; (8002bdc <HAL_GPIO_Init+0x2cc>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d101      	bne.n	8002af0 <HAL_GPIO_Init+0x1e0>
 8002aec:	2303      	movs	r3, #3
 8002aee:	e006      	b.n	8002afe <HAL_GPIO_Init+0x1ee>
 8002af0:	2304      	movs	r3, #4
 8002af2:	e004      	b.n	8002afe <HAL_GPIO_Init+0x1ee>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e002      	b.n	8002afe <HAL_GPIO_Init+0x1ee>
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <HAL_GPIO_Init+0x1ee>
 8002afc:	2300      	movs	r3, #0
 8002afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b00:	f002 0203 	and.w	r2, r2, #3
 8002b04:	0092      	lsls	r2, r2, #2
 8002b06:	4093      	lsls	r3, r2
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b0e:	492f      	ldr	r1, [pc, #188]	; (8002bcc <HAL_GPIO_Init+0x2bc>)
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	089b      	lsrs	r3, r3, #2
 8002b14:	3302      	adds	r3, #2
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d006      	beq.n	8002b36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b28:	4b2d      	ldr	r3, [pc, #180]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	492c      	ldr	r1, [pc, #176]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	608b      	str	r3, [r1, #8]
 8002b34:	e006      	b.n	8002b44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b36:	4b2a      	ldr	r3, [pc, #168]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	4928      	ldr	r1, [pc, #160]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d006      	beq.n	8002b5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b50:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	4922      	ldr	r1, [pc, #136]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60cb      	str	r3, [r1, #12]
 8002b5c:	e006      	b.n	8002b6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b5e:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	491e      	ldr	r1, [pc, #120]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d006      	beq.n	8002b86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b78:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	4918      	ldr	r1, [pc, #96]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	604b      	str	r3, [r1, #4]
 8002b84:	e006      	b.n	8002b94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b86:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	4914      	ldr	r1, [pc, #80]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d021      	beq.n	8002be4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	490e      	ldr	r1, [pc, #56]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]
 8002bac:	e021      	b.n	8002bf2 <HAL_GPIO_Init+0x2e2>
 8002bae:	bf00      	nop
 8002bb0:	10320000 	.word	0x10320000
 8002bb4:	10310000 	.word	0x10310000
 8002bb8:	10220000 	.word	0x10220000
 8002bbc:	10210000 	.word	0x10210000
 8002bc0:	10120000 	.word	0x10120000
 8002bc4:	10110000 	.word	0x10110000
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40010000 	.word	0x40010000
 8002bd0:	40010800 	.word	0x40010800
 8002bd4:	40010c00 	.word	0x40010c00
 8002bd8:	40011000 	.word	0x40011000
 8002bdc:	40011400 	.word	0x40011400
 8002be0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_GPIO_Init+0x304>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	43db      	mvns	r3, r3
 8002bec:	4909      	ldr	r1, [pc, #36]	; (8002c14 <HAL_GPIO_Init+0x304>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f47f ae8e 	bne.w	8002924 <HAL_GPIO_Init+0x14>
  }
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	372c      	adds	r7, #44	; 0x2c
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	40010400 	.word	0x40010400

08002c18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e12b      	b.n	8002e82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff fc0e 	bl	8002460 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2224      	movs	r2, #36	; 0x24
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0201 	bic.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c7c:	f001 fbf0 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 8002c80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4a81      	ldr	r2, [pc, #516]	; (8002e8c <HAL_I2C_Init+0x274>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d807      	bhi.n	8002c9c <HAL_I2C_Init+0x84>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4a80      	ldr	r2, [pc, #512]	; (8002e90 <HAL_I2C_Init+0x278>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	bf94      	ite	ls
 8002c94:	2301      	movls	r3, #1
 8002c96:	2300      	movhi	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e006      	b.n	8002caa <HAL_I2C_Init+0x92>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4a7d      	ldr	r2, [pc, #500]	; (8002e94 <HAL_I2C_Init+0x27c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	bf94      	ite	ls
 8002ca4:	2301      	movls	r3, #1
 8002ca6:	2300      	movhi	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e0e7      	b.n	8002e82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4a78      	ldr	r2, [pc, #480]	; (8002e98 <HAL_I2C_Init+0x280>)
 8002cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cba:	0c9b      	lsrs	r3, r3, #18
 8002cbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4a6a      	ldr	r2, [pc, #424]	; (8002e8c <HAL_I2C_Init+0x274>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d802      	bhi.n	8002cec <HAL_I2C_Init+0xd4>
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	e009      	b.n	8002d00 <HAL_I2C_Init+0xe8>
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cf2:	fb02 f303 	mul.w	r3, r2, r3
 8002cf6:	4a69      	ldr	r2, [pc, #420]	; (8002e9c <HAL_I2C_Init+0x284>)
 8002cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfc:	099b      	lsrs	r3, r3, #6
 8002cfe:	3301      	adds	r3, #1
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	430b      	orrs	r3, r1
 8002d06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	495c      	ldr	r1, [pc, #368]	; (8002e8c <HAL_I2C_Init+0x274>)
 8002d1c:	428b      	cmp	r3, r1
 8002d1e:	d819      	bhi.n	8002d54 <HAL_I2C_Init+0x13c>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1e59      	subs	r1, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d2e:	1c59      	adds	r1, r3, #1
 8002d30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d34:	400b      	ands	r3, r1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <HAL_I2C_Init+0x138>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1e59      	subs	r1, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d48:	3301      	adds	r3, #1
 8002d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4e:	e051      	b.n	8002df4 <HAL_I2C_Init+0x1dc>
 8002d50:	2304      	movs	r3, #4
 8002d52:	e04f      	b.n	8002df4 <HAL_I2C_Init+0x1dc>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d111      	bne.n	8002d80 <HAL_I2C_Init+0x168>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1e58      	subs	r0, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6859      	ldr	r1, [r3, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	440b      	add	r3, r1
 8002d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bf0c      	ite	eq
 8002d78:	2301      	moveq	r3, #1
 8002d7a:	2300      	movne	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	e012      	b.n	8002da6 <HAL_I2C_Init+0x18e>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	1e58      	subs	r0, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6859      	ldr	r1, [r3, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	0099      	lsls	r1, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d96:	3301      	adds	r3, #1
 8002d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	bf0c      	ite	eq
 8002da0:	2301      	moveq	r3, #1
 8002da2:	2300      	movne	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_I2C_Init+0x196>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e022      	b.n	8002df4 <HAL_I2C_Init+0x1dc>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10e      	bne.n	8002dd4 <HAL_I2C_Init+0x1bc>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1e58      	subs	r0, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6859      	ldr	r1, [r3, #4]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	440b      	add	r3, r1
 8002dc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc8:	3301      	adds	r3, #1
 8002dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd2:	e00f      	b.n	8002df4 <HAL_I2C_Init+0x1dc>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	1e58      	subs	r0, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6859      	ldr	r1, [r3, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	0099      	lsls	r1, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dea:	3301      	adds	r3, #1
 8002dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	6809      	ldr	r1, [r1, #0]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69da      	ldr	r2, [r3, #28]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6911      	ldr	r1, [r2, #16]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68d2      	ldr	r2, [r2, #12]
 8002e2e:	4311      	orrs	r1, r2
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	430b      	orrs	r3, r1
 8002e36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	000186a0 	.word	0x000186a0
 8002e90:	001e847f 	.word	0x001e847f
 8002e94:	003d08ff 	.word	0x003d08ff
 8002e98:	431bde83 	.word	0x431bde83
 8002e9c:	10624dd3 	.word	0x10624dd3

08002ea0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b088      	sub	sp, #32
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	4608      	mov	r0, r1
 8002eaa:	4611      	mov	r1, r2
 8002eac:	461a      	mov	r2, r3
 8002eae:	4603      	mov	r3, r0
 8002eb0:	817b      	strh	r3, [r7, #10]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	813b      	strh	r3, [r7, #8]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eba:	f7ff fc3b 	bl	8002734 <HAL_GetTick>
 8002ebe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b20      	cmp	r3, #32
 8002eca:	f040 80d9 	bne.w	8003080 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	2319      	movs	r3, #25
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	496d      	ldr	r1, [pc, #436]	; (800308c <HAL_I2C_Mem_Write+0x1ec>)
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 fcc1 	bl	8003860 <I2C_WaitOnFlagUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e0cc      	b.n	8003082 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_I2C_Mem_Write+0x56>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e0c5      	b.n	8003082 <HAL_I2C_Mem_Write+0x1e2>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d007      	beq.n	8002f1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0201 	orr.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2221      	movs	r2, #33	; 0x21
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2240      	movs	r2, #64	; 0x40
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a3a      	ldr	r2, [r7, #32]
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4a4d      	ldr	r2, [pc, #308]	; (8003090 <HAL_I2C_Mem_Write+0x1f0>)
 8002f5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f5e:	88f8      	ldrh	r0, [r7, #6]
 8002f60:	893a      	ldrh	r2, [r7, #8]
 8002f62:	8979      	ldrh	r1, [r7, #10]
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	9301      	str	r3, [sp, #4]
 8002f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 faf8 	bl	8003564 <I2C_RequestMemoryWrite>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d052      	beq.n	8003020 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e081      	b.n	8003082 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fd86 	bl	8003a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00d      	beq.n	8002faa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d107      	bne.n	8002fa6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e06b      	b.n	8003082 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d11b      	bne.n	8003020 <HAL_I2C_Mem_Write+0x180>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d017      	beq.n	8003020 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	781a      	ldrb	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300a:	3b01      	subs	r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1aa      	bne.n	8002f7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 fd79 	bl	8003b24 <I2C_WaitOnBTFFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00d      	beq.n	8003054 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	2b04      	cmp	r3, #4
 800303e:	d107      	bne.n	8003050 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e016      	b.n	8003082 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	e000      	b.n	8003082 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003080:	2302      	movs	r3, #2
  }
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	00100002 	.word	0x00100002
 8003090:	ffff0000 	.word	0xffff0000

08003094 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08c      	sub	sp, #48	; 0x30
 8003098:	af02      	add	r7, sp, #8
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	4608      	mov	r0, r1
 800309e:	4611      	mov	r1, r2
 80030a0:	461a      	mov	r2, r3
 80030a2:	4603      	mov	r3, r0
 80030a4:	817b      	strh	r3, [r7, #10]
 80030a6:	460b      	mov	r3, r1
 80030a8:	813b      	strh	r3, [r7, #8]
 80030aa:	4613      	mov	r3, r2
 80030ac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030b2:	f7ff fb3f 	bl	8002734 <HAL_GetTick>
 80030b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	f040 8244 	bne.w	800354e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	2319      	movs	r3, #25
 80030cc:	2201      	movs	r2, #1
 80030ce:	4982      	ldr	r1, [pc, #520]	; (80032d8 <HAL_I2C_Mem_Read+0x244>)
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 fbc5 	bl	8003860 <I2C_WaitOnFlagUntilTimeout>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80030dc:	2302      	movs	r3, #2
 80030de:	e237      	b.n	8003550 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_I2C_Mem_Read+0x5a>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e230      	b.n	8003550 <HAL_I2C_Mem_Read+0x4bc>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b01      	cmp	r3, #1
 8003102:	d007      	beq.n	8003114 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003122:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2222      	movs	r2, #34	; 0x22
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2240      	movs	r2, #64	; 0x40
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800313e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003144:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4a62      	ldr	r2, [pc, #392]	; (80032dc <HAL_I2C_Mem_Read+0x248>)
 8003154:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003156:	88f8      	ldrh	r0, [r7, #6]
 8003158:	893a      	ldrh	r2, [r7, #8]
 800315a:	8979      	ldrh	r1, [r7, #10]
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	9301      	str	r3, [sp, #4]
 8003160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	4603      	mov	r3, r0
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fa92 	bl	8003690 <I2C_RequestMemoryRead>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e1ec      	b.n	8003550 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317a:	2b00      	cmp	r3, #0
 800317c:	d113      	bne.n	80031a6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	61fb      	str	r3, [r7, #28]
 8003192:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	e1c0      	b.n	8003528 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d11e      	bne.n	80031ec <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031be:	b672      	cpsid	i
}
 80031c0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c2:	2300      	movs	r3, #0
 80031c4:	61bb      	str	r3, [r7, #24]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	61bb      	str	r3, [r7, #24]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	61bb      	str	r3, [r7, #24]
 80031d6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80031e8:	b662      	cpsie	i
}
 80031ea:	e035      	b.n	8003258 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d11e      	bne.n	8003232 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003202:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003204:	b672      	cpsid	i
}
 8003206:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800322c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800322e:	b662      	cpsie	i
}
 8003230:	e012      	b.n	8003258 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003240:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003242:	2300      	movs	r3, #0
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	613b      	str	r3, [r7, #16]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003258:	e166      	b.n	8003528 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325e:	2b03      	cmp	r3, #3
 8003260:	f200 811f 	bhi.w	80034a2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003268:	2b01      	cmp	r3, #1
 800326a:	d123      	bne.n	80032b4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800326c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fc9f 	bl	8003bb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e167      	b.n	8003550 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032b2:	e139      	b.n	8003528 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d152      	bne.n	8003362 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c2:	2200      	movs	r2, #0
 80032c4:	4906      	ldr	r1, [pc, #24]	; (80032e0 <HAL_I2C_Mem_Read+0x24c>)
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 faca 	bl	8003860 <I2C_WaitOnFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d008      	beq.n	80032e4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e13c      	b.n	8003550 <HAL_I2C_Mem_Read+0x4bc>
 80032d6:	bf00      	nop
 80032d8:	00100002 	.word	0x00100002
 80032dc:	ffff0000 	.word	0xffff0000
 80032e0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80032e4:	b672      	cpsid	i
}
 80032e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691a      	ldr	r2, [r3, #16]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	3b01      	subs	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800332a:	b662      	cpsie	i
}
 800332c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003360:	e0e2      	b.n	8003528 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003368:	2200      	movs	r2, #0
 800336a:	497b      	ldr	r1, [pc, #492]	; (8003558 <HAL_I2C_Mem_Read+0x4c4>)
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 fa77 	bl	8003860 <I2C_WaitOnFlagUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e0e9      	b.n	8003550 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800338a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800338c:	b672      	cpsid	i
}
 800338e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	3b01      	subs	r3, #1
 80033bc:	b29a      	uxth	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033c2:	4b66      	ldr	r3, [pc, #408]	; (800355c <HAL_I2C_Mem_Read+0x4c8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	08db      	lsrs	r3, r3, #3
 80033c8:	4a65      	ldr	r2, [pc, #404]	; (8003560 <HAL_I2C_Mem_Read+0x4cc>)
 80033ca:	fba2 2303 	umull	r2, r3, r2, r3
 80033ce:	0a1a      	lsrs	r2, r3, #8
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	00da      	lsls	r2, r3, #3
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	3b01      	subs	r3, #1
 80033e0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d118      	bne.n	800341a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f043 0220 	orr.w	r2, r3, #32
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800340a:	b662      	cpsie	i
}
 800340c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e09a      	b.n	8003550 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b04      	cmp	r3, #4
 8003426:	d1d9      	bne.n	80033dc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003436:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	691a      	ldr	r2, [r3, #16]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003460:	b29b      	uxth	r3, r3
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800346a:	b662      	cpsie	i
}
 800346c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034a0:	e042      	b.n	8003528 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 fb84 	bl	8003bb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e04c      	b.n	8003550 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d118      	bne.n	8003528 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003512:	3b01      	subs	r3, #1
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352c:	2b00      	cmp	r3, #0
 800352e:	f47f ae94 	bne.w	800325a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	e000      	b.n	8003550 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800354e:	2302      	movs	r3, #2
  }
}
 8003550:	4618      	mov	r0, r3
 8003552:	3728      	adds	r7, #40	; 0x28
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	00010004 	.word	0x00010004
 800355c:	20000110 	.word	0x20000110
 8003560:	14f8b589 	.word	0x14f8b589

08003564 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af02      	add	r7, sp, #8
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	4608      	mov	r0, r1
 800356e:	4611      	mov	r1, r2
 8003570:	461a      	mov	r2, r3
 8003572:	4603      	mov	r3, r0
 8003574:	817b      	strh	r3, [r7, #10]
 8003576:	460b      	mov	r3, r1
 8003578:	813b      	strh	r3, [r7, #8]
 800357a:	4613      	mov	r3, r2
 800357c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800358c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	2200      	movs	r2, #0
 8003596:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f960 	bl	8003860 <I2C_WaitOnFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00d      	beq.n	80035c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b4:	d103      	bne.n	80035be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e05f      	b.n	8003682 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035c2:	897b      	ldrh	r3, [r7, #10]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	461a      	mov	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	6a3a      	ldr	r2, [r7, #32]
 80035d6:	492d      	ldr	r1, [pc, #180]	; (800368c <I2C_RequestMemoryWrite+0x128>)
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 f9bb 	bl	8003954 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e04c      	b.n	8003682 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003600:	6a39      	ldr	r1, [r7, #32]
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 fa46 	bl	8003a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00d      	beq.n	800362a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	2b04      	cmp	r3, #4
 8003614:	d107      	bne.n	8003626 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003624:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e02b      	b.n	8003682 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d105      	bne.n	800363c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003630:	893b      	ldrh	r3, [r7, #8]
 8003632:	b2da      	uxtb	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	611a      	str	r2, [r3, #16]
 800363a:	e021      	b.n	8003680 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800363c:	893b      	ldrh	r3, [r7, #8]
 800363e:	0a1b      	lsrs	r3, r3, #8
 8003640:	b29b      	uxth	r3, r3
 8003642:	b2da      	uxtb	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800364a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364c:	6a39      	ldr	r1, [r7, #32]
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 fa20 	bl	8003a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00d      	beq.n	8003676 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	2b04      	cmp	r3, #4
 8003660:	d107      	bne.n	8003672 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003670:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e005      	b.n	8003682 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003676:	893b      	ldrh	r3, [r7, #8]
 8003678:	b2da      	uxtb	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	00010002 	.word	0x00010002

08003690 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	4608      	mov	r0, r1
 800369a:	4611      	mov	r1, r2
 800369c:	461a      	mov	r2, r3
 800369e:	4603      	mov	r3, r0
 80036a0:	817b      	strh	r3, [r7, #10]
 80036a2:	460b      	mov	r3, r1
 80036a4:	813b      	strh	r3, [r7, #8]
 80036a6:	4613      	mov	r3, r2
 80036a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f8c2 	bl	8003860 <I2C_WaitOnFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00d      	beq.n	80036fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036f0:	d103      	bne.n	80036fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e0aa      	b.n	8003854 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036fe:	897b      	ldrh	r3, [r7, #10]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800370c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	6a3a      	ldr	r2, [r7, #32]
 8003712:	4952      	ldr	r1, [pc, #328]	; (800385c <I2C_RequestMemoryRead+0x1cc>)
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 f91d 	bl	8003954 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e097      	b.n	8003854 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003724:	2300      	movs	r3, #0
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800373a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373c:	6a39      	ldr	r1, [r7, #32]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f9a8 	bl	8003a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00d      	beq.n	8003766 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	2b04      	cmp	r3, #4
 8003750:	d107      	bne.n	8003762 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003760:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e076      	b.n	8003854 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d105      	bne.n	8003778 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800376c:	893b      	ldrh	r3, [r7, #8]
 800376e:	b2da      	uxtb	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	611a      	str	r2, [r3, #16]
 8003776:	e021      	b.n	80037bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003778:	893b      	ldrh	r3, [r7, #8]
 800377a:	0a1b      	lsrs	r3, r3, #8
 800377c:	b29b      	uxth	r3, r3
 800377e:	b2da      	uxtb	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003788:	6a39      	ldr	r1, [r7, #32]
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 f982 	bl	8003a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00d      	beq.n	80037b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	2b04      	cmp	r3, #4
 800379c:	d107      	bne.n	80037ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e050      	b.n	8003854 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037b2:	893b      	ldrh	r3, [r7, #8]
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037be:	6a39      	ldr	r1, [r7, #32]
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 f967 	bl	8003a94 <I2C_WaitOnTXEFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00d      	beq.n	80037e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d107      	bne.n	80037e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e035      	b.n	8003854 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	2200      	movs	r2, #0
 8003800:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f82b 	bl	8003860 <I2C_WaitOnFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00d      	beq.n	800382c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800381e:	d103      	bne.n	8003828 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003826:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e013      	b.n	8003854 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800382c:	897b      	ldrh	r3, [r7, #10]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	b2da      	uxtb	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	6a3a      	ldr	r2, [r7, #32]
 8003840:	4906      	ldr	r1, [pc, #24]	; (800385c <I2C_RequestMemoryRead+0x1cc>)
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f886 	bl	8003954 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	00010002 	.word	0x00010002

08003860 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003870:	e048      	b.n	8003904 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003878:	d044      	beq.n	8003904 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800387a:	f7fe ff5b 	bl	8002734 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d302      	bcc.n	8003890 <I2C_WaitOnFlagUntilTimeout+0x30>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d139      	bne.n	8003904 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	0c1b      	lsrs	r3, r3, #16
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b01      	cmp	r3, #1
 8003898:	d10d      	bne.n	80038b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	43da      	mvns	r2, r3
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	4013      	ands	r3, r2
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	bf0c      	ite	eq
 80038ac:	2301      	moveq	r3, #1
 80038ae:	2300      	movne	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	e00c      	b.n	80038d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	43da      	mvns	r2, r3
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	4013      	ands	r3, r2
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	461a      	mov	r2, r3
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d116      	bne.n	8003904 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	f043 0220 	orr.w	r2, r3, #32
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e023      	b.n	800394c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	0c1b      	lsrs	r3, r3, #16
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b01      	cmp	r3, #1
 800390c:	d10d      	bne.n	800392a <I2C_WaitOnFlagUntilTimeout+0xca>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	43da      	mvns	r2, r3
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	4013      	ands	r3, r2
 800391a:	b29b      	uxth	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	bf0c      	ite	eq
 8003920:	2301      	moveq	r3, #1
 8003922:	2300      	movne	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	461a      	mov	r2, r3
 8003928:	e00c      	b.n	8003944 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	43da      	mvns	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	4013      	ands	r3, r2
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	bf0c      	ite	eq
 800393c:	2301      	moveq	r3, #1
 800393e:	2300      	movne	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	461a      	mov	r2, r3
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	429a      	cmp	r2, r3
 8003948:	d093      	beq.n	8003872 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003962:	e071      	b.n	8003a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800396e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003972:	d123      	bne.n	80039bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003982:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800398c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	f043 0204 	orr.w	r2, r3, #4
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e067      	b.n	8003a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c2:	d041      	beq.n	8003a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c4:	f7fe feb6 	bl	8002734 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d302      	bcc.n	80039da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d136      	bne.n	8003a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	0c1b      	lsrs	r3, r3, #16
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d10c      	bne.n	80039fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	43da      	mvns	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4013      	ands	r3, r2
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	bf14      	ite	ne
 80039f6:	2301      	movne	r3, #1
 80039f8:	2300      	moveq	r3, #0
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	e00b      	b.n	8003a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	43da      	mvns	r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	bf14      	ite	ne
 8003a10:	2301      	movne	r3, #1
 8003a12:	2300      	moveq	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d016      	beq.n	8003a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	f043 0220 	orr.w	r2, r3, #32
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e021      	b.n	8003a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	0c1b      	lsrs	r3, r3, #16
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d10c      	bne.n	8003a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	43da      	mvns	r2, r3
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	bf14      	ite	ne
 8003a64:	2301      	movne	r3, #1
 8003a66:	2300      	moveq	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	e00b      	b.n	8003a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	43da      	mvns	r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4013      	ands	r3, r2
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	bf14      	ite	ne
 8003a7e:	2301      	movne	r3, #1
 8003a80:	2300      	moveq	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f47f af6d 	bne.w	8003964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003aa0:	e034      	b.n	8003b0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 f8e3 	bl	8003c6e <I2C_IsAcknowledgeFailed>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e034      	b.n	8003b1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab8:	d028      	beq.n	8003b0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aba:	f7fe fe3b 	bl	8002734 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d302      	bcc.n	8003ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d11d      	bne.n	8003b0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ada:	2b80      	cmp	r3, #128	; 0x80
 8003adc:	d016      	beq.n	8003b0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	f043 0220 	orr.w	r2, r3, #32
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e007      	b.n	8003b1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b16:	2b80      	cmp	r3, #128	; 0x80
 8003b18:	d1c3      	bne.n	8003aa2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b30:	e034      	b.n	8003b9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 f89b 	bl	8003c6e <I2C_IsAcknowledgeFailed>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e034      	b.n	8003bac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b48:	d028      	beq.n	8003b9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b4a:	f7fe fdf3 	bl	8002734 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d302      	bcc.n	8003b60 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d11d      	bne.n	8003b9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d016      	beq.n	8003b9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	f043 0220 	orr.w	r2, r3, #32
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e007      	b.n	8003bac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d1c3      	bne.n	8003b32 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bc0:	e049      	b.n	8003c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b10      	cmp	r3, #16
 8003bce:	d119      	bne.n	8003c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0210 	mvn.w	r2, #16
 8003bd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e030      	b.n	8003c66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c04:	f7fe fd96 	bl	8002734 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d302      	bcc.n	8003c1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d11d      	bne.n	8003c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c24:	2b40      	cmp	r3, #64	; 0x40
 8003c26:	d016      	beq.n	8003c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f043 0220 	orr.w	r2, r3, #32
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e007      	b.n	8003c66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c60:	2b40      	cmp	r3, #64	; 0x40
 8003c62:	d1ae      	bne.n	8003bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c84:	d11b      	bne.n	8003cbe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c8e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f043 0204 	orr.w	r2, r3, #4
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr
	...

08003ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e272      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 8087 	beq.w	8003dfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cec:	4b92      	ldr	r3, [pc, #584]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 030c 	and.w	r3, r3, #12
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d00c      	beq.n	8003d12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cf8:	4b8f      	ldr	r3, [pc, #572]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 030c 	and.w	r3, r3, #12
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d112      	bne.n	8003d2a <HAL_RCC_OscConfig+0x5e>
 8003d04:	4b8c      	ldr	r3, [pc, #560]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d10:	d10b      	bne.n	8003d2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d12:	4b89      	ldr	r3, [pc, #548]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d06c      	beq.n	8003df8 <HAL_RCC_OscConfig+0x12c>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d168      	bne.n	8003df8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e24c      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d32:	d106      	bne.n	8003d42 <HAL_RCC_OscConfig+0x76>
 8003d34:	4b80      	ldr	r3, [pc, #512]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a7f      	ldr	r2, [pc, #508]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	e02e      	b.n	8003da0 <HAL_RCC_OscConfig+0xd4>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10c      	bne.n	8003d64 <HAL_RCC_OscConfig+0x98>
 8003d4a:	4b7b      	ldr	r3, [pc, #492]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a7a      	ldr	r2, [pc, #488]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	4b78      	ldr	r3, [pc, #480]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a77      	ldr	r2, [pc, #476]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	e01d      	b.n	8003da0 <HAL_RCC_OscConfig+0xd4>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCC_OscConfig+0xbc>
 8003d6e:	4b72      	ldr	r3, [pc, #456]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a71      	ldr	r2, [pc, #452]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	4b6f      	ldr	r3, [pc, #444]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a6e      	ldr	r2, [pc, #440]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	e00b      	b.n	8003da0 <HAL_RCC_OscConfig+0xd4>
 8003d88:	4b6b      	ldr	r3, [pc, #428]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a6a      	ldr	r2, [pc, #424]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	4b68      	ldr	r3, [pc, #416]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a67      	ldr	r2, [pc, #412]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d013      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da8:	f7fe fcc4 	bl	8002734 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db0:	f7fe fcc0 	bl	8002734 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b64      	cmp	r3, #100	; 0x64
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e200      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc2:	4b5d      	ldr	r3, [pc, #372]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0xe4>
 8003dce:	e014      	b.n	8003dfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fe fcb0 	bl	8002734 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd8:	f7fe fcac 	bl	8002734 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b64      	cmp	r3, #100	; 0x64
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e1ec      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dea:	4b53      	ldr	r3, [pc, #332]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x10c>
 8003df6:	e000      	b.n	8003dfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d063      	beq.n	8003ece <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e06:	4b4c      	ldr	r3, [pc, #304]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00b      	beq.n	8003e2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e12:	4b49      	ldr	r3, [pc, #292]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d11c      	bne.n	8003e58 <HAL_RCC_OscConfig+0x18c>
 8003e1e:	4b46      	ldr	r3, [pc, #280]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d116      	bne.n	8003e58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2a:	4b43      	ldr	r3, [pc, #268]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d005      	beq.n	8003e42 <HAL_RCC_OscConfig+0x176>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d001      	beq.n	8003e42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e1c0      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e42:	4b3d      	ldr	r3, [pc, #244]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	4939      	ldr	r1, [pc, #228]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e56:	e03a      	b.n	8003ece <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d020      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e60:	4b36      	ldr	r3, [pc, #216]	; (8003f3c <HAL_RCC_OscConfig+0x270>)
 8003e62:	2201      	movs	r2, #1
 8003e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e66:	f7fe fc65 	bl	8002734 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e6e:	f7fe fc61 	bl	8002734 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e1a1      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e80:	4b2d      	ldr	r3, [pc, #180]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8c:	4b2a      	ldr	r3, [pc, #168]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	4927      	ldr	r1, [pc, #156]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	600b      	str	r3, [r1, #0]
 8003ea0:	e015      	b.n	8003ece <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ea2:	4b26      	ldr	r3, [pc, #152]	; (8003f3c <HAL_RCC_OscConfig+0x270>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea8:	f7fe fc44 	bl	8002734 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb0:	f7fe fc40 	bl	8002734 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e180      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec2:	4b1d      	ldr	r3, [pc, #116]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d03a      	beq.n	8003f50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d019      	beq.n	8003f16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ee2:	4b17      	ldr	r3, [pc, #92]	; (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee8:	f7fe fc24 	bl	8002734 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ef0:	f7fe fc20 	bl	8002734 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e160      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f02:	4b0d      	ldr	r3, [pc, #52]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0f0      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f0e:	2001      	movs	r0, #1
 8003f10:	f000 face 	bl	80044b0 <RCC_Delay>
 8003f14:	e01c      	b.n	8003f50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f16:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f1c:	f7fe fc0a 	bl	8002734 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f22:	e00f      	b.n	8003f44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f24:	f7fe fc06 	bl	8002734 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d908      	bls.n	8003f44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e146      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
 8003f36:	bf00      	nop
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	42420000 	.word	0x42420000
 8003f40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f44:	4b92      	ldr	r3, [pc, #584]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1e9      	bne.n	8003f24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 80a6 	beq.w	80040aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f62:	4b8b      	ldr	r3, [pc, #556]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10d      	bne.n	8003f8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f6e:	4b88      	ldr	r3, [pc, #544]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	4a87      	ldr	r2, [pc, #540]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8003f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f78:	61d3      	str	r3, [r2, #28]
 8003f7a:	4b85      	ldr	r3, [pc, #532]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f82:	60bb      	str	r3, [r7, #8]
 8003f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f86:	2301      	movs	r3, #1
 8003f88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f8a:	4b82      	ldr	r3, [pc, #520]	; (8004194 <HAL_RCC_OscConfig+0x4c8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d118      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f96:	4b7f      	ldr	r3, [pc, #508]	; (8004194 <HAL_RCC_OscConfig+0x4c8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a7e      	ldr	r2, [pc, #504]	; (8004194 <HAL_RCC_OscConfig+0x4c8>)
 8003f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fa2:	f7fe fbc7 	bl	8002734 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003faa:	f7fe fbc3 	bl	8002734 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b64      	cmp	r3, #100	; 0x64
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e103      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbc:	4b75      	ldr	r3, [pc, #468]	; (8004194 <HAL_RCC_OscConfig+0x4c8>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d106      	bne.n	8003fde <HAL_RCC_OscConfig+0x312>
 8003fd0:	4b6f      	ldr	r3, [pc, #444]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	4a6e      	ldr	r2, [pc, #440]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8003fd6:	f043 0301 	orr.w	r3, r3, #1
 8003fda:	6213      	str	r3, [r2, #32]
 8003fdc:	e02d      	b.n	800403a <HAL_RCC_OscConfig+0x36e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCC_OscConfig+0x334>
 8003fe6:	4b6a      	ldr	r3, [pc, #424]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	4a69      	ldr	r2, [pc, #420]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8003fec:	f023 0301 	bic.w	r3, r3, #1
 8003ff0:	6213      	str	r3, [r2, #32]
 8003ff2:	4b67      	ldr	r3, [pc, #412]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	4a66      	ldr	r2, [pc, #408]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8003ff8:	f023 0304 	bic.w	r3, r3, #4
 8003ffc:	6213      	str	r3, [r2, #32]
 8003ffe:	e01c      	b.n	800403a <HAL_RCC_OscConfig+0x36e>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	2b05      	cmp	r3, #5
 8004006:	d10c      	bne.n	8004022 <HAL_RCC_OscConfig+0x356>
 8004008:	4b61      	ldr	r3, [pc, #388]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	4a60      	ldr	r2, [pc, #384]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 800400e:	f043 0304 	orr.w	r3, r3, #4
 8004012:	6213      	str	r3, [r2, #32]
 8004014:	4b5e      	ldr	r3, [pc, #376]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	4a5d      	ldr	r2, [pc, #372]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	6213      	str	r3, [r2, #32]
 8004020:	e00b      	b.n	800403a <HAL_RCC_OscConfig+0x36e>
 8004022:	4b5b      	ldr	r3, [pc, #364]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	4a5a      	ldr	r2, [pc, #360]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	6213      	str	r3, [r2, #32]
 800402e:	4b58      	ldr	r3, [pc, #352]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	4a57      	ldr	r2, [pc, #348]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8004034:	f023 0304 	bic.w	r3, r3, #4
 8004038:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d015      	beq.n	800406e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004042:	f7fe fb77 	bl	8002734 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004048:	e00a      	b.n	8004060 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f7fe fb73 	bl	8002734 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	f241 3288 	movw	r2, #5000	; 0x1388
 8004058:	4293      	cmp	r3, r2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e0b1      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004060:	4b4b      	ldr	r3, [pc, #300]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0ee      	beq.n	800404a <HAL_RCC_OscConfig+0x37e>
 800406c:	e014      	b.n	8004098 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800406e:	f7fe fb61 	bl	8002734 <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004074:	e00a      	b.n	800408c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004076:	f7fe fb5d 	bl	8002734 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	f241 3288 	movw	r2, #5000	; 0x1388
 8004084:	4293      	cmp	r3, r2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e09b      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800408c:	4b40      	ldr	r3, [pc, #256]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1ee      	bne.n	8004076 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004098:	7dfb      	ldrb	r3, [r7, #23]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d105      	bne.n	80040aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800409e:	4b3c      	ldr	r3, [pc, #240]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	4a3b      	ldr	r2, [pc, #236]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 80040a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 8087 	beq.w	80041c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040b4:	4b36      	ldr	r3, [pc, #216]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 030c 	and.w	r3, r3, #12
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d061      	beq.n	8004184 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d146      	bne.n	8004156 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c8:	4b33      	ldr	r3, [pc, #204]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ce:	f7fe fb31 	bl	8002734 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d6:	f7fe fb2d 	bl	8002734 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e06d      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040e8:	4b29      	ldr	r3, [pc, #164]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f0      	bne.n	80040d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040fc:	d108      	bne.n	8004110 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80040fe:	4b24      	ldr	r3, [pc, #144]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	4921      	ldr	r1, [pc, #132]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 800410c:	4313      	orrs	r3, r2
 800410e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004110:	4b1f      	ldr	r3, [pc, #124]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a19      	ldr	r1, [r3, #32]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	430b      	orrs	r3, r1
 8004122:	491b      	ldr	r1, [pc, #108]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8004124:	4313      	orrs	r3, r2
 8004126:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004128:	4b1b      	ldr	r3, [pc, #108]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 800412a:	2201      	movs	r2, #1
 800412c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412e:	f7fe fb01 	bl	8002734 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004136:	f7fe fafd 	bl	8002734 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e03d      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004148:	4b11      	ldr	r3, [pc, #68]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0f0      	beq.n	8004136 <HAL_RCC_OscConfig+0x46a>
 8004154:	e035      	b.n	80041c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004156:	4b10      	ldr	r3, [pc, #64]	; (8004198 <HAL_RCC_OscConfig+0x4cc>)
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415c:	f7fe faea 	bl	8002734 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004164:	f7fe fae6 	bl	8002734 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e026      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004176:	4b06      	ldr	r3, [pc, #24]	; (8004190 <HAL_RCC_OscConfig+0x4c4>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f0      	bne.n	8004164 <HAL_RCC_OscConfig+0x498>
 8004182:	e01e      	b.n	80041c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d107      	bne.n	800419c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e019      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
 8004190:	40021000 	.word	0x40021000
 8004194:	40007000 	.word	0x40007000
 8004198:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800419c:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <HAL_RCC_OscConfig+0x500>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d106      	bne.n	80041be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d001      	beq.n	80041c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3718      	adds	r7, #24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40021000 	.word	0x40021000

080041d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0d0      	b.n	8004386 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041e4:	4b6a      	ldr	r3, [pc, #424]	; (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d910      	bls.n	8004214 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f2:	4b67      	ldr	r3, [pc, #412]	; (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 0207 	bic.w	r2, r3, #7
 80041fa:	4965      	ldr	r1, [pc, #404]	; (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b63      	ldr	r3, [pc, #396]	; (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0b8      	b.n	8004386 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d020      	beq.n	8004262 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800422c:	4b59      	ldr	r3, [pc, #356]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	4a58      	ldr	r2, [pc, #352]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004232:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004236:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004244:	4b53      	ldr	r3, [pc, #332]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	4a52      	ldr	r2, [pc, #328]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 800424a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800424e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004250:	4b50      	ldr	r3, [pc, #320]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	494d      	ldr	r1, [pc, #308]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 800425e:	4313      	orrs	r3, r2
 8004260:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d040      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d107      	bne.n	8004286 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004276:	4b47      	ldr	r3, [pc, #284]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d115      	bne.n	80042ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e07f      	b.n	8004386 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d107      	bne.n	800429e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428e:	4b41      	ldr	r3, [pc, #260]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d109      	bne.n	80042ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e073      	b.n	8004386 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429e:	4b3d      	ldr	r3, [pc, #244]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e06b      	b.n	8004386 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ae:	4b39      	ldr	r3, [pc, #228]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f023 0203 	bic.w	r2, r3, #3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	4936      	ldr	r1, [pc, #216]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042c0:	f7fe fa38 	bl	8002734 <HAL_GetTick>
 80042c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c6:	e00a      	b.n	80042de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c8:	f7fe fa34 	bl	8002734 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e053      	b.n	8004386 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042de:	4b2d      	ldr	r3, [pc, #180]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f003 020c 	and.w	r2, r3, #12
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d1eb      	bne.n	80042c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042f0:	4b27      	ldr	r3, [pc, #156]	; (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d210      	bcs.n	8004320 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fe:	4b24      	ldr	r3, [pc, #144]	; (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f023 0207 	bic.w	r2, r3, #7
 8004306:	4922      	ldr	r1, [pc, #136]	; (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	4313      	orrs	r3, r2
 800430c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800430e:	4b20      	ldr	r3, [pc, #128]	; (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d001      	beq.n	8004320 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e032      	b.n	8004386 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d008      	beq.n	800433e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800432c:	4b19      	ldr	r3, [pc, #100]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4916      	ldr	r1, [pc, #88]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 800433a:	4313      	orrs	r3, r2
 800433c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b00      	cmp	r3, #0
 8004348:	d009      	beq.n	800435e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800434a:	4b12      	ldr	r3, [pc, #72]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	490e      	ldr	r1, [pc, #56]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 800435a:	4313      	orrs	r3, r2
 800435c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800435e:	f000 f821 	bl	80043a4 <HAL_RCC_GetSysClockFreq>
 8004362:	4602      	mov	r2, r0
 8004364:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	490a      	ldr	r1, [pc, #40]	; (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 8004370:	5ccb      	ldrb	r3, [r1, r3]
 8004372:	fa22 f303 	lsr.w	r3, r2, r3
 8004376:	4a09      	ldr	r2, [pc, #36]	; (800439c <HAL_RCC_ClockConfig+0x1cc>)
 8004378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800437a:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <HAL_RCC_ClockConfig+0x1d0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f7fe f996 	bl	80026b0 <HAL_InitTick>

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40022000 	.word	0x40022000
 8004394:	40021000 	.word	0x40021000
 8004398:	08006950 	.word	0x08006950
 800439c:	20000110 	.word	0x20000110
 80043a0:	20000114 	.word	0x20000114

080043a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	2300      	movs	r3, #0
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	2300      	movs	r3, #0
 80043b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043be:	4b1e      	ldr	r3, [pc, #120]	; (8004438 <HAL_RCC_GetSysClockFreq+0x94>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f003 030c 	and.w	r3, r3, #12
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d002      	beq.n	80043d4 <HAL_RCC_GetSysClockFreq+0x30>
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d003      	beq.n	80043da <HAL_RCC_GetSysClockFreq+0x36>
 80043d2:	e027      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043d4:	4b19      	ldr	r3, [pc, #100]	; (800443c <HAL_RCC_GetSysClockFreq+0x98>)
 80043d6:	613b      	str	r3, [r7, #16]
      break;
 80043d8:	e027      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	0c9b      	lsrs	r3, r3, #18
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	4a17      	ldr	r2, [pc, #92]	; (8004440 <HAL_RCC_GetSysClockFreq+0x9c>)
 80043e4:	5cd3      	ldrb	r3, [r2, r3]
 80043e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d010      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043f2:	4b11      	ldr	r3, [pc, #68]	; (8004438 <HAL_RCC_GetSysClockFreq+0x94>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	0c5b      	lsrs	r3, r3, #17
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	4a11      	ldr	r2, [pc, #68]	; (8004444 <HAL_RCC_GetSysClockFreq+0xa0>)
 80043fe:	5cd3      	ldrb	r3, [r2, r3]
 8004400:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a0d      	ldr	r2, [pc, #52]	; (800443c <HAL_RCC_GetSysClockFreq+0x98>)
 8004406:	fb03 f202 	mul.w	r2, r3, r2
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	e004      	b.n	800441e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a0c      	ldr	r2, [pc, #48]	; (8004448 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004418:	fb02 f303 	mul.w	r3, r2, r3
 800441c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	613b      	str	r3, [r7, #16]
      break;
 8004422:	e002      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004424:	4b05      	ldr	r3, [pc, #20]	; (800443c <HAL_RCC_GetSysClockFreq+0x98>)
 8004426:	613b      	str	r3, [r7, #16]
      break;
 8004428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800442a:	693b      	ldr	r3, [r7, #16]
}
 800442c:	4618      	mov	r0, r3
 800442e:	371c      	adds	r7, #28
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40021000 	.word	0x40021000
 800443c:	007a1200 	.word	0x007a1200
 8004440:	08006968 	.word	0x08006968
 8004444:	08006978 	.word	0x08006978
 8004448:	003d0900 	.word	0x003d0900

0800444c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004450:	4b02      	ldr	r3, [pc, #8]	; (800445c <HAL_RCC_GetHCLKFreq+0x10>)
 8004452:	681b      	ldr	r3, [r3, #0]
}
 8004454:	4618      	mov	r0, r3
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr
 800445c:	20000110 	.word	0x20000110

08004460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004464:	f7ff fff2 	bl	800444c <HAL_RCC_GetHCLKFreq>
 8004468:	4602      	mov	r2, r0
 800446a:	4b05      	ldr	r3, [pc, #20]	; (8004480 <HAL_RCC_GetPCLK1Freq+0x20>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	0a1b      	lsrs	r3, r3, #8
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	4903      	ldr	r1, [pc, #12]	; (8004484 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004476:	5ccb      	ldrb	r3, [r1, r3]
 8004478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800447c:	4618      	mov	r0, r3
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40021000 	.word	0x40021000
 8004484:	08006960 	.word	0x08006960

08004488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800448c:	f7ff ffde 	bl	800444c <HAL_RCC_GetHCLKFreq>
 8004490:	4602      	mov	r2, r0
 8004492:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	0adb      	lsrs	r3, r3, #11
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	4903      	ldr	r1, [pc, #12]	; (80044ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800449e:	5ccb      	ldrb	r3, [r1, r3]
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40021000 	.word	0x40021000
 80044ac:	08006960 	.word	0x08006960

080044b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044b8:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <RCC_Delay+0x34>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a0a      	ldr	r2, [pc, #40]	; (80044e8 <RCC_Delay+0x38>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	0a5b      	lsrs	r3, r3, #9
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	fb02 f303 	mul.w	r3, r2, r3
 80044ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044cc:	bf00      	nop
  }
  while (Delay --);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1e5a      	subs	r2, r3, #1
 80044d2:	60fa      	str	r2, [r7, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1f9      	bne.n	80044cc <RCC_Delay+0x1c>
}
 80044d8:	bf00      	nop
 80044da:	bf00      	nop
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr
 80044e4:	20000110 	.word	0x20000110
 80044e8:	10624dd3 	.word	0x10624dd3

080044ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e042      	b.n	8004584 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fd ffe2 	bl	80024dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2224      	movs	r2, #36	; 0x24
 800451c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800452e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f91d 	bl	8004770 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004544:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695a      	ldr	r2, [r3, #20]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004554:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004564:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08a      	sub	sp, #40	; 0x28
 8004590:	af02      	add	r7, sp, #8
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	603b      	str	r3, [r7, #0]
 8004598:	4613      	mov	r3, r2
 800459a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b20      	cmp	r3, #32
 80045aa:	d16d      	bne.n	8004688 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <HAL_UART_Transmit+0x2c>
 80045b2:	88fb      	ldrh	r3, [r7, #6]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e066      	b.n	800468a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2221      	movs	r2, #33	; 0x21
 80045c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ca:	f7fe f8b3 	bl	8002734 <HAL_GetTick>
 80045ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	88fa      	ldrh	r2, [r7, #6]
 80045d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	88fa      	ldrh	r2, [r7, #6]
 80045da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e4:	d108      	bne.n	80045f8 <HAL_UART_Transmit+0x6c>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d104      	bne.n	80045f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	e003      	b.n	8004600 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004600:	e02a      	b.n	8004658 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2200      	movs	r2, #0
 800460a:	2180      	movs	r1, #128	; 0x80
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 f840 	bl	8004692 <UART_WaitOnFlagUntilTimeout>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e036      	b.n	800468a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10b      	bne.n	800463a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004630:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	3302      	adds	r3, #2
 8004636:	61bb      	str	r3, [r7, #24]
 8004638:	e007      	b.n	800464a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	781a      	ldrb	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	3301      	adds	r3, #1
 8004648:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1cf      	bne.n	8004602 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2200      	movs	r2, #0
 800466a:	2140      	movs	r1, #64	; 0x40
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 f810 	bl	8004692 <UART_WaitOnFlagUntilTimeout>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e006      	b.n	800468a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	e000      	b.n	800468a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004688:	2302      	movs	r3, #2
  }
}
 800468a:	4618      	mov	r0, r3
 800468c:	3720      	adds	r7, #32
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b090      	sub	sp, #64	; 0x40
 8004696:	af00      	add	r7, sp, #0
 8004698:	60f8      	str	r0, [r7, #12]
 800469a:	60b9      	str	r1, [r7, #8]
 800469c:	603b      	str	r3, [r7, #0]
 800469e:	4613      	mov	r3, r2
 80046a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046a2:	e050      	b.n	8004746 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046aa:	d04c      	beq.n	8004746 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d007      	beq.n	80046c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80046b2:	f7fe f83f 	bl	8002734 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046be:	429a      	cmp	r2, r3
 80046c0:	d241      	bcs.n	8004746 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	330c      	adds	r3, #12
 80046c8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046cc:	e853 3f00 	ldrex	r3, [r3]
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	330c      	adds	r3, #12
 80046e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046e2:	637a      	str	r2, [r7, #52]	; 0x34
 80046e4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046ea:	e841 2300 	strex	r3, r2, [r1]
 80046ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1e5      	bne.n	80046c2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3314      	adds	r3, #20
 80046fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	613b      	str	r3, [r7, #16]
   return(result);
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f023 0301 	bic.w	r3, r3, #1
 800470c:	63bb      	str	r3, [r7, #56]	; 0x38
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3314      	adds	r3, #20
 8004714:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004716:	623a      	str	r2, [r7, #32]
 8004718:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471a:	69f9      	ldr	r1, [r7, #28]
 800471c:	6a3a      	ldr	r2, [r7, #32]
 800471e:	e841 2300 	strex	r3, r2, [r1]
 8004722:	61bb      	str	r3, [r7, #24]
   return(result);
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1e5      	bne.n	80046f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e00f      	b.n	8004766 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4013      	ands	r3, r2
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	429a      	cmp	r2, r3
 8004754:	bf0c      	ite	eq
 8004756:	2301      	moveq	r3, #1
 8004758:	2300      	movne	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	461a      	mov	r2, r3
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	429a      	cmp	r2, r3
 8004762:	d09f      	beq.n	80046a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3740      	adds	r7, #64	; 0x40
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
	...

08004770 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	4313      	orrs	r3, r2
 800479e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80047aa:	f023 030c 	bic.w	r3, r3, #12
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6812      	ldr	r2, [r2, #0]
 80047b2:	68b9      	ldr	r1, [r7, #8]
 80047b4:	430b      	orrs	r3, r1
 80047b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699a      	ldr	r2, [r3, #24]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a2c      	ldr	r2, [pc, #176]	; (8004884 <UART_SetConfig+0x114>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d103      	bne.n	80047e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047d8:	f7ff fe56 	bl	8004488 <HAL_RCC_GetPCLK2Freq>
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	e002      	b.n	80047e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047e0:	f7ff fe3e 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 80047e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	4613      	mov	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	009a      	lsls	r2, r3, #2
 80047f0:	441a      	add	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fc:	4a22      	ldr	r2, [pc, #136]	; (8004888 <UART_SetConfig+0x118>)
 80047fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	0119      	lsls	r1, r3, #4
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4613      	mov	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	009a      	lsls	r2, r3, #2
 8004810:	441a      	add	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	fbb2 f2f3 	udiv	r2, r2, r3
 800481c:	4b1a      	ldr	r3, [pc, #104]	; (8004888 <UART_SetConfig+0x118>)
 800481e:	fba3 0302 	umull	r0, r3, r3, r2
 8004822:	095b      	lsrs	r3, r3, #5
 8004824:	2064      	movs	r0, #100	; 0x64
 8004826:	fb00 f303 	mul.w	r3, r0, r3
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	3332      	adds	r3, #50	; 0x32
 8004830:	4a15      	ldr	r2, [pc, #84]	; (8004888 <UART_SetConfig+0x118>)
 8004832:	fba2 2303 	umull	r2, r3, r2, r3
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800483c:	4419      	add	r1, r3
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	009a      	lsls	r2, r3, #2
 8004848:	441a      	add	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	fbb2 f2f3 	udiv	r2, r2, r3
 8004854:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <UART_SetConfig+0x118>)
 8004856:	fba3 0302 	umull	r0, r3, r3, r2
 800485a:	095b      	lsrs	r3, r3, #5
 800485c:	2064      	movs	r0, #100	; 0x64
 800485e:	fb00 f303 	mul.w	r3, r0, r3
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	3332      	adds	r3, #50	; 0x32
 8004868:	4a07      	ldr	r2, [pc, #28]	; (8004888 <UART_SetConfig+0x118>)
 800486a:	fba2 2303 	umull	r2, r3, r2, r3
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	f003 020f 	and.w	r2, r3, #15
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	440a      	add	r2, r1
 800487a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800487c:	bf00      	nop
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40013800 	.word	0x40013800
 8004888:	51eb851f 	.word	0x51eb851f

0800488c <siprintf>:
 800488c:	b40e      	push	{r1, r2, r3}
 800488e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004892:	b500      	push	{lr}
 8004894:	b09c      	sub	sp, #112	; 0x70
 8004896:	ab1d      	add	r3, sp, #116	; 0x74
 8004898:	9002      	str	r0, [sp, #8]
 800489a:	9006      	str	r0, [sp, #24]
 800489c:	9107      	str	r1, [sp, #28]
 800489e:	9104      	str	r1, [sp, #16]
 80048a0:	4808      	ldr	r0, [pc, #32]	; (80048c4 <siprintf+0x38>)
 80048a2:	4909      	ldr	r1, [pc, #36]	; (80048c8 <siprintf+0x3c>)
 80048a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80048a8:	9105      	str	r1, [sp, #20]
 80048aa:	6800      	ldr	r0, [r0, #0]
 80048ac:	a902      	add	r1, sp, #8
 80048ae:	9301      	str	r3, [sp, #4]
 80048b0:	f000 f98e 	bl	8004bd0 <_svfiprintf_r>
 80048b4:	2200      	movs	r2, #0
 80048b6:	9b02      	ldr	r3, [sp, #8]
 80048b8:	701a      	strb	r2, [r3, #0]
 80048ba:	b01c      	add	sp, #112	; 0x70
 80048bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80048c0:	b003      	add	sp, #12
 80048c2:	4770      	bx	lr
 80048c4:	20000168 	.word	0x20000168
 80048c8:	ffff0208 	.word	0xffff0208

080048cc <memset>:
 80048cc:	4603      	mov	r3, r0
 80048ce:	4402      	add	r2, r0
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d100      	bne.n	80048d6 <memset+0xa>
 80048d4:	4770      	bx	lr
 80048d6:	f803 1b01 	strb.w	r1, [r3], #1
 80048da:	e7f9      	b.n	80048d0 <memset+0x4>

080048dc <__errno>:
 80048dc:	4b01      	ldr	r3, [pc, #4]	; (80048e4 <__errno+0x8>)
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	20000168 	.word	0x20000168

080048e8 <__libc_init_array>:
 80048e8:	b570      	push	{r4, r5, r6, lr}
 80048ea:	2600      	movs	r6, #0
 80048ec:	4d0c      	ldr	r5, [pc, #48]	; (8004920 <__libc_init_array+0x38>)
 80048ee:	4c0d      	ldr	r4, [pc, #52]	; (8004924 <__libc_init_array+0x3c>)
 80048f0:	1b64      	subs	r4, r4, r5
 80048f2:	10a4      	asrs	r4, r4, #2
 80048f4:	42a6      	cmp	r6, r4
 80048f6:	d109      	bne.n	800490c <__libc_init_array+0x24>
 80048f8:	f002 f80e 	bl	8006918 <_init>
 80048fc:	2600      	movs	r6, #0
 80048fe:	4d0a      	ldr	r5, [pc, #40]	; (8004928 <__libc_init_array+0x40>)
 8004900:	4c0a      	ldr	r4, [pc, #40]	; (800492c <__libc_init_array+0x44>)
 8004902:	1b64      	subs	r4, r4, r5
 8004904:	10a4      	asrs	r4, r4, #2
 8004906:	42a6      	cmp	r6, r4
 8004908:	d105      	bne.n	8004916 <__libc_init_array+0x2e>
 800490a:	bd70      	pop	{r4, r5, r6, pc}
 800490c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004910:	4798      	blx	r3
 8004912:	3601      	adds	r6, #1
 8004914:	e7ee      	b.n	80048f4 <__libc_init_array+0xc>
 8004916:	f855 3b04 	ldr.w	r3, [r5], #4
 800491a:	4798      	blx	r3
 800491c:	3601      	adds	r6, #1
 800491e:	e7f2      	b.n	8004906 <__libc_init_array+0x1e>
 8004920:	08006bf8 	.word	0x08006bf8
 8004924:	08006bf8 	.word	0x08006bf8
 8004928:	08006bf8 	.word	0x08006bf8
 800492c:	08006bfc 	.word	0x08006bfc

08004930 <__retarget_lock_acquire_recursive>:
 8004930:	4770      	bx	lr

08004932 <__retarget_lock_release_recursive>:
 8004932:	4770      	bx	lr

08004934 <_free_r>:
 8004934:	b538      	push	{r3, r4, r5, lr}
 8004936:	4605      	mov	r5, r0
 8004938:	2900      	cmp	r1, #0
 800493a:	d040      	beq.n	80049be <_free_r+0x8a>
 800493c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004940:	1f0c      	subs	r4, r1, #4
 8004942:	2b00      	cmp	r3, #0
 8004944:	bfb8      	it	lt
 8004946:	18e4      	addlt	r4, r4, r3
 8004948:	f000 f8dc 	bl	8004b04 <__malloc_lock>
 800494c:	4a1c      	ldr	r2, [pc, #112]	; (80049c0 <_free_r+0x8c>)
 800494e:	6813      	ldr	r3, [r2, #0]
 8004950:	b933      	cbnz	r3, 8004960 <_free_r+0x2c>
 8004952:	6063      	str	r3, [r4, #4]
 8004954:	6014      	str	r4, [r2, #0]
 8004956:	4628      	mov	r0, r5
 8004958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800495c:	f000 b8d8 	b.w	8004b10 <__malloc_unlock>
 8004960:	42a3      	cmp	r3, r4
 8004962:	d908      	bls.n	8004976 <_free_r+0x42>
 8004964:	6820      	ldr	r0, [r4, #0]
 8004966:	1821      	adds	r1, r4, r0
 8004968:	428b      	cmp	r3, r1
 800496a:	bf01      	itttt	eq
 800496c:	6819      	ldreq	r1, [r3, #0]
 800496e:	685b      	ldreq	r3, [r3, #4]
 8004970:	1809      	addeq	r1, r1, r0
 8004972:	6021      	streq	r1, [r4, #0]
 8004974:	e7ed      	b.n	8004952 <_free_r+0x1e>
 8004976:	461a      	mov	r2, r3
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	b10b      	cbz	r3, 8004980 <_free_r+0x4c>
 800497c:	42a3      	cmp	r3, r4
 800497e:	d9fa      	bls.n	8004976 <_free_r+0x42>
 8004980:	6811      	ldr	r1, [r2, #0]
 8004982:	1850      	adds	r0, r2, r1
 8004984:	42a0      	cmp	r0, r4
 8004986:	d10b      	bne.n	80049a0 <_free_r+0x6c>
 8004988:	6820      	ldr	r0, [r4, #0]
 800498a:	4401      	add	r1, r0
 800498c:	1850      	adds	r0, r2, r1
 800498e:	4283      	cmp	r3, r0
 8004990:	6011      	str	r1, [r2, #0]
 8004992:	d1e0      	bne.n	8004956 <_free_r+0x22>
 8004994:	6818      	ldr	r0, [r3, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	4408      	add	r0, r1
 800499a:	6010      	str	r0, [r2, #0]
 800499c:	6053      	str	r3, [r2, #4]
 800499e:	e7da      	b.n	8004956 <_free_r+0x22>
 80049a0:	d902      	bls.n	80049a8 <_free_r+0x74>
 80049a2:	230c      	movs	r3, #12
 80049a4:	602b      	str	r3, [r5, #0]
 80049a6:	e7d6      	b.n	8004956 <_free_r+0x22>
 80049a8:	6820      	ldr	r0, [r4, #0]
 80049aa:	1821      	adds	r1, r4, r0
 80049ac:	428b      	cmp	r3, r1
 80049ae:	bf01      	itttt	eq
 80049b0:	6819      	ldreq	r1, [r3, #0]
 80049b2:	685b      	ldreq	r3, [r3, #4]
 80049b4:	1809      	addeq	r1, r1, r0
 80049b6:	6021      	streq	r1, [r4, #0]
 80049b8:	6063      	str	r3, [r4, #4]
 80049ba:	6054      	str	r4, [r2, #4]
 80049bc:	e7cb      	b.n	8004956 <_free_r+0x22>
 80049be:	bd38      	pop	{r3, r4, r5, pc}
 80049c0:	2000048c 	.word	0x2000048c

080049c4 <sbrk_aligned>:
 80049c4:	b570      	push	{r4, r5, r6, lr}
 80049c6:	4e0e      	ldr	r6, [pc, #56]	; (8004a00 <sbrk_aligned+0x3c>)
 80049c8:	460c      	mov	r4, r1
 80049ca:	6831      	ldr	r1, [r6, #0]
 80049cc:	4605      	mov	r5, r0
 80049ce:	b911      	cbnz	r1, 80049d6 <sbrk_aligned+0x12>
 80049d0:	f000 fbaa 	bl	8005128 <_sbrk_r>
 80049d4:	6030      	str	r0, [r6, #0]
 80049d6:	4621      	mov	r1, r4
 80049d8:	4628      	mov	r0, r5
 80049da:	f000 fba5 	bl	8005128 <_sbrk_r>
 80049de:	1c43      	adds	r3, r0, #1
 80049e0:	d00a      	beq.n	80049f8 <sbrk_aligned+0x34>
 80049e2:	1cc4      	adds	r4, r0, #3
 80049e4:	f024 0403 	bic.w	r4, r4, #3
 80049e8:	42a0      	cmp	r0, r4
 80049ea:	d007      	beq.n	80049fc <sbrk_aligned+0x38>
 80049ec:	1a21      	subs	r1, r4, r0
 80049ee:	4628      	mov	r0, r5
 80049f0:	f000 fb9a 	bl	8005128 <_sbrk_r>
 80049f4:	3001      	adds	r0, #1
 80049f6:	d101      	bne.n	80049fc <sbrk_aligned+0x38>
 80049f8:	f04f 34ff 	mov.w	r4, #4294967295
 80049fc:	4620      	mov	r0, r4
 80049fe:	bd70      	pop	{r4, r5, r6, pc}
 8004a00:	20000490 	.word	0x20000490

08004a04 <_malloc_r>:
 8004a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a08:	1ccd      	adds	r5, r1, #3
 8004a0a:	f025 0503 	bic.w	r5, r5, #3
 8004a0e:	3508      	adds	r5, #8
 8004a10:	2d0c      	cmp	r5, #12
 8004a12:	bf38      	it	cc
 8004a14:	250c      	movcc	r5, #12
 8004a16:	2d00      	cmp	r5, #0
 8004a18:	4607      	mov	r7, r0
 8004a1a:	db01      	blt.n	8004a20 <_malloc_r+0x1c>
 8004a1c:	42a9      	cmp	r1, r5
 8004a1e:	d905      	bls.n	8004a2c <_malloc_r+0x28>
 8004a20:	230c      	movs	r3, #12
 8004a22:	2600      	movs	r6, #0
 8004a24:	603b      	str	r3, [r7, #0]
 8004a26:	4630      	mov	r0, r6
 8004a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004b00 <_malloc_r+0xfc>
 8004a30:	f000 f868 	bl	8004b04 <__malloc_lock>
 8004a34:	f8d8 3000 	ldr.w	r3, [r8]
 8004a38:	461c      	mov	r4, r3
 8004a3a:	bb5c      	cbnz	r4, 8004a94 <_malloc_r+0x90>
 8004a3c:	4629      	mov	r1, r5
 8004a3e:	4638      	mov	r0, r7
 8004a40:	f7ff ffc0 	bl	80049c4 <sbrk_aligned>
 8004a44:	1c43      	adds	r3, r0, #1
 8004a46:	4604      	mov	r4, r0
 8004a48:	d155      	bne.n	8004af6 <_malloc_r+0xf2>
 8004a4a:	f8d8 4000 	ldr.w	r4, [r8]
 8004a4e:	4626      	mov	r6, r4
 8004a50:	2e00      	cmp	r6, #0
 8004a52:	d145      	bne.n	8004ae0 <_malloc_r+0xdc>
 8004a54:	2c00      	cmp	r4, #0
 8004a56:	d048      	beq.n	8004aea <_malloc_r+0xe6>
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	4631      	mov	r1, r6
 8004a5c:	4638      	mov	r0, r7
 8004a5e:	eb04 0903 	add.w	r9, r4, r3
 8004a62:	f000 fb61 	bl	8005128 <_sbrk_r>
 8004a66:	4581      	cmp	r9, r0
 8004a68:	d13f      	bne.n	8004aea <_malloc_r+0xe6>
 8004a6a:	6821      	ldr	r1, [r4, #0]
 8004a6c:	4638      	mov	r0, r7
 8004a6e:	1a6d      	subs	r5, r5, r1
 8004a70:	4629      	mov	r1, r5
 8004a72:	f7ff ffa7 	bl	80049c4 <sbrk_aligned>
 8004a76:	3001      	adds	r0, #1
 8004a78:	d037      	beq.n	8004aea <_malloc_r+0xe6>
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	442b      	add	r3, r5
 8004a7e:	6023      	str	r3, [r4, #0]
 8004a80:	f8d8 3000 	ldr.w	r3, [r8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d038      	beq.n	8004afa <_malloc_r+0xf6>
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	42a2      	cmp	r2, r4
 8004a8c:	d12b      	bne.n	8004ae6 <_malloc_r+0xe2>
 8004a8e:	2200      	movs	r2, #0
 8004a90:	605a      	str	r2, [r3, #4]
 8004a92:	e00f      	b.n	8004ab4 <_malloc_r+0xb0>
 8004a94:	6822      	ldr	r2, [r4, #0]
 8004a96:	1b52      	subs	r2, r2, r5
 8004a98:	d41f      	bmi.n	8004ada <_malloc_r+0xd6>
 8004a9a:	2a0b      	cmp	r2, #11
 8004a9c:	d917      	bls.n	8004ace <_malloc_r+0xca>
 8004a9e:	1961      	adds	r1, r4, r5
 8004aa0:	42a3      	cmp	r3, r4
 8004aa2:	6025      	str	r5, [r4, #0]
 8004aa4:	bf18      	it	ne
 8004aa6:	6059      	strne	r1, [r3, #4]
 8004aa8:	6863      	ldr	r3, [r4, #4]
 8004aaa:	bf08      	it	eq
 8004aac:	f8c8 1000 	streq.w	r1, [r8]
 8004ab0:	5162      	str	r2, [r4, r5]
 8004ab2:	604b      	str	r3, [r1, #4]
 8004ab4:	4638      	mov	r0, r7
 8004ab6:	f104 060b 	add.w	r6, r4, #11
 8004aba:	f000 f829 	bl	8004b10 <__malloc_unlock>
 8004abe:	f026 0607 	bic.w	r6, r6, #7
 8004ac2:	1d23      	adds	r3, r4, #4
 8004ac4:	1af2      	subs	r2, r6, r3
 8004ac6:	d0ae      	beq.n	8004a26 <_malloc_r+0x22>
 8004ac8:	1b9b      	subs	r3, r3, r6
 8004aca:	50a3      	str	r3, [r4, r2]
 8004acc:	e7ab      	b.n	8004a26 <_malloc_r+0x22>
 8004ace:	42a3      	cmp	r3, r4
 8004ad0:	6862      	ldr	r2, [r4, #4]
 8004ad2:	d1dd      	bne.n	8004a90 <_malloc_r+0x8c>
 8004ad4:	f8c8 2000 	str.w	r2, [r8]
 8004ad8:	e7ec      	b.n	8004ab4 <_malloc_r+0xb0>
 8004ada:	4623      	mov	r3, r4
 8004adc:	6864      	ldr	r4, [r4, #4]
 8004ade:	e7ac      	b.n	8004a3a <_malloc_r+0x36>
 8004ae0:	4634      	mov	r4, r6
 8004ae2:	6876      	ldr	r6, [r6, #4]
 8004ae4:	e7b4      	b.n	8004a50 <_malloc_r+0x4c>
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	e7cc      	b.n	8004a84 <_malloc_r+0x80>
 8004aea:	230c      	movs	r3, #12
 8004aec:	4638      	mov	r0, r7
 8004aee:	603b      	str	r3, [r7, #0]
 8004af0:	f000 f80e 	bl	8004b10 <__malloc_unlock>
 8004af4:	e797      	b.n	8004a26 <_malloc_r+0x22>
 8004af6:	6025      	str	r5, [r4, #0]
 8004af8:	e7dc      	b.n	8004ab4 <_malloc_r+0xb0>
 8004afa:	605b      	str	r3, [r3, #4]
 8004afc:	deff      	udf	#255	; 0xff
 8004afe:	bf00      	nop
 8004b00:	2000048c 	.word	0x2000048c

08004b04 <__malloc_lock>:
 8004b04:	4801      	ldr	r0, [pc, #4]	; (8004b0c <__malloc_lock+0x8>)
 8004b06:	f7ff bf13 	b.w	8004930 <__retarget_lock_acquire_recursive>
 8004b0a:	bf00      	nop
 8004b0c:	20000488 	.word	0x20000488

08004b10 <__malloc_unlock>:
 8004b10:	4801      	ldr	r0, [pc, #4]	; (8004b18 <__malloc_unlock+0x8>)
 8004b12:	f7ff bf0e 	b.w	8004932 <__retarget_lock_release_recursive>
 8004b16:	bf00      	nop
 8004b18:	20000488 	.word	0x20000488

08004b1c <__ssputs_r>:
 8004b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b20:	461f      	mov	r7, r3
 8004b22:	688e      	ldr	r6, [r1, #8]
 8004b24:	4682      	mov	sl, r0
 8004b26:	42be      	cmp	r6, r7
 8004b28:	460c      	mov	r4, r1
 8004b2a:	4690      	mov	r8, r2
 8004b2c:	680b      	ldr	r3, [r1, #0]
 8004b2e:	d82c      	bhi.n	8004b8a <__ssputs_r+0x6e>
 8004b30:	898a      	ldrh	r2, [r1, #12]
 8004b32:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b36:	d026      	beq.n	8004b86 <__ssputs_r+0x6a>
 8004b38:	6965      	ldr	r5, [r4, #20]
 8004b3a:	6909      	ldr	r1, [r1, #16]
 8004b3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b40:	eba3 0901 	sub.w	r9, r3, r1
 8004b44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b48:	1c7b      	adds	r3, r7, #1
 8004b4a:	444b      	add	r3, r9
 8004b4c:	106d      	asrs	r5, r5, #1
 8004b4e:	429d      	cmp	r5, r3
 8004b50:	bf38      	it	cc
 8004b52:	461d      	movcc	r5, r3
 8004b54:	0553      	lsls	r3, r2, #21
 8004b56:	d527      	bpl.n	8004ba8 <__ssputs_r+0x8c>
 8004b58:	4629      	mov	r1, r5
 8004b5a:	f7ff ff53 	bl	8004a04 <_malloc_r>
 8004b5e:	4606      	mov	r6, r0
 8004b60:	b360      	cbz	r0, 8004bbc <__ssputs_r+0xa0>
 8004b62:	464a      	mov	r2, r9
 8004b64:	6921      	ldr	r1, [r4, #16]
 8004b66:	f000 fafd 	bl	8005164 <memcpy>
 8004b6a:	89a3      	ldrh	r3, [r4, #12]
 8004b6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b74:	81a3      	strh	r3, [r4, #12]
 8004b76:	6126      	str	r6, [r4, #16]
 8004b78:	444e      	add	r6, r9
 8004b7a:	6026      	str	r6, [r4, #0]
 8004b7c:	463e      	mov	r6, r7
 8004b7e:	6165      	str	r5, [r4, #20]
 8004b80:	eba5 0509 	sub.w	r5, r5, r9
 8004b84:	60a5      	str	r5, [r4, #8]
 8004b86:	42be      	cmp	r6, r7
 8004b88:	d900      	bls.n	8004b8c <__ssputs_r+0x70>
 8004b8a:	463e      	mov	r6, r7
 8004b8c:	4632      	mov	r2, r6
 8004b8e:	4641      	mov	r1, r8
 8004b90:	6820      	ldr	r0, [r4, #0]
 8004b92:	f000 faaf 	bl	80050f4 <memmove>
 8004b96:	2000      	movs	r0, #0
 8004b98:	68a3      	ldr	r3, [r4, #8]
 8004b9a:	1b9b      	subs	r3, r3, r6
 8004b9c:	60a3      	str	r3, [r4, #8]
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	4433      	add	r3, r6
 8004ba2:	6023      	str	r3, [r4, #0]
 8004ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba8:	462a      	mov	r2, r5
 8004baa:	f000 fae9 	bl	8005180 <_realloc_r>
 8004bae:	4606      	mov	r6, r0
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	d1e0      	bne.n	8004b76 <__ssputs_r+0x5a>
 8004bb4:	4650      	mov	r0, sl
 8004bb6:	6921      	ldr	r1, [r4, #16]
 8004bb8:	f7ff febc 	bl	8004934 <_free_r>
 8004bbc:	230c      	movs	r3, #12
 8004bbe:	f8ca 3000 	str.w	r3, [sl]
 8004bc2:	89a3      	ldrh	r3, [r4, #12]
 8004bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bcc:	81a3      	strh	r3, [r4, #12]
 8004bce:	e7e9      	b.n	8004ba4 <__ssputs_r+0x88>

08004bd0 <_svfiprintf_r>:
 8004bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd4:	4698      	mov	r8, r3
 8004bd6:	898b      	ldrh	r3, [r1, #12]
 8004bd8:	4607      	mov	r7, r0
 8004bda:	061b      	lsls	r3, r3, #24
 8004bdc:	460d      	mov	r5, r1
 8004bde:	4614      	mov	r4, r2
 8004be0:	b09d      	sub	sp, #116	; 0x74
 8004be2:	d50e      	bpl.n	8004c02 <_svfiprintf_r+0x32>
 8004be4:	690b      	ldr	r3, [r1, #16]
 8004be6:	b963      	cbnz	r3, 8004c02 <_svfiprintf_r+0x32>
 8004be8:	2140      	movs	r1, #64	; 0x40
 8004bea:	f7ff ff0b 	bl	8004a04 <_malloc_r>
 8004bee:	6028      	str	r0, [r5, #0]
 8004bf0:	6128      	str	r0, [r5, #16]
 8004bf2:	b920      	cbnz	r0, 8004bfe <_svfiprintf_r+0x2e>
 8004bf4:	230c      	movs	r3, #12
 8004bf6:	603b      	str	r3, [r7, #0]
 8004bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bfc:	e0d0      	b.n	8004da0 <_svfiprintf_r+0x1d0>
 8004bfe:	2340      	movs	r3, #64	; 0x40
 8004c00:	616b      	str	r3, [r5, #20]
 8004c02:	2300      	movs	r3, #0
 8004c04:	9309      	str	r3, [sp, #36]	; 0x24
 8004c06:	2320      	movs	r3, #32
 8004c08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c0c:	2330      	movs	r3, #48	; 0x30
 8004c0e:	f04f 0901 	mov.w	r9, #1
 8004c12:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c16:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004db8 <_svfiprintf_r+0x1e8>
 8004c1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c1e:	4623      	mov	r3, r4
 8004c20:	469a      	mov	sl, r3
 8004c22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c26:	b10a      	cbz	r2, 8004c2c <_svfiprintf_r+0x5c>
 8004c28:	2a25      	cmp	r2, #37	; 0x25
 8004c2a:	d1f9      	bne.n	8004c20 <_svfiprintf_r+0x50>
 8004c2c:	ebba 0b04 	subs.w	fp, sl, r4
 8004c30:	d00b      	beq.n	8004c4a <_svfiprintf_r+0x7a>
 8004c32:	465b      	mov	r3, fp
 8004c34:	4622      	mov	r2, r4
 8004c36:	4629      	mov	r1, r5
 8004c38:	4638      	mov	r0, r7
 8004c3a:	f7ff ff6f 	bl	8004b1c <__ssputs_r>
 8004c3e:	3001      	adds	r0, #1
 8004c40:	f000 80a9 	beq.w	8004d96 <_svfiprintf_r+0x1c6>
 8004c44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c46:	445a      	add	r2, fp
 8004c48:	9209      	str	r2, [sp, #36]	; 0x24
 8004c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80a1 	beq.w	8004d96 <_svfiprintf_r+0x1c6>
 8004c54:	2300      	movs	r3, #0
 8004c56:	f04f 32ff 	mov.w	r2, #4294967295
 8004c5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c5e:	f10a 0a01 	add.w	sl, sl, #1
 8004c62:	9304      	str	r3, [sp, #16]
 8004c64:	9307      	str	r3, [sp, #28]
 8004c66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c6a:	931a      	str	r3, [sp, #104]	; 0x68
 8004c6c:	4654      	mov	r4, sl
 8004c6e:	2205      	movs	r2, #5
 8004c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c74:	4850      	ldr	r0, [pc, #320]	; (8004db8 <_svfiprintf_r+0x1e8>)
 8004c76:	f000 fa67 	bl	8005148 <memchr>
 8004c7a:	9a04      	ldr	r2, [sp, #16]
 8004c7c:	b9d8      	cbnz	r0, 8004cb6 <_svfiprintf_r+0xe6>
 8004c7e:	06d0      	lsls	r0, r2, #27
 8004c80:	bf44      	itt	mi
 8004c82:	2320      	movmi	r3, #32
 8004c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c88:	0711      	lsls	r1, r2, #28
 8004c8a:	bf44      	itt	mi
 8004c8c:	232b      	movmi	r3, #43	; 0x2b
 8004c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c92:	f89a 3000 	ldrb.w	r3, [sl]
 8004c96:	2b2a      	cmp	r3, #42	; 0x2a
 8004c98:	d015      	beq.n	8004cc6 <_svfiprintf_r+0xf6>
 8004c9a:	4654      	mov	r4, sl
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	f04f 0c0a 	mov.w	ip, #10
 8004ca2:	9a07      	ldr	r2, [sp, #28]
 8004ca4:	4621      	mov	r1, r4
 8004ca6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004caa:	3b30      	subs	r3, #48	; 0x30
 8004cac:	2b09      	cmp	r3, #9
 8004cae:	d94d      	bls.n	8004d4c <_svfiprintf_r+0x17c>
 8004cb0:	b1b0      	cbz	r0, 8004ce0 <_svfiprintf_r+0x110>
 8004cb2:	9207      	str	r2, [sp, #28]
 8004cb4:	e014      	b.n	8004ce0 <_svfiprintf_r+0x110>
 8004cb6:	eba0 0308 	sub.w	r3, r0, r8
 8004cba:	fa09 f303 	lsl.w	r3, r9, r3
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	46a2      	mov	sl, r4
 8004cc2:	9304      	str	r3, [sp, #16]
 8004cc4:	e7d2      	b.n	8004c6c <_svfiprintf_r+0x9c>
 8004cc6:	9b03      	ldr	r3, [sp, #12]
 8004cc8:	1d19      	adds	r1, r3, #4
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	9103      	str	r1, [sp, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	bfbb      	ittet	lt
 8004cd2:	425b      	neglt	r3, r3
 8004cd4:	f042 0202 	orrlt.w	r2, r2, #2
 8004cd8:	9307      	strge	r3, [sp, #28]
 8004cda:	9307      	strlt	r3, [sp, #28]
 8004cdc:	bfb8      	it	lt
 8004cde:	9204      	strlt	r2, [sp, #16]
 8004ce0:	7823      	ldrb	r3, [r4, #0]
 8004ce2:	2b2e      	cmp	r3, #46	; 0x2e
 8004ce4:	d10c      	bne.n	8004d00 <_svfiprintf_r+0x130>
 8004ce6:	7863      	ldrb	r3, [r4, #1]
 8004ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8004cea:	d134      	bne.n	8004d56 <_svfiprintf_r+0x186>
 8004cec:	9b03      	ldr	r3, [sp, #12]
 8004cee:	3402      	adds	r4, #2
 8004cf0:	1d1a      	adds	r2, r3, #4
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	9203      	str	r2, [sp, #12]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	bfb8      	it	lt
 8004cfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8004cfe:	9305      	str	r3, [sp, #20]
 8004d00:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004dbc <_svfiprintf_r+0x1ec>
 8004d04:	2203      	movs	r2, #3
 8004d06:	4650      	mov	r0, sl
 8004d08:	7821      	ldrb	r1, [r4, #0]
 8004d0a:	f000 fa1d 	bl	8005148 <memchr>
 8004d0e:	b138      	cbz	r0, 8004d20 <_svfiprintf_r+0x150>
 8004d10:	2240      	movs	r2, #64	; 0x40
 8004d12:	9b04      	ldr	r3, [sp, #16]
 8004d14:	eba0 000a 	sub.w	r0, r0, sl
 8004d18:	4082      	lsls	r2, r0
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	3401      	adds	r4, #1
 8004d1e:	9304      	str	r3, [sp, #16]
 8004d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d24:	2206      	movs	r2, #6
 8004d26:	4826      	ldr	r0, [pc, #152]	; (8004dc0 <_svfiprintf_r+0x1f0>)
 8004d28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d2c:	f000 fa0c 	bl	8005148 <memchr>
 8004d30:	2800      	cmp	r0, #0
 8004d32:	d038      	beq.n	8004da6 <_svfiprintf_r+0x1d6>
 8004d34:	4b23      	ldr	r3, [pc, #140]	; (8004dc4 <_svfiprintf_r+0x1f4>)
 8004d36:	bb1b      	cbnz	r3, 8004d80 <_svfiprintf_r+0x1b0>
 8004d38:	9b03      	ldr	r3, [sp, #12]
 8004d3a:	3307      	adds	r3, #7
 8004d3c:	f023 0307 	bic.w	r3, r3, #7
 8004d40:	3308      	adds	r3, #8
 8004d42:	9303      	str	r3, [sp, #12]
 8004d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d46:	4433      	add	r3, r6
 8004d48:	9309      	str	r3, [sp, #36]	; 0x24
 8004d4a:	e768      	b.n	8004c1e <_svfiprintf_r+0x4e>
 8004d4c:	460c      	mov	r4, r1
 8004d4e:	2001      	movs	r0, #1
 8004d50:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d54:	e7a6      	b.n	8004ca4 <_svfiprintf_r+0xd4>
 8004d56:	2300      	movs	r3, #0
 8004d58:	f04f 0c0a 	mov.w	ip, #10
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	3401      	adds	r4, #1
 8004d60:	9305      	str	r3, [sp, #20]
 8004d62:	4620      	mov	r0, r4
 8004d64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d68:	3a30      	subs	r2, #48	; 0x30
 8004d6a:	2a09      	cmp	r2, #9
 8004d6c:	d903      	bls.n	8004d76 <_svfiprintf_r+0x1a6>
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0c6      	beq.n	8004d00 <_svfiprintf_r+0x130>
 8004d72:	9105      	str	r1, [sp, #20]
 8004d74:	e7c4      	b.n	8004d00 <_svfiprintf_r+0x130>
 8004d76:	4604      	mov	r4, r0
 8004d78:	2301      	movs	r3, #1
 8004d7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d7e:	e7f0      	b.n	8004d62 <_svfiprintf_r+0x192>
 8004d80:	ab03      	add	r3, sp, #12
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	462a      	mov	r2, r5
 8004d86:	4638      	mov	r0, r7
 8004d88:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <_svfiprintf_r+0x1f8>)
 8004d8a:	a904      	add	r1, sp, #16
 8004d8c:	f3af 8000 	nop.w
 8004d90:	1c42      	adds	r2, r0, #1
 8004d92:	4606      	mov	r6, r0
 8004d94:	d1d6      	bne.n	8004d44 <_svfiprintf_r+0x174>
 8004d96:	89ab      	ldrh	r3, [r5, #12]
 8004d98:	065b      	lsls	r3, r3, #25
 8004d9a:	f53f af2d 	bmi.w	8004bf8 <_svfiprintf_r+0x28>
 8004d9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004da0:	b01d      	add	sp, #116	; 0x74
 8004da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004da6:	ab03      	add	r3, sp, #12
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	462a      	mov	r2, r5
 8004dac:	4638      	mov	r0, r7
 8004dae:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <_svfiprintf_r+0x1f8>)
 8004db0:	a904      	add	r1, sp, #16
 8004db2:	f000 f87d 	bl	8004eb0 <_printf_i>
 8004db6:	e7eb      	b.n	8004d90 <_svfiprintf_r+0x1c0>
 8004db8:	0800697a 	.word	0x0800697a
 8004dbc:	08006980 	.word	0x08006980
 8004dc0:	08006984 	.word	0x08006984
 8004dc4:	00000000 	.word	0x00000000
 8004dc8:	08004b1d 	.word	0x08004b1d

08004dcc <_printf_common>:
 8004dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd0:	4616      	mov	r6, r2
 8004dd2:	4699      	mov	r9, r3
 8004dd4:	688a      	ldr	r2, [r1, #8]
 8004dd6:	690b      	ldr	r3, [r1, #16]
 8004dd8:	4607      	mov	r7, r0
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	bfb8      	it	lt
 8004dde:	4613      	movlt	r3, r2
 8004de0:	6033      	str	r3, [r6, #0]
 8004de2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004de6:	460c      	mov	r4, r1
 8004de8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004dec:	b10a      	cbz	r2, 8004df2 <_printf_common+0x26>
 8004dee:	3301      	adds	r3, #1
 8004df0:	6033      	str	r3, [r6, #0]
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	0699      	lsls	r1, r3, #26
 8004df6:	bf42      	ittt	mi
 8004df8:	6833      	ldrmi	r3, [r6, #0]
 8004dfa:	3302      	addmi	r3, #2
 8004dfc:	6033      	strmi	r3, [r6, #0]
 8004dfe:	6825      	ldr	r5, [r4, #0]
 8004e00:	f015 0506 	ands.w	r5, r5, #6
 8004e04:	d106      	bne.n	8004e14 <_printf_common+0x48>
 8004e06:	f104 0a19 	add.w	sl, r4, #25
 8004e0a:	68e3      	ldr	r3, [r4, #12]
 8004e0c:	6832      	ldr	r2, [r6, #0]
 8004e0e:	1a9b      	subs	r3, r3, r2
 8004e10:	42ab      	cmp	r3, r5
 8004e12:	dc2b      	bgt.n	8004e6c <_printf_common+0xa0>
 8004e14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e18:	1e13      	subs	r3, r2, #0
 8004e1a:	6822      	ldr	r2, [r4, #0]
 8004e1c:	bf18      	it	ne
 8004e1e:	2301      	movne	r3, #1
 8004e20:	0692      	lsls	r2, r2, #26
 8004e22:	d430      	bmi.n	8004e86 <_printf_common+0xba>
 8004e24:	4649      	mov	r1, r9
 8004e26:	4638      	mov	r0, r7
 8004e28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e2c:	47c0      	blx	r8
 8004e2e:	3001      	adds	r0, #1
 8004e30:	d023      	beq.n	8004e7a <_printf_common+0xae>
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	6922      	ldr	r2, [r4, #16]
 8004e36:	f003 0306 	and.w	r3, r3, #6
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	bf14      	ite	ne
 8004e3e:	2500      	movne	r5, #0
 8004e40:	6833      	ldreq	r3, [r6, #0]
 8004e42:	f04f 0600 	mov.w	r6, #0
 8004e46:	bf08      	it	eq
 8004e48:	68e5      	ldreq	r5, [r4, #12]
 8004e4a:	f104 041a 	add.w	r4, r4, #26
 8004e4e:	bf08      	it	eq
 8004e50:	1aed      	subeq	r5, r5, r3
 8004e52:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004e56:	bf08      	it	eq
 8004e58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	bfc4      	itt	gt
 8004e60:	1a9b      	subgt	r3, r3, r2
 8004e62:	18ed      	addgt	r5, r5, r3
 8004e64:	42b5      	cmp	r5, r6
 8004e66:	d11a      	bne.n	8004e9e <_printf_common+0xd2>
 8004e68:	2000      	movs	r0, #0
 8004e6a:	e008      	b.n	8004e7e <_printf_common+0xb2>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	4652      	mov	r2, sl
 8004e70:	4649      	mov	r1, r9
 8004e72:	4638      	mov	r0, r7
 8004e74:	47c0      	blx	r8
 8004e76:	3001      	adds	r0, #1
 8004e78:	d103      	bne.n	8004e82 <_printf_common+0xb6>
 8004e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e82:	3501      	adds	r5, #1
 8004e84:	e7c1      	b.n	8004e0a <_printf_common+0x3e>
 8004e86:	2030      	movs	r0, #48	; 0x30
 8004e88:	18e1      	adds	r1, r4, r3
 8004e8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e94:	4422      	add	r2, r4
 8004e96:	3302      	adds	r3, #2
 8004e98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e9c:	e7c2      	b.n	8004e24 <_printf_common+0x58>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	4622      	mov	r2, r4
 8004ea2:	4649      	mov	r1, r9
 8004ea4:	4638      	mov	r0, r7
 8004ea6:	47c0      	blx	r8
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	d0e6      	beq.n	8004e7a <_printf_common+0xae>
 8004eac:	3601      	adds	r6, #1
 8004eae:	e7d9      	b.n	8004e64 <_printf_common+0x98>

08004eb0 <_printf_i>:
 8004eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb4:	7e0f      	ldrb	r7, [r1, #24]
 8004eb6:	4691      	mov	r9, r2
 8004eb8:	2f78      	cmp	r7, #120	; 0x78
 8004eba:	4680      	mov	r8, r0
 8004ebc:	460c      	mov	r4, r1
 8004ebe:	469a      	mov	sl, r3
 8004ec0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ec2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ec6:	d807      	bhi.n	8004ed8 <_printf_i+0x28>
 8004ec8:	2f62      	cmp	r7, #98	; 0x62
 8004eca:	d80a      	bhi.n	8004ee2 <_printf_i+0x32>
 8004ecc:	2f00      	cmp	r7, #0
 8004ece:	f000 80d5 	beq.w	800507c <_printf_i+0x1cc>
 8004ed2:	2f58      	cmp	r7, #88	; 0x58
 8004ed4:	f000 80c1 	beq.w	800505a <_printf_i+0x1aa>
 8004ed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004edc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ee0:	e03a      	b.n	8004f58 <_printf_i+0xa8>
 8004ee2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ee6:	2b15      	cmp	r3, #21
 8004ee8:	d8f6      	bhi.n	8004ed8 <_printf_i+0x28>
 8004eea:	a101      	add	r1, pc, #4	; (adr r1, 8004ef0 <_printf_i+0x40>)
 8004eec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ef0:	08004f49 	.word	0x08004f49
 8004ef4:	08004f5d 	.word	0x08004f5d
 8004ef8:	08004ed9 	.word	0x08004ed9
 8004efc:	08004ed9 	.word	0x08004ed9
 8004f00:	08004ed9 	.word	0x08004ed9
 8004f04:	08004ed9 	.word	0x08004ed9
 8004f08:	08004f5d 	.word	0x08004f5d
 8004f0c:	08004ed9 	.word	0x08004ed9
 8004f10:	08004ed9 	.word	0x08004ed9
 8004f14:	08004ed9 	.word	0x08004ed9
 8004f18:	08004ed9 	.word	0x08004ed9
 8004f1c:	08005063 	.word	0x08005063
 8004f20:	08004f89 	.word	0x08004f89
 8004f24:	0800501d 	.word	0x0800501d
 8004f28:	08004ed9 	.word	0x08004ed9
 8004f2c:	08004ed9 	.word	0x08004ed9
 8004f30:	08005085 	.word	0x08005085
 8004f34:	08004ed9 	.word	0x08004ed9
 8004f38:	08004f89 	.word	0x08004f89
 8004f3c:	08004ed9 	.word	0x08004ed9
 8004f40:	08004ed9 	.word	0x08004ed9
 8004f44:	08005025 	.word	0x08005025
 8004f48:	682b      	ldr	r3, [r5, #0]
 8004f4a:	1d1a      	adds	r2, r3, #4
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	602a      	str	r2, [r5, #0]
 8004f50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e0a0      	b.n	800509e <_printf_i+0x1ee>
 8004f5c:	6820      	ldr	r0, [r4, #0]
 8004f5e:	682b      	ldr	r3, [r5, #0]
 8004f60:	0607      	lsls	r7, r0, #24
 8004f62:	f103 0104 	add.w	r1, r3, #4
 8004f66:	6029      	str	r1, [r5, #0]
 8004f68:	d501      	bpl.n	8004f6e <_printf_i+0xbe>
 8004f6a:	681e      	ldr	r6, [r3, #0]
 8004f6c:	e003      	b.n	8004f76 <_printf_i+0xc6>
 8004f6e:	0646      	lsls	r6, r0, #25
 8004f70:	d5fb      	bpl.n	8004f6a <_printf_i+0xba>
 8004f72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004f76:	2e00      	cmp	r6, #0
 8004f78:	da03      	bge.n	8004f82 <_printf_i+0xd2>
 8004f7a:	232d      	movs	r3, #45	; 0x2d
 8004f7c:	4276      	negs	r6, r6
 8004f7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f82:	230a      	movs	r3, #10
 8004f84:	4859      	ldr	r0, [pc, #356]	; (80050ec <_printf_i+0x23c>)
 8004f86:	e012      	b.n	8004fae <_printf_i+0xfe>
 8004f88:	682b      	ldr	r3, [r5, #0]
 8004f8a:	6820      	ldr	r0, [r4, #0]
 8004f8c:	1d19      	adds	r1, r3, #4
 8004f8e:	6029      	str	r1, [r5, #0]
 8004f90:	0605      	lsls	r5, r0, #24
 8004f92:	d501      	bpl.n	8004f98 <_printf_i+0xe8>
 8004f94:	681e      	ldr	r6, [r3, #0]
 8004f96:	e002      	b.n	8004f9e <_printf_i+0xee>
 8004f98:	0641      	lsls	r1, r0, #25
 8004f9a:	d5fb      	bpl.n	8004f94 <_printf_i+0xe4>
 8004f9c:	881e      	ldrh	r6, [r3, #0]
 8004f9e:	2f6f      	cmp	r7, #111	; 0x6f
 8004fa0:	bf0c      	ite	eq
 8004fa2:	2308      	moveq	r3, #8
 8004fa4:	230a      	movne	r3, #10
 8004fa6:	4851      	ldr	r0, [pc, #324]	; (80050ec <_printf_i+0x23c>)
 8004fa8:	2100      	movs	r1, #0
 8004faa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fae:	6865      	ldr	r5, [r4, #4]
 8004fb0:	2d00      	cmp	r5, #0
 8004fb2:	bfa8      	it	ge
 8004fb4:	6821      	ldrge	r1, [r4, #0]
 8004fb6:	60a5      	str	r5, [r4, #8]
 8004fb8:	bfa4      	itt	ge
 8004fba:	f021 0104 	bicge.w	r1, r1, #4
 8004fbe:	6021      	strge	r1, [r4, #0]
 8004fc0:	b90e      	cbnz	r6, 8004fc6 <_printf_i+0x116>
 8004fc2:	2d00      	cmp	r5, #0
 8004fc4:	d04b      	beq.n	800505e <_printf_i+0x1ae>
 8004fc6:	4615      	mov	r5, r2
 8004fc8:	fbb6 f1f3 	udiv	r1, r6, r3
 8004fcc:	fb03 6711 	mls	r7, r3, r1, r6
 8004fd0:	5dc7      	ldrb	r7, [r0, r7]
 8004fd2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004fd6:	4637      	mov	r7, r6
 8004fd8:	42bb      	cmp	r3, r7
 8004fda:	460e      	mov	r6, r1
 8004fdc:	d9f4      	bls.n	8004fc8 <_printf_i+0x118>
 8004fde:	2b08      	cmp	r3, #8
 8004fe0:	d10b      	bne.n	8004ffa <_printf_i+0x14a>
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	07de      	lsls	r6, r3, #31
 8004fe6:	d508      	bpl.n	8004ffa <_printf_i+0x14a>
 8004fe8:	6923      	ldr	r3, [r4, #16]
 8004fea:	6861      	ldr	r1, [r4, #4]
 8004fec:	4299      	cmp	r1, r3
 8004fee:	bfde      	ittt	le
 8004ff0:	2330      	movle	r3, #48	; 0x30
 8004ff2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ff6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ffa:	1b52      	subs	r2, r2, r5
 8004ffc:	6122      	str	r2, [r4, #16]
 8004ffe:	464b      	mov	r3, r9
 8005000:	4621      	mov	r1, r4
 8005002:	4640      	mov	r0, r8
 8005004:	f8cd a000 	str.w	sl, [sp]
 8005008:	aa03      	add	r2, sp, #12
 800500a:	f7ff fedf 	bl	8004dcc <_printf_common>
 800500e:	3001      	adds	r0, #1
 8005010:	d14a      	bne.n	80050a8 <_printf_i+0x1f8>
 8005012:	f04f 30ff 	mov.w	r0, #4294967295
 8005016:	b004      	add	sp, #16
 8005018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800501c:	6823      	ldr	r3, [r4, #0]
 800501e:	f043 0320 	orr.w	r3, r3, #32
 8005022:	6023      	str	r3, [r4, #0]
 8005024:	2778      	movs	r7, #120	; 0x78
 8005026:	4832      	ldr	r0, [pc, #200]	; (80050f0 <_printf_i+0x240>)
 8005028:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	6829      	ldr	r1, [r5, #0]
 8005030:	061f      	lsls	r7, r3, #24
 8005032:	f851 6b04 	ldr.w	r6, [r1], #4
 8005036:	d402      	bmi.n	800503e <_printf_i+0x18e>
 8005038:	065f      	lsls	r7, r3, #25
 800503a:	bf48      	it	mi
 800503c:	b2b6      	uxthmi	r6, r6
 800503e:	07df      	lsls	r7, r3, #31
 8005040:	bf48      	it	mi
 8005042:	f043 0320 	orrmi.w	r3, r3, #32
 8005046:	6029      	str	r1, [r5, #0]
 8005048:	bf48      	it	mi
 800504a:	6023      	strmi	r3, [r4, #0]
 800504c:	b91e      	cbnz	r6, 8005056 <_printf_i+0x1a6>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	f023 0320 	bic.w	r3, r3, #32
 8005054:	6023      	str	r3, [r4, #0]
 8005056:	2310      	movs	r3, #16
 8005058:	e7a6      	b.n	8004fa8 <_printf_i+0xf8>
 800505a:	4824      	ldr	r0, [pc, #144]	; (80050ec <_printf_i+0x23c>)
 800505c:	e7e4      	b.n	8005028 <_printf_i+0x178>
 800505e:	4615      	mov	r5, r2
 8005060:	e7bd      	b.n	8004fde <_printf_i+0x12e>
 8005062:	682b      	ldr	r3, [r5, #0]
 8005064:	6826      	ldr	r6, [r4, #0]
 8005066:	1d18      	adds	r0, r3, #4
 8005068:	6961      	ldr	r1, [r4, #20]
 800506a:	6028      	str	r0, [r5, #0]
 800506c:	0635      	lsls	r5, r6, #24
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	d501      	bpl.n	8005076 <_printf_i+0x1c6>
 8005072:	6019      	str	r1, [r3, #0]
 8005074:	e002      	b.n	800507c <_printf_i+0x1cc>
 8005076:	0670      	lsls	r0, r6, #25
 8005078:	d5fb      	bpl.n	8005072 <_printf_i+0x1c2>
 800507a:	8019      	strh	r1, [r3, #0]
 800507c:	2300      	movs	r3, #0
 800507e:	4615      	mov	r5, r2
 8005080:	6123      	str	r3, [r4, #16]
 8005082:	e7bc      	b.n	8004ffe <_printf_i+0x14e>
 8005084:	682b      	ldr	r3, [r5, #0]
 8005086:	2100      	movs	r1, #0
 8005088:	1d1a      	adds	r2, r3, #4
 800508a:	602a      	str	r2, [r5, #0]
 800508c:	681d      	ldr	r5, [r3, #0]
 800508e:	6862      	ldr	r2, [r4, #4]
 8005090:	4628      	mov	r0, r5
 8005092:	f000 f859 	bl	8005148 <memchr>
 8005096:	b108      	cbz	r0, 800509c <_printf_i+0x1ec>
 8005098:	1b40      	subs	r0, r0, r5
 800509a:	6060      	str	r0, [r4, #4]
 800509c:	6863      	ldr	r3, [r4, #4]
 800509e:	6123      	str	r3, [r4, #16]
 80050a0:	2300      	movs	r3, #0
 80050a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050a6:	e7aa      	b.n	8004ffe <_printf_i+0x14e>
 80050a8:	462a      	mov	r2, r5
 80050aa:	4649      	mov	r1, r9
 80050ac:	4640      	mov	r0, r8
 80050ae:	6923      	ldr	r3, [r4, #16]
 80050b0:	47d0      	blx	sl
 80050b2:	3001      	adds	r0, #1
 80050b4:	d0ad      	beq.n	8005012 <_printf_i+0x162>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	079b      	lsls	r3, r3, #30
 80050ba:	d413      	bmi.n	80050e4 <_printf_i+0x234>
 80050bc:	68e0      	ldr	r0, [r4, #12]
 80050be:	9b03      	ldr	r3, [sp, #12]
 80050c0:	4298      	cmp	r0, r3
 80050c2:	bfb8      	it	lt
 80050c4:	4618      	movlt	r0, r3
 80050c6:	e7a6      	b.n	8005016 <_printf_i+0x166>
 80050c8:	2301      	movs	r3, #1
 80050ca:	4632      	mov	r2, r6
 80050cc:	4649      	mov	r1, r9
 80050ce:	4640      	mov	r0, r8
 80050d0:	47d0      	blx	sl
 80050d2:	3001      	adds	r0, #1
 80050d4:	d09d      	beq.n	8005012 <_printf_i+0x162>
 80050d6:	3501      	adds	r5, #1
 80050d8:	68e3      	ldr	r3, [r4, #12]
 80050da:	9903      	ldr	r1, [sp, #12]
 80050dc:	1a5b      	subs	r3, r3, r1
 80050de:	42ab      	cmp	r3, r5
 80050e0:	dcf2      	bgt.n	80050c8 <_printf_i+0x218>
 80050e2:	e7eb      	b.n	80050bc <_printf_i+0x20c>
 80050e4:	2500      	movs	r5, #0
 80050e6:	f104 0619 	add.w	r6, r4, #25
 80050ea:	e7f5      	b.n	80050d8 <_printf_i+0x228>
 80050ec:	0800698b 	.word	0x0800698b
 80050f0:	0800699c 	.word	0x0800699c

080050f4 <memmove>:
 80050f4:	4288      	cmp	r0, r1
 80050f6:	b510      	push	{r4, lr}
 80050f8:	eb01 0402 	add.w	r4, r1, r2
 80050fc:	d902      	bls.n	8005104 <memmove+0x10>
 80050fe:	4284      	cmp	r4, r0
 8005100:	4623      	mov	r3, r4
 8005102:	d807      	bhi.n	8005114 <memmove+0x20>
 8005104:	1e43      	subs	r3, r0, #1
 8005106:	42a1      	cmp	r1, r4
 8005108:	d008      	beq.n	800511c <memmove+0x28>
 800510a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800510e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005112:	e7f8      	b.n	8005106 <memmove+0x12>
 8005114:	4601      	mov	r1, r0
 8005116:	4402      	add	r2, r0
 8005118:	428a      	cmp	r2, r1
 800511a:	d100      	bne.n	800511e <memmove+0x2a>
 800511c:	bd10      	pop	{r4, pc}
 800511e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005122:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005126:	e7f7      	b.n	8005118 <memmove+0x24>

08005128 <_sbrk_r>:
 8005128:	b538      	push	{r3, r4, r5, lr}
 800512a:	2300      	movs	r3, #0
 800512c:	4d05      	ldr	r5, [pc, #20]	; (8005144 <_sbrk_r+0x1c>)
 800512e:	4604      	mov	r4, r0
 8005130:	4608      	mov	r0, r1
 8005132:	602b      	str	r3, [r5, #0]
 8005134:	f7fd fa44 	bl	80025c0 <_sbrk>
 8005138:	1c43      	adds	r3, r0, #1
 800513a:	d102      	bne.n	8005142 <_sbrk_r+0x1a>
 800513c:	682b      	ldr	r3, [r5, #0]
 800513e:	b103      	cbz	r3, 8005142 <_sbrk_r+0x1a>
 8005140:	6023      	str	r3, [r4, #0]
 8005142:	bd38      	pop	{r3, r4, r5, pc}
 8005144:	20000484 	.word	0x20000484

08005148 <memchr>:
 8005148:	4603      	mov	r3, r0
 800514a:	b510      	push	{r4, lr}
 800514c:	b2c9      	uxtb	r1, r1
 800514e:	4402      	add	r2, r0
 8005150:	4293      	cmp	r3, r2
 8005152:	4618      	mov	r0, r3
 8005154:	d101      	bne.n	800515a <memchr+0x12>
 8005156:	2000      	movs	r0, #0
 8005158:	e003      	b.n	8005162 <memchr+0x1a>
 800515a:	7804      	ldrb	r4, [r0, #0]
 800515c:	3301      	adds	r3, #1
 800515e:	428c      	cmp	r4, r1
 8005160:	d1f6      	bne.n	8005150 <memchr+0x8>
 8005162:	bd10      	pop	{r4, pc}

08005164 <memcpy>:
 8005164:	440a      	add	r2, r1
 8005166:	4291      	cmp	r1, r2
 8005168:	f100 33ff 	add.w	r3, r0, #4294967295
 800516c:	d100      	bne.n	8005170 <memcpy+0xc>
 800516e:	4770      	bx	lr
 8005170:	b510      	push	{r4, lr}
 8005172:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005176:	4291      	cmp	r1, r2
 8005178:	f803 4f01 	strb.w	r4, [r3, #1]!
 800517c:	d1f9      	bne.n	8005172 <memcpy+0xe>
 800517e:	bd10      	pop	{r4, pc}

08005180 <_realloc_r>:
 8005180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005184:	4680      	mov	r8, r0
 8005186:	4614      	mov	r4, r2
 8005188:	460e      	mov	r6, r1
 800518a:	b921      	cbnz	r1, 8005196 <_realloc_r+0x16>
 800518c:	4611      	mov	r1, r2
 800518e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005192:	f7ff bc37 	b.w	8004a04 <_malloc_r>
 8005196:	b92a      	cbnz	r2, 80051a4 <_realloc_r+0x24>
 8005198:	f7ff fbcc 	bl	8004934 <_free_r>
 800519c:	4625      	mov	r5, r4
 800519e:	4628      	mov	r0, r5
 80051a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051a4:	f000 f81b 	bl	80051de <_malloc_usable_size_r>
 80051a8:	4284      	cmp	r4, r0
 80051aa:	4607      	mov	r7, r0
 80051ac:	d802      	bhi.n	80051b4 <_realloc_r+0x34>
 80051ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051b2:	d812      	bhi.n	80051da <_realloc_r+0x5a>
 80051b4:	4621      	mov	r1, r4
 80051b6:	4640      	mov	r0, r8
 80051b8:	f7ff fc24 	bl	8004a04 <_malloc_r>
 80051bc:	4605      	mov	r5, r0
 80051be:	2800      	cmp	r0, #0
 80051c0:	d0ed      	beq.n	800519e <_realloc_r+0x1e>
 80051c2:	42bc      	cmp	r4, r7
 80051c4:	4622      	mov	r2, r4
 80051c6:	4631      	mov	r1, r6
 80051c8:	bf28      	it	cs
 80051ca:	463a      	movcs	r2, r7
 80051cc:	f7ff ffca 	bl	8005164 <memcpy>
 80051d0:	4631      	mov	r1, r6
 80051d2:	4640      	mov	r0, r8
 80051d4:	f7ff fbae 	bl	8004934 <_free_r>
 80051d8:	e7e1      	b.n	800519e <_realloc_r+0x1e>
 80051da:	4635      	mov	r5, r6
 80051dc:	e7df      	b.n	800519e <_realloc_r+0x1e>

080051de <_malloc_usable_size_r>:
 80051de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051e2:	1f18      	subs	r0, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	bfbc      	itt	lt
 80051e8:	580b      	ldrlt	r3, [r1, r0]
 80051ea:	18c0      	addlt	r0, r0, r3
 80051ec:	4770      	bx	lr

080051ee <atan2>:
 80051ee:	f000 bc93 	b.w	8005b18 <__ieee754_atan2>

080051f2 <sqrt>:
 80051f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f4:	4606      	mov	r6, r0
 80051f6:	460f      	mov	r7, r1
 80051f8:	f000 fa3c 	bl	8005674 <__ieee754_sqrt>
 80051fc:	4632      	mov	r2, r6
 80051fe:	4604      	mov	r4, r0
 8005200:	460d      	mov	r5, r1
 8005202:	463b      	mov	r3, r7
 8005204:	4630      	mov	r0, r6
 8005206:	4639      	mov	r1, r7
 8005208:	f7fb fc00 	bl	8000a0c <__aeabi_dcmpun>
 800520c:	b990      	cbnz	r0, 8005234 <sqrt+0x42>
 800520e:	2200      	movs	r2, #0
 8005210:	2300      	movs	r3, #0
 8005212:	4630      	mov	r0, r6
 8005214:	4639      	mov	r1, r7
 8005216:	f7fb fbd1 	bl	80009bc <__aeabi_dcmplt>
 800521a:	b158      	cbz	r0, 8005234 <sqrt+0x42>
 800521c:	f7ff fb5e 	bl	80048dc <__errno>
 8005220:	2321      	movs	r3, #33	; 0x21
 8005222:	2200      	movs	r2, #0
 8005224:	6003      	str	r3, [r0, #0]
 8005226:	2300      	movs	r3, #0
 8005228:	4610      	mov	r0, r2
 800522a:	4619      	mov	r1, r3
 800522c:	f7fb fa7e 	bl	800072c <__aeabi_ddiv>
 8005230:	4604      	mov	r4, r0
 8005232:	460d      	mov	r5, r1
 8005234:	4620      	mov	r0, r4
 8005236:	4629      	mov	r1, r5
 8005238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800523a:	0000      	movs	r0, r0
 800523c:	0000      	movs	r0, r0
	...

08005240 <atan>:
 8005240:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005244:	4bb6      	ldr	r3, [pc, #728]	; (8005520 <atan+0x2e0>)
 8005246:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800524a:	429e      	cmp	r6, r3
 800524c:	4604      	mov	r4, r0
 800524e:	460d      	mov	r5, r1
 8005250:	468b      	mov	fp, r1
 8005252:	dd17      	ble.n	8005284 <atan+0x44>
 8005254:	4bb3      	ldr	r3, [pc, #716]	; (8005524 <atan+0x2e4>)
 8005256:	429e      	cmp	r6, r3
 8005258:	dc01      	bgt.n	800525e <atan+0x1e>
 800525a:	d109      	bne.n	8005270 <atan+0x30>
 800525c:	b140      	cbz	r0, 8005270 <atan+0x30>
 800525e:	4622      	mov	r2, r4
 8005260:	462b      	mov	r3, r5
 8005262:	4620      	mov	r0, r4
 8005264:	4629      	mov	r1, r5
 8005266:	f7fa ff81 	bl	800016c <__adddf3>
 800526a:	4604      	mov	r4, r0
 800526c:	460d      	mov	r5, r1
 800526e:	e005      	b.n	800527c <atan+0x3c>
 8005270:	f1bb 0f00 	cmp.w	fp, #0
 8005274:	4cac      	ldr	r4, [pc, #688]	; (8005528 <atan+0x2e8>)
 8005276:	f300 8121 	bgt.w	80054bc <atan+0x27c>
 800527a:	4dac      	ldr	r5, [pc, #688]	; (800552c <atan+0x2ec>)
 800527c:	4620      	mov	r0, r4
 800527e:	4629      	mov	r1, r5
 8005280:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005284:	4baa      	ldr	r3, [pc, #680]	; (8005530 <atan+0x2f0>)
 8005286:	429e      	cmp	r6, r3
 8005288:	dc11      	bgt.n	80052ae <atan+0x6e>
 800528a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800528e:	429e      	cmp	r6, r3
 8005290:	dc0a      	bgt.n	80052a8 <atan+0x68>
 8005292:	a38b      	add	r3, pc, #556	; (adr r3, 80054c0 <atan+0x280>)
 8005294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005298:	f7fa ff68 	bl	800016c <__adddf3>
 800529c:	2200      	movs	r2, #0
 800529e:	4ba5      	ldr	r3, [pc, #660]	; (8005534 <atan+0x2f4>)
 80052a0:	f7fb fbaa 	bl	80009f8 <__aeabi_dcmpgt>
 80052a4:	2800      	cmp	r0, #0
 80052a6:	d1e9      	bne.n	800527c <atan+0x3c>
 80052a8:	f04f 3aff 	mov.w	sl, #4294967295
 80052ac:	e027      	b.n	80052fe <atan+0xbe>
 80052ae:	f000 f997 	bl	80055e0 <fabs>
 80052b2:	4ba1      	ldr	r3, [pc, #644]	; (8005538 <atan+0x2f8>)
 80052b4:	4604      	mov	r4, r0
 80052b6:	429e      	cmp	r6, r3
 80052b8:	460d      	mov	r5, r1
 80052ba:	f300 80b8 	bgt.w	800542e <atan+0x1ee>
 80052be:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80052c2:	429e      	cmp	r6, r3
 80052c4:	f300 809c 	bgt.w	8005400 <atan+0x1c0>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	f7fa ff4e 	bl	800016c <__adddf3>
 80052d0:	2200      	movs	r2, #0
 80052d2:	4b98      	ldr	r3, [pc, #608]	; (8005534 <atan+0x2f4>)
 80052d4:	f7fa ff48 	bl	8000168 <__aeabi_dsub>
 80052d8:	2200      	movs	r2, #0
 80052da:	4606      	mov	r6, r0
 80052dc:	460f      	mov	r7, r1
 80052de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052e2:	4620      	mov	r0, r4
 80052e4:	4629      	mov	r1, r5
 80052e6:	f7fa ff41 	bl	800016c <__adddf3>
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	4630      	mov	r0, r6
 80052f0:	4639      	mov	r1, r7
 80052f2:	f7fb fa1b 	bl	800072c <__aeabi_ddiv>
 80052f6:	f04f 0a00 	mov.w	sl, #0
 80052fa:	4604      	mov	r4, r0
 80052fc:	460d      	mov	r5, r1
 80052fe:	4622      	mov	r2, r4
 8005300:	462b      	mov	r3, r5
 8005302:	4620      	mov	r0, r4
 8005304:	4629      	mov	r1, r5
 8005306:	f7fb f8e7 	bl	80004d8 <__aeabi_dmul>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	4680      	mov	r8, r0
 8005310:	4689      	mov	r9, r1
 8005312:	f7fb f8e1 	bl	80004d8 <__aeabi_dmul>
 8005316:	a36c      	add	r3, pc, #432	; (adr r3, 80054c8 <atan+0x288>)
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	4606      	mov	r6, r0
 800531e:	460f      	mov	r7, r1
 8005320:	f7fb f8da 	bl	80004d8 <__aeabi_dmul>
 8005324:	a36a      	add	r3, pc, #424	; (adr r3, 80054d0 <atan+0x290>)
 8005326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532a:	f7fa ff1f 	bl	800016c <__adddf3>
 800532e:	4632      	mov	r2, r6
 8005330:	463b      	mov	r3, r7
 8005332:	f7fb f8d1 	bl	80004d8 <__aeabi_dmul>
 8005336:	a368      	add	r3, pc, #416	; (adr r3, 80054d8 <atan+0x298>)
 8005338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533c:	f7fa ff16 	bl	800016c <__adddf3>
 8005340:	4632      	mov	r2, r6
 8005342:	463b      	mov	r3, r7
 8005344:	f7fb f8c8 	bl	80004d8 <__aeabi_dmul>
 8005348:	a365      	add	r3, pc, #404	; (adr r3, 80054e0 <atan+0x2a0>)
 800534a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534e:	f7fa ff0d 	bl	800016c <__adddf3>
 8005352:	4632      	mov	r2, r6
 8005354:	463b      	mov	r3, r7
 8005356:	f7fb f8bf 	bl	80004d8 <__aeabi_dmul>
 800535a:	a363      	add	r3, pc, #396	; (adr r3, 80054e8 <atan+0x2a8>)
 800535c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005360:	f7fa ff04 	bl	800016c <__adddf3>
 8005364:	4632      	mov	r2, r6
 8005366:	463b      	mov	r3, r7
 8005368:	f7fb f8b6 	bl	80004d8 <__aeabi_dmul>
 800536c:	a360      	add	r3, pc, #384	; (adr r3, 80054f0 <atan+0x2b0>)
 800536e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005372:	f7fa fefb 	bl	800016c <__adddf3>
 8005376:	4642      	mov	r2, r8
 8005378:	464b      	mov	r3, r9
 800537a:	f7fb f8ad 	bl	80004d8 <__aeabi_dmul>
 800537e:	a35e      	add	r3, pc, #376	; (adr r3, 80054f8 <atan+0x2b8>)
 8005380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005384:	4680      	mov	r8, r0
 8005386:	4689      	mov	r9, r1
 8005388:	4630      	mov	r0, r6
 800538a:	4639      	mov	r1, r7
 800538c:	f7fb f8a4 	bl	80004d8 <__aeabi_dmul>
 8005390:	a35b      	add	r3, pc, #364	; (adr r3, 8005500 <atan+0x2c0>)
 8005392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005396:	f7fa fee7 	bl	8000168 <__aeabi_dsub>
 800539a:	4632      	mov	r2, r6
 800539c:	463b      	mov	r3, r7
 800539e:	f7fb f89b 	bl	80004d8 <__aeabi_dmul>
 80053a2:	a359      	add	r3, pc, #356	; (adr r3, 8005508 <atan+0x2c8>)
 80053a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a8:	f7fa fede 	bl	8000168 <__aeabi_dsub>
 80053ac:	4632      	mov	r2, r6
 80053ae:	463b      	mov	r3, r7
 80053b0:	f7fb f892 	bl	80004d8 <__aeabi_dmul>
 80053b4:	a356      	add	r3, pc, #344	; (adr r3, 8005510 <atan+0x2d0>)
 80053b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ba:	f7fa fed5 	bl	8000168 <__aeabi_dsub>
 80053be:	4632      	mov	r2, r6
 80053c0:	463b      	mov	r3, r7
 80053c2:	f7fb f889 	bl	80004d8 <__aeabi_dmul>
 80053c6:	a354      	add	r3, pc, #336	; (adr r3, 8005518 <atan+0x2d8>)
 80053c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053cc:	f7fa fecc 	bl	8000168 <__aeabi_dsub>
 80053d0:	4632      	mov	r2, r6
 80053d2:	463b      	mov	r3, r7
 80053d4:	f7fb f880 	bl	80004d8 <__aeabi_dmul>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	4640      	mov	r0, r8
 80053de:	4649      	mov	r1, r9
 80053e0:	f7fa fec4 	bl	800016c <__adddf3>
 80053e4:	4622      	mov	r2, r4
 80053e6:	462b      	mov	r3, r5
 80053e8:	f7fb f876 	bl	80004d8 <__aeabi_dmul>
 80053ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	d144      	bne.n	8005480 <atan+0x240>
 80053f6:	4620      	mov	r0, r4
 80053f8:	4629      	mov	r1, r5
 80053fa:	f7fa feb5 	bl	8000168 <__aeabi_dsub>
 80053fe:	e734      	b.n	800526a <atan+0x2a>
 8005400:	2200      	movs	r2, #0
 8005402:	4b4c      	ldr	r3, [pc, #304]	; (8005534 <atan+0x2f4>)
 8005404:	f7fa feb0 	bl	8000168 <__aeabi_dsub>
 8005408:	2200      	movs	r2, #0
 800540a:	4606      	mov	r6, r0
 800540c:	460f      	mov	r7, r1
 800540e:	4620      	mov	r0, r4
 8005410:	4629      	mov	r1, r5
 8005412:	4b48      	ldr	r3, [pc, #288]	; (8005534 <atan+0x2f4>)
 8005414:	f7fa feaa 	bl	800016c <__adddf3>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4630      	mov	r0, r6
 800541e:	4639      	mov	r1, r7
 8005420:	f7fb f984 	bl	800072c <__aeabi_ddiv>
 8005424:	f04f 0a01 	mov.w	sl, #1
 8005428:	4604      	mov	r4, r0
 800542a:	460d      	mov	r5, r1
 800542c:	e767      	b.n	80052fe <atan+0xbe>
 800542e:	4b43      	ldr	r3, [pc, #268]	; (800553c <atan+0x2fc>)
 8005430:	429e      	cmp	r6, r3
 8005432:	da1a      	bge.n	800546a <atan+0x22a>
 8005434:	2200      	movs	r2, #0
 8005436:	4b42      	ldr	r3, [pc, #264]	; (8005540 <atan+0x300>)
 8005438:	f7fa fe96 	bl	8000168 <__aeabi_dsub>
 800543c:	2200      	movs	r2, #0
 800543e:	4606      	mov	r6, r0
 8005440:	460f      	mov	r7, r1
 8005442:	4620      	mov	r0, r4
 8005444:	4629      	mov	r1, r5
 8005446:	4b3e      	ldr	r3, [pc, #248]	; (8005540 <atan+0x300>)
 8005448:	f7fb f846 	bl	80004d8 <__aeabi_dmul>
 800544c:	2200      	movs	r2, #0
 800544e:	4b39      	ldr	r3, [pc, #228]	; (8005534 <atan+0x2f4>)
 8005450:	f7fa fe8c 	bl	800016c <__adddf3>
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	4630      	mov	r0, r6
 800545a:	4639      	mov	r1, r7
 800545c:	f7fb f966 	bl	800072c <__aeabi_ddiv>
 8005460:	f04f 0a02 	mov.w	sl, #2
 8005464:	4604      	mov	r4, r0
 8005466:	460d      	mov	r5, r1
 8005468:	e749      	b.n	80052fe <atan+0xbe>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	2000      	movs	r0, #0
 8005470:	4934      	ldr	r1, [pc, #208]	; (8005544 <atan+0x304>)
 8005472:	f7fb f95b 	bl	800072c <__aeabi_ddiv>
 8005476:	f04f 0a03 	mov.w	sl, #3
 800547a:	4604      	mov	r4, r0
 800547c:	460d      	mov	r5, r1
 800547e:	e73e      	b.n	80052fe <atan+0xbe>
 8005480:	4b31      	ldr	r3, [pc, #196]	; (8005548 <atan+0x308>)
 8005482:	4e32      	ldr	r6, [pc, #200]	; (800554c <atan+0x30c>)
 8005484:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548c:	f7fa fe6c 	bl	8000168 <__aeabi_dsub>
 8005490:	4622      	mov	r2, r4
 8005492:	462b      	mov	r3, r5
 8005494:	f7fa fe68 	bl	8000168 <__aeabi_dsub>
 8005498:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	e9d6 0100 	ldrd	r0, r1, [r6]
 80054a4:	f7fa fe60 	bl	8000168 <__aeabi_dsub>
 80054a8:	f1bb 0f00 	cmp.w	fp, #0
 80054ac:	4604      	mov	r4, r0
 80054ae:	460d      	mov	r5, r1
 80054b0:	f6bf aee4 	bge.w	800527c <atan+0x3c>
 80054b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054b8:	461d      	mov	r5, r3
 80054ba:	e6df      	b.n	800527c <atan+0x3c>
 80054bc:	4d24      	ldr	r5, [pc, #144]	; (8005550 <atan+0x310>)
 80054be:	e6dd      	b.n	800527c <atan+0x3c>
 80054c0:	8800759c 	.word	0x8800759c
 80054c4:	7e37e43c 	.word	0x7e37e43c
 80054c8:	e322da11 	.word	0xe322da11
 80054cc:	3f90ad3a 	.word	0x3f90ad3a
 80054d0:	24760deb 	.word	0x24760deb
 80054d4:	3fa97b4b 	.word	0x3fa97b4b
 80054d8:	a0d03d51 	.word	0xa0d03d51
 80054dc:	3fb10d66 	.word	0x3fb10d66
 80054e0:	c54c206e 	.word	0xc54c206e
 80054e4:	3fb745cd 	.word	0x3fb745cd
 80054e8:	920083ff 	.word	0x920083ff
 80054ec:	3fc24924 	.word	0x3fc24924
 80054f0:	5555550d 	.word	0x5555550d
 80054f4:	3fd55555 	.word	0x3fd55555
 80054f8:	2c6a6c2f 	.word	0x2c6a6c2f
 80054fc:	bfa2b444 	.word	0xbfa2b444
 8005500:	52defd9a 	.word	0x52defd9a
 8005504:	3fadde2d 	.word	0x3fadde2d
 8005508:	af749a6d 	.word	0xaf749a6d
 800550c:	3fb3b0f2 	.word	0x3fb3b0f2
 8005510:	fe231671 	.word	0xfe231671
 8005514:	3fbc71c6 	.word	0x3fbc71c6
 8005518:	9998ebc4 	.word	0x9998ebc4
 800551c:	3fc99999 	.word	0x3fc99999
 8005520:	440fffff 	.word	0x440fffff
 8005524:	7ff00000 	.word	0x7ff00000
 8005528:	54442d18 	.word	0x54442d18
 800552c:	bff921fb 	.word	0xbff921fb
 8005530:	3fdbffff 	.word	0x3fdbffff
 8005534:	3ff00000 	.word	0x3ff00000
 8005538:	3ff2ffff 	.word	0x3ff2ffff
 800553c:	40038000 	.word	0x40038000
 8005540:	3ff80000 	.word	0x3ff80000
 8005544:	bff00000 	.word	0xbff00000
 8005548:	080069d0 	.word	0x080069d0
 800554c:	080069b0 	.word	0x080069b0
 8005550:	3ff921fb 	.word	0x3ff921fb

08005554 <cos>:
 8005554:	b530      	push	{r4, r5, lr}
 8005556:	4a20      	ldr	r2, [pc, #128]	; (80055d8 <cos+0x84>)
 8005558:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800555c:	4293      	cmp	r3, r2
 800555e:	b087      	sub	sp, #28
 8005560:	dc06      	bgt.n	8005570 <cos+0x1c>
 8005562:	2200      	movs	r2, #0
 8005564:	2300      	movs	r3, #0
 8005566:	b007      	add	sp, #28
 8005568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800556c:	f000 b95c 	b.w	8005828 <__kernel_cos>
 8005570:	4a1a      	ldr	r2, [pc, #104]	; (80055dc <cos+0x88>)
 8005572:	4293      	cmp	r3, r2
 8005574:	dd05      	ble.n	8005582 <cos+0x2e>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	f7fa fdf5 	bl	8000168 <__aeabi_dsub>
 800557e:	b007      	add	sp, #28
 8005580:	bd30      	pop	{r4, r5, pc}
 8005582:	aa02      	add	r2, sp, #8
 8005584:	f000 fb98 	bl	8005cb8 <__ieee754_rem_pio2>
 8005588:	f000 0003 	and.w	r0, r0, #3
 800558c:	2801      	cmp	r0, #1
 800558e:	d009      	beq.n	80055a4 <cos+0x50>
 8005590:	2802      	cmp	r0, #2
 8005592:	d011      	beq.n	80055b8 <cos+0x64>
 8005594:	b9b8      	cbnz	r0, 80055c6 <cos+0x72>
 8005596:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800559a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800559e:	f000 f943 	bl	8005828 <__kernel_cos>
 80055a2:	e7ec      	b.n	800557e <cos+0x2a>
 80055a4:	9000      	str	r0, [sp, #0]
 80055a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055ae:	f000 f9fb 	bl	80059a8 <__kernel_sin>
 80055b2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80055b6:	e7e2      	b.n	800557e <cos+0x2a>
 80055b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055c0:	f000 f932 	bl	8005828 <__kernel_cos>
 80055c4:	e7f5      	b.n	80055b2 <cos+0x5e>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055d2:	f000 f9e9 	bl	80059a8 <__kernel_sin>
 80055d6:	e7d2      	b.n	800557e <cos+0x2a>
 80055d8:	3fe921fb 	.word	0x3fe921fb
 80055dc:	7fefffff 	.word	0x7fefffff

080055e0 <fabs>:
 80055e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80055e4:	4619      	mov	r1, r3
 80055e6:	4770      	bx	lr

080055e8 <sin>:
 80055e8:	b530      	push	{r4, r5, lr}
 80055ea:	4a20      	ldr	r2, [pc, #128]	; (800566c <sin+0x84>)
 80055ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80055f0:	4293      	cmp	r3, r2
 80055f2:	b087      	sub	sp, #28
 80055f4:	dc06      	bgt.n	8005604 <sin+0x1c>
 80055f6:	2300      	movs	r3, #0
 80055f8:	2200      	movs	r2, #0
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	2300      	movs	r3, #0
 80055fe:	f000 f9d3 	bl	80059a8 <__kernel_sin>
 8005602:	e006      	b.n	8005612 <sin+0x2a>
 8005604:	4a1a      	ldr	r2, [pc, #104]	; (8005670 <sin+0x88>)
 8005606:	4293      	cmp	r3, r2
 8005608:	dd05      	ble.n	8005616 <sin+0x2e>
 800560a:	4602      	mov	r2, r0
 800560c:	460b      	mov	r3, r1
 800560e:	f7fa fdab 	bl	8000168 <__aeabi_dsub>
 8005612:	b007      	add	sp, #28
 8005614:	bd30      	pop	{r4, r5, pc}
 8005616:	aa02      	add	r2, sp, #8
 8005618:	f000 fb4e 	bl	8005cb8 <__ieee754_rem_pio2>
 800561c:	f000 0003 	and.w	r0, r0, #3
 8005620:	2801      	cmp	r0, #1
 8005622:	d009      	beq.n	8005638 <sin+0x50>
 8005624:	2802      	cmp	r0, #2
 8005626:	d00e      	beq.n	8005646 <sin+0x5e>
 8005628:	b9c0      	cbnz	r0, 800565c <sin+0x74>
 800562a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800562e:	2301      	movs	r3, #1
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005636:	e7e2      	b.n	80055fe <sin+0x16>
 8005638:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800563c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005640:	f000 f8f2 	bl	8005828 <__kernel_cos>
 8005644:	e7e5      	b.n	8005612 <sin+0x2a>
 8005646:	2301      	movs	r3, #1
 8005648:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005652:	f000 f9a9 	bl	80059a8 <__kernel_sin>
 8005656:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800565a:	e7da      	b.n	8005612 <sin+0x2a>
 800565c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005664:	f000 f8e0 	bl	8005828 <__kernel_cos>
 8005668:	e7f5      	b.n	8005656 <sin+0x6e>
 800566a:	bf00      	nop
 800566c:	3fe921fb 	.word	0x3fe921fb
 8005670:	7fefffff 	.word	0x7fefffff

08005674 <__ieee754_sqrt>:
 8005674:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8005818 <__ieee754_sqrt+0x1a4>
 8005678:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567c:	ea3c 0c01 	bics.w	ip, ip, r1
 8005680:	460b      	mov	r3, r1
 8005682:	4606      	mov	r6, r0
 8005684:	460d      	mov	r5, r1
 8005686:	460a      	mov	r2, r1
 8005688:	4604      	mov	r4, r0
 800568a:	d10e      	bne.n	80056aa <__ieee754_sqrt+0x36>
 800568c:	4602      	mov	r2, r0
 800568e:	f7fa ff23 	bl	80004d8 <__aeabi_dmul>
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	4630      	mov	r0, r6
 8005698:	4629      	mov	r1, r5
 800569a:	f7fa fd67 	bl	800016c <__adddf3>
 800569e:	4606      	mov	r6, r0
 80056a0:	460d      	mov	r5, r1
 80056a2:	4630      	mov	r0, r6
 80056a4:	4629      	mov	r1, r5
 80056a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056aa:	2900      	cmp	r1, #0
 80056ac:	dc0d      	bgt.n	80056ca <__ieee754_sqrt+0x56>
 80056ae:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80056b2:	ea5c 0c00 	orrs.w	ip, ip, r0
 80056b6:	d0f4      	beq.n	80056a2 <__ieee754_sqrt+0x2e>
 80056b8:	b139      	cbz	r1, 80056ca <__ieee754_sqrt+0x56>
 80056ba:	4602      	mov	r2, r0
 80056bc:	f7fa fd54 	bl	8000168 <__aeabi_dsub>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	f7fb f832 	bl	800072c <__aeabi_ddiv>
 80056c8:	e7e9      	b.n	800569e <__ieee754_sqrt+0x2a>
 80056ca:	1512      	asrs	r2, r2, #20
 80056cc:	f000 8089 	beq.w	80057e2 <__ieee754_sqrt+0x16e>
 80056d0:	2500      	movs	r5, #0
 80056d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056d6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80056da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056de:	07d2      	lsls	r2, r2, #31
 80056e0:	bf5c      	itt	pl
 80056e2:	005b      	lslpl	r3, r3, #1
 80056e4:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80056e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80056ec:	bf58      	it	pl
 80056ee:	0064      	lslpl	r4, r4, #1
 80056f0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80056f4:	0062      	lsls	r2, r4, #1
 80056f6:	2016      	movs	r0, #22
 80056f8:	4629      	mov	r1, r5
 80056fa:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80056fe:	1076      	asrs	r6, r6, #1
 8005700:	190f      	adds	r7, r1, r4
 8005702:	429f      	cmp	r7, r3
 8005704:	bfde      	ittt	le
 8005706:	1bdb      	suble	r3, r3, r7
 8005708:	1939      	addle	r1, r7, r4
 800570a:	192d      	addle	r5, r5, r4
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	3801      	subs	r0, #1
 8005710:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005714:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005718:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800571c:	d1f0      	bne.n	8005700 <__ieee754_sqrt+0x8c>
 800571e:	4604      	mov	r4, r0
 8005720:	2720      	movs	r7, #32
 8005722:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8005726:	428b      	cmp	r3, r1
 8005728:	eb0c 0e00 	add.w	lr, ip, r0
 800572c:	dc02      	bgt.n	8005734 <__ieee754_sqrt+0xc0>
 800572e:	d113      	bne.n	8005758 <__ieee754_sqrt+0xe4>
 8005730:	4596      	cmp	lr, r2
 8005732:	d811      	bhi.n	8005758 <__ieee754_sqrt+0xe4>
 8005734:	f1be 0f00 	cmp.w	lr, #0
 8005738:	eb0e 000c 	add.w	r0, lr, ip
 800573c:	da56      	bge.n	80057ec <__ieee754_sqrt+0x178>
 800573e:	2800      	cmp	r0, #0
 8005740:	db54      	blt.n	80057ec <__ieee754_sqrt+0x178>
 8005742:	f101 0801 	add.w	r8, r1, #1
 8005746:	1a5b      	subs	r3, r3, r1
 8005748:	4641      	mov	r1, r8
 800574a:	4596      	cmp	lr, r2
 800574c:	bf88      	it	hi
 800574e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005752:	eba2 020e 	sub.w	r2, r2, lr
 8005756:	4464      	add	r4, ip
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	3f01      	subs	r7, #1
 800575c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005760:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005764:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005768:	d1dd      	bne.n	8005726 <__ieee754_sqrt+0xb2>
 800576a:	4313      	orrs	r3, r2
 800576c:	d01b      	beq.n	80057a6 <__ieee754_sqrt+0x132>
 800576e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800581c <__ieee754_sqrt+0x1a8>
 8005772:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8005820 <__ieee754_sqrt+0x1ac>
 8005776:	e9da 0100 	ldrd	r0, r1, [sl]
 800577a:	e9db 2300 	ldrd	r2, r3, [fp]
 800577e:	f7fa fcf3 	bl	8000168 <__aeabi_dsub>
 8005782:	e9da 8900 	ldrd	r8, r9, [sl]
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	4640      	mov	r0, r8
 800578c:	4649      	mov	r1, r9
 800578e:	f7fb f91f 	bl	80009d0 <__aeabi_dcmple>
 8005792:	b140      	cbz	r0, 80057a6 <__ieee754_sqrt+0x132>
 8005794:	e9da 0100 	ldrd	r0, r1, [sl]
 8005798:	e9db 2300 	ldrd	r2, r3, [fp]
 800579c:	f1b4 3fff 	cmp.w	r4, #4294967295
 80057a0:	d126      	bne.n	80057f0 <__ieee754_sqrt+0x17c>
 80057a2:	463c      	mov	r4, r7
 80057a4:	3501      	adds	r5, #1
 80057a6:	106b      	asrs	r3, r5, #1
 80057a8:	0864      	lsrs	r4, r4, #1
 80057aa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80057ae:	07ea      	lsls	r2, r5, #31
 80057b0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80057b4:	bf48      	it	mi
 80057b6:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80057ba:	4620      	mov	r0, r4
 80057bc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80057c0:	e76d      	b.n	800569e <__ieee754_sqrt+0x2a>
 80057c2:	0ae3      	lsrs	r3, r4, #11
 80057c4:	3915      	subs	r1, #21
 80057c6:	0564      	lsls	r4, r4, #21
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0fa      	beq.n	80057c2 <__ieee754_sqrt+0x14e>
 80057cc:	02d8      	lsls	r0, r3, #11
 80057ce:	d50a      	bpl.n	80057e6 <__ieee754_sqrt+0x172>
 80057d0:	f1c2 0020 	rsb	r0, r2, #32
 80057d4:	fa24 f000 	lsr.w	r0, r4, r0
 80057d8:	1e55      	subs	r5, r2, #1
 80057da:	4094      	lsls	r4, r2
 80057dc:	4303      	orrs	r3, r0
 80057de:	1b4a      	subs	r2, r1, r5
 80057e0:	e776      	b.n	80056d0 <__ieee754_sqrt+0x5c>
 80057e2:	4611      	mov	r1, r2
 80057e4:	e7f0      	b.n	80057c8 <__ieee754_sqrt+0x154>
 80057e6:	005b      	lsls	r3, r3, #1
 80057e8:	3201      	adds	r2, #1
 80057ea:	e7ef      	b.n	80057cc <__ieee754_sqrt+0x158>
 80057ec:	4688      	mov	r8, r1
 80057ee:	e7aa      	b.n	8005746 <__ieee754_sqrt+0xd2>
 80057f0:	f7fa fcbc 	bl	800016c <__adddf3>
 80057f4:	e9da 8900 	ldrd	r8, r9, [sl]
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	4640      	mov	r0, r8
 80057fe:	4649      	mov	r1, r9
 8005800:	f7fb f8dc 	bl	80009bc <__aeabi_dcmplt>
 8005804:	b120      	cbz	r0, 8005810 <__ieee754_sqrt+0x19c>
 8005806:	1ca1      	adds	r1, r4, #2
 8005808:	bf08      	it	eq
 800580a:	3501      	addeq	r5, #1
 800580c:	3402      	adds	r4, #2
 800580e:	e7ca      	b.n	80057a6 <__ieee754_sqrt+0x132>
 8005810:	3401      	adds	r4, #1
 8005812:	f024 0401 	bic.w	r4, r4, #1
 8005816:	e7c6      	b.n	80057a6 <__ieee754_sqrt+0x132>
 8005818:	7ff00000 	.word	0x7ff00000
 800581c:	20000170 	.word	0x20000170
 8005820:	20000178 	.word	0x20000178
 8005824:	00000000 	.word	0x00000000

08005828 <__kernel_cos>:
 8005828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800582c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005830:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005834:	4680      	mov	r8, r0
 8005836:	460f      	mov	r7, r1
 8005838:	e9cd 2300 	strd	r2, r3, [sp]
 800583c:	da04      	bge.n	8005848 <__kernel_cos+0x20>
 800583e:	f7fb f8fb 	bl	8000a38 <__aeabi_d2iz>
 8005842:	2800      	cmp	r0, #0
 8005844:	f000 8086 	beq.w	8005954 <__kernel_cos+0x12c>
 8005848:	4642      	mov	r2, r8
 800584a:	463b      	mov	r3, r7
 800584c:	4640      	mov	r0, r8
 800584e:	4639      	mov	r1, r7
 8005850:	f7fa fe42 	bl	80004d8 <__aeabi_dmul>
 8005854:	2200      	movs	r2, #0
 8005856:	4b4e      	ldr	r3, [pc, #312]	; (8005990 <__kernel_cos+0x168>)
 8005858:	4604      	mov	r4, r0
 800585a:	460d      	mov	r5, r1
 800585c:	f7fa fe3c 	bl	80004d8 <__aeabi_dmul>
 8005860:	a33f      	add	r3, pc, #252	; (adr r3, 8005960 <__kernel_cos+0x138>)
 8005862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005866:	4682      	mov	sl, r0
 8005868:	468b      	mov	fp, r1
 800586a:	4620      	mov	r0, r4
 800586c:	4629      	mov	r1, r5
 800586e:	f7fa fe33 	bl	80004d8 <__aeabi_dmul>
 8005872:	a33d      	add	r3, pc, #244	; (adr r3, 8005968 <__kernel_cos+0x140>)
 8005874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005878:	f7fa fc78 	bl	800016c <__adddf3>
 800587c:	4622      	mov	r2, r4
 800587e:	462b      	mov	r3, r5
 8005880:	f7fa fe2a 	bl	80004d8 <__aeabi_dmul>
 8005884:	a33a      	add	r3, pc, #232	; (adr r3, 8005970 <__kernel_cos+0x148>)
 8005886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588a:	f7fa fc6d 	bl	8000168 <__aeabi_dsub>
 800588e:	4622      	mov	r2, r4
 8005890:	462b      	mov	r3, r5
 8005892:	f7fa fe21 	bl	80004d8 <__aeabi_dmul>
 8005896:	a338      	add	r3, pc, #224	; (adr r3, 8005978 <__kernel_cos+0x150>)
 8005898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589c:	f7fa fc66 	bl	800016c <__adddf3>
 80058a0:	4622      	mov	r2, r4
 80058a2:	462b      	mov	r3, r5
 80058a4:	f7fa fe18 	bl	80004d8 <__aeabi_dmul>
 80058a8:	a335      	add	r3, pc, #212	; (adr r3, 8005980 <__kernel_cos+0x158>)
 80058aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ae:	f7fa fc5b 	bl	8000168 <__aeabi_dsub>
 80058b2:	4622      	mov	r2, r4
 80058b4:	462b      	mov	r3, r5
 80058b6:	f7fa fe0f 	bl	80004d8 <__aeabi_dmul>
 80058ba:	a333      	add	r3, pc, #204	; (adr r3, 8005988 <__kernel_cos+0x160>)
 80058bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c0:	f7fa fc54 	bl	800016c <__adddf3>
 80058c4:	4622      	mov	r2, r4
 80058c6:	462b      	mov	r3, r5
 80058c8:	f7fa fe06 	bl	80004d8 <__aeabi_dmul>
 80058cc:	4622      	mov	r2, r4
 80058ce:	462b      	mov	r3, r5
 80058d0:	f7fa fe02 	bl	80004d8 <__aeabi_dmul>
 80058d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058d8:	4604      	mov	r4, r0
 80058da:	460d      	mov	r5, r1
 80058dc:	4640      	mov	r0, r8
 80058de:	4639      	mov	r1, r7
 80058e0:	f7fa fdfa 	bl	80004d8 <__aeabi_dmul>
 80058e4:	460b      	mov	r3, r1
 80058e6:	4602      	mov	r2, r0
 80058e8:	4629      	mov	r1, r5
 80058ea:	4620      	mov	r0, r4
 80058ec:	f7fa fc3c 	bl	8000168 <__aeabi_dsub>
 80058f0:	4b28      	ldr	r3, [pc, #160]	; (8005994 <__kernel_cos+0x16c>)
 80058f2:	4680      	mov	r8, r0
 80058f4:	429e      	cmp	r6, r3
 80058f6:	4689      	mov	r9, r1
 80058f8:	dc0e      	bgt.n	8005918 <__kernel_cos+0xf0>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4650      	mov	r0, sl
 8005900:	4659      	mov	r1, fp
 8005902:	f7fa fc31 	bl	8000168 <__aeabi_dsub>
 8005906:	4602      	mov	r2, r0
 8005908:	2000      	movs	r0, #0
 800590a:	460b      	mov	r3, r1
 800590c:	4922      	ldr	r1, [pc, #136]	; (8005998 <__kernel_cos+0x170>)
 800590e:	f7fa fc2b 	bl	8000168 <__aeabi_dsub>
 8005912:	b003      	add	sp, #12
 8005914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005918:	2400      	movs	r4, #0
 800591a:	4b20      	ldr	r3, [pc, #128]	; (800599c <__kernel_cos+0x174>)
 800591c:	4622      	mov	r2, r4
 800591e:	429e      	cmp	r6, r3
 8005920:	bfcc      	ite	gt
 8005922:	4d1f      	ldrgt	r5, [pc, #124]	; (80059a0 <__kernel_cos+0x178>)
 8005924:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005928:	462b      	mov	r3, r5
 800592a:	2000      	movs	r0, #0
 800592c:	491a      	ldr	r1, [pc, #104]	; (8005998 <__kernel_cos+0x170>)
 800592e:	f7fa fc1b 	bl	8000168 <__aeabi_dsub>
 8005932:	4622      	mov	r2, r4
 8005934:	4606      	mov	r6, r0
 8005936:	460f      	mov	r7, r1
 8005938:	462b      	mov	r3, r5
 800593a:	4650      	mov	r0, sl
 800593c:	4659      	mov	r1, fp
 800593e:	f7fa fc13 	bl	8000168 <__aeabi_dsub>
 8005942:	4642      	mov	r2, r8
 8005944:	464b      	mov	r3, r9
 8005946:	f7fa fc0f 	bl	8000168 <__aeabi_dsub>
 800594a:	4602      	mov	r2, r0
 800594c:	460b      	mov	r3, r1
 800594e:	4630      	mov	r0, r6
 8005950:	4639      	mov	r1, r7
 8005952:	e7dc      	b.n	800590e <__kernel_cos+0xe6>
 8005954:	2000      	movs	r0, #0
 8005956:	4910      	ldr	r1, [pc, #64]	; (8005998 <__kernel_cos+0x170>)
 8005958:	e7db      	b.n	8005912 <__kernel_cos+0xea>
 800595a:	bf00      	nop
 800595c:	f3af 8000 	nop.w
 8005960:	be8838d4 	.word	0xbe8838d4
 8005964:	bda8fae9 	.word	0xbda8fae9
 8005968:	bdb4b1c4 	.word	0xbdb4b1c4
 800596c:	3e21ee9e 	.word	0x3e21ee9e
 8005970:	809c52ad 	.word	0x809c52ad
 8005974:	3e927e4f 	.word	0x3e927e4f
 8005978:	19cb1590 	.word	0x19cb1590
 800597c:	3efa01a0 	.word	0x3efa01a0
 8005980:	16c15177 	.word	0x16c15177
 8005984:	3f56c16c 	.word	0x3f56c16c
 8005988:	5555554c 	.word	0x5555554c
 800598c:	3fa55555 	.word	0x3fa55555
 8005990:	3fe00000 	.word	0x3fe00000
 8005994:	3fd33332 	.word	0x3fd33332
 8005998:	3ff00000 	.word	0x3ff00000
 800599c:	3fe90000 	.word	0x3fe90000
 80059a0:	3fd20000 	.word	0x3fd20000
 80059a4:	00000000 	.word	0x00000000

080059a8 <__kernel_sin>:
 80059a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059ac:	b086      	sub	sp, #24
 80059ae:	e9cd 2300 	strd	r2, r3, [sp]
 80059b2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80059b6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80059ba:	4682      	mov	sl, r0
 80059bc:	460c      	mov	r4, r1
 80059be:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80059c0:	da03      	bge.n	80059ca <__kernel_sin+0x22>
 80059c2:	f7fb f839 	bl	8000a38 <__aeabi_d2iz>
 80059c6:	2800      	cmp	r0, #0
 80059c8:	d050      	beq.n	8005a6c <__kernel_sin+0xc4>
 80059ca:	4652      	mov	r2, sl
 80059cc:	4623      	mov	r3, r4
 80059ce:	4650      	mov	r0, sl
 80059d0:	4621      	mov	r1, r4
 80059d2:	f7fa fd81 	bl	80004d8 <__aeabi_dmul>
 80059d6:	4606      	mov	r6, r0
 80059d8:	460f      	mov	r7, r1
 80059da:	4602      	mov	r2, r0
 80059dc:	460b      	mov	r3, r1
 80059de:	4650      	mov	r0, sl
 80059e0:	4621      	mov	r1, r4
 80059e2:	f7fa fd79 	bl	80004d8 <__aeabi_dmul>
 80059e6:	a33e      	add	r3, pc, #248	; (adr r3, 8005ae0 <__kernel_sin+0x138>)
 80059e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ec:	4680      	mov	r8, r0
 80059ee:	4689      	mov	r9, r1
 80059f0:	4630      	mov	r0, r6
 80059f2:	4639      	mov	r1, r7
 80059f4:	f7fa fd70 	bl	80004d8 <__aeabi_dmul>
 80059f8:	a33b      	add	r3, pc, #236	; (adr r3, 8005ae8 <__kernel_sin+0x140>)
 80059fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fe:	f7fa fbb3 	bl	8000168 <__aeabi_dsub>
 8005a02:	4632      	mov	r2, r6
 8005a04:	463b      	mov	r3, r7
 8005a06:	f7fa fd67 	bl	80004d8 <__aeabi_dmul>
 8005a0a:	a339      	add	r3, pc, #228	; (adr r3, 8005af0 <__kernel_sin+0x148>)
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	f7fa fbac 	bl	800016c <__adddf3>
 8005a14:	4632      	mov	r2, r6
 8005a16:	463b      	mov	r3, r7
 8005a18:	f7fa fd5e 	bl	80004d8 <__aeabi_dmul>
 8005a1c:	a336      	add	r3, pc, #216	; (adr r3, 8005af8 <__kernel_sin+0x150>)
 8005a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a22:	f7fa fba1 	bl	8000168 <__aeabi_dsub>
 8005a26:	4632      	mov	r2, r6
 8005a28:	463b      	mov	r3, r7
 8005a2a:	f7fa fd55 	bl	80004d8 <__aeabi_dmul>
 8005a2e:	a334      	add	r3, pc, #208	; (adr r3, 8005b00 <__kernel_sin+0x158>)
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	f7fa fb9a 	bl	800016c <__adddf3>
 8005a38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a3c:	b9dd      	cbnz	r5, 8005a76 <__kernel_sin+0xce>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	4630      	mov	r0, r6
 8005a44:	4639      	mov	r1, r7
 8005a46:	f7fa fd47 	bl	80004d8 <__aeabi_dmul>
 8005a4a:	a32f      	add	r3, pc, #188	; (adr r3, 8005b08 <__kernel_sin+0x160>)
 8005a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a50:	f7fa fb8a 	bl	8000168 <__aeabi_dsub>
 8005a54:	4642      	mov	r2, r8
 8005a56:	464b      	mov	r3, r9
 8005a58:	f7fa fd3e 	bl	80004d8 <__aeabi_dmul>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	4650      	mov	r0, sl
 8005a62:	4621      	mov	r1, r4
 8005a64:	f7fa fb82 	bl	800016c <__adddf3>
 8005a68:	4682      	mov	sl, r0
 8005a6a:	460c      	mov	r4, r1
 8005a6c:	4650      	mov	r0, sl
 8005a6e:	4621      	mov	r1, r4
 8005a70:	b006      	add	sp, #24
 8005a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a76:	2200      	movs	r2, #0
 8005a78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a7c:	4b24      	ldr	r3, [pc, #144]	; (8005b10 <__kernel_sin+0x168>)
 8005a7e:	f7fa fd2b 	bl	80004d8 <__aeabi_dmul>
 8005a82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a8a:	4640      	mov	r0, r8
 8005a8c:	4649      	mov	r1, r9
 8005a8e:	f7fa fd23 	bl	80004d8 <__aeabi_dmul>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a9a:	f7fa fb65 	bl	8000168 <__aeabi_dsub>
 8005a9e:	4632      	mov	r2, r6
 8005aa0:	463b      	mov	r3, r7
 8005aa2:	f7fa fd19 	bl	80004d8 <__aeabi_dmul>
 8005aa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005aaa:	f7fa fb5d 	bl	8000168 <__aeabi_dsub>
 8005aae:	a316      	add	r3, pc, #88	; (adr r3, 8005b08 <__kernel_sin+0x160>)
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	4606      	mov	r6, r0
 8005ab6:	460f      	mov	r7, r1
 8005ab8:	4640      	mov	r0, r8
 8005aba:	4649      	mov	r1, r9
 8005abc:	f7fa fd0c 	bl	80004d8 <__aeabi_dmul>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4630      	mov	r0, r6
 8005ac6:	4639      	mov	r1, r7
 8005ac8:	f7fa fb50 	bl	800016c <__adddf3>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4650      	mov	r0, sl
 8005ad2:	4621      	mov	r1, r4
 8005ad4:	f7fa fb48 	bl	8000168 <__aeabi_dsub>
 8005ad8:	e7c6      	b.n	8005a68 <__kernel_sin+0xc0>
 8005ada:	bf00      	nop
 8005adc:	f3af 8000 	nop.w
 8005ae0:	5acfd57c 	.word	0x5acfd57c
 8005ae4:	3de5d93a 	.word	0x3de5d93a
 8005ae8:	8a2b9ceb 	.word	0x8a2b9ceb
 8005aec:	3e5ae5e6 	.word	0x3e5ae5e6
 8005af0:	57b1fe7d 	.word	0x57b1fe7d
 8005af4:	3ec71de3 	.word	0x3ec71de3
 8005af8:	19c161d5 	.word	0x19c161d5
 8005afc:	3f2a01a0 	.word	0x3f2a01a0
 8005b00:	1110f8a6 	.word	0x1110f8a6
 8005b04:	3f811111 	.word	0x3f811111
 8005b08:	55555549 	.word	0x55555549
 8005b0c:	3fc55555 	.word	0x3fc55555
 8005b10:	3fe00000 	.word	0x3fe00000
 8005b14:	00000000 	.word	0x00000000

08005b18 <__ieee754_atan2>:
 8005b18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b1c:	4617      	mov	r7, r2
 8005b1e:	4692      	mov	sl, r2
 8005b20:	4699      	mov	r9, r3
 8005b22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b26:	427b      	negs	r3, r7
 8005b28:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8005ca8 <__ieee754_atan2+0x190>
 8005b2c:	433b      	orrs	r3, r7
 8005b2e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005b32:	4543      	cmp	r3, r8
 8005b34:	4604      	mov	r4, r0
 8005b36:	460d      	mov	r5, r1
 8005b38:	d809      	bhi.n	8005b4e <__ieee754_atan2+0x36>
 8005b3a:	4246      	negs	r6, r0
 8005b3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005b40:	4306      	orrs	r6, r0
 8005b42:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8005b46:	4546      	cmp	r6, r8
 8005b48:	468e      	mov	lr, r1
 8005b4a:	4683      	mov	fp, r0
 8005b4c:	d908      	bls.n	8005b60 <__ieee754_atan2+0x48>
 8005b4e:	4652      	mov	r2, sl
 8005b50:	464b      	mov	r3, r9
 8005b52:	4620      	mov	r0, r4
 8005b54:	4629      	mov	r1, r5
 8005b56:	f7fa fb09 	bl	800016c <__adddf3>
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	460d      	mov	r5, r1
 8005b5e:	e019      	b.n	8005b94 <__ieee754_atan2+0x7c>
 8005b60:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8005b64:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8005b68:	433e      	orrs	r6, r7
 8005b6a:	d103      	bne.n	8005b74 <__ieee754_atan2+0x5c>
 8005b6c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b70:	f7ff bb66 	b.w	8005240 <atan>
 8005b74:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8005b78:	f006 0602 	and.w	r6, r6, #2
 8005b7c:	ea53 0b0b 	orrs.w	fp, r3, fp
 8005b80:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8005b84:	d10a      	bne.n	8005b9c <__ieee754_atan2+0x84>
 8005b86:	2e02      	cmp	r6, #2
 8005b88:	d067      	beq.n	8005c5a <__ieee754_atan2+0x142>
 8005b8a:	2e03      	cmp	r6, #3
 8005b8c:	d102      	bne.n	8005b94 <__ieee754_atan2+0x7c>
 8005b8e:	a53a      	add	r5, pc, #232	; (adr r5, 8005c78 <__ieee754_atan2+0x160>)
 8005b90:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005b94:	4620      	mov	r0, r4
 8005b96:	4629      	mov	r1, r5
 8005b98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b9c:	4317      	orrs	r7, r2
 8005b9e:	d106      	bne.n	8005bae <__ieee754_atan2+0x96>
 8005ba0:	f1be 0f00 	cmp.w	lr, #0
 8005ba4:	da64      	bge.n	8005c70 <__ieee754_atan2+0x158>
 8005ba6:	a536      	add	r5, pc, #216	; (adr r5, 8005c80 <__ieee754_atan2+0x168>)
 8005ba8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005bac:	e7f2      	b.n	8005b94 <__ieee754_atan2+0x7c>
 8005bae:	4542      	cmp	r2, r8
 8005bb0:	d10f      	bne.n	8005bd2 <__ieee754_atan2+0xba>
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	f106 36ff 	add.w	r6, r6, #4294967295
 8005bb8:	d107      	bne.n	8005bca <__ieee754_atan2+0xb2>
 8005bba:	2e02      	cmp	r6, #2
 8005bbc:	d851      	bhi.n	8005c62 <__ieee754_atan2+0x14a>
 8005bbe:	4b3b      	ldr	r3, [pc, #236]	; (8005cac <__ieee754_atan2+0x194>)
 8005bc0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005bc4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005bc8:	e7e4      	b.n	8005b94 <__ieee754_atan2+0x7c>
 8005bca:	2e02      	cmp	r6, #2
 8005bcc:	d84d      	bhi.n	8005c6a <__ieee754_atan2+0x152>
 8005bce:	4b38      	ldr	r3, [pc, #224]	; (8005cb0 <__ieee754_atan2+0x198>)
 8005bd0:	e7f6      	b.n	8005bc0 <__ieee754_atan2+0xa8>
 8005bd2:	4543      	cmp	r3, r8
 8005bd4:	d0e4      	beq.n	8005ba0 <__ieee754_atan2+0x88>
 8005bd6:	1a9b      	subs	r3, r3, r2
 8005bd8:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8005bdc:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005be0:	da21      	bge.n	8005c26 <__ieee754_atan2+0x10e>
 8005be2:	f1b9 0f00 	cmp.w	r9, #0
 8005be6:	da01      	bge.n	8005bec <__ieee754_atan2+0xd4>
 8005be8:	323c      	adds	r2, #60	; 0x3c
 8005bea:	db20      	blt.n	8005c2e <__ieee754_atan2+0x116>
 8005bec:	4652      	mov	r2, sl
 8005bee:	464b      	mov	r3, r9
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	4629      	mov	r1, r5
 8005bf4:	f7fa fd9a 	bl	800072c <__aeabi_ddiv>
 8005bf8:	f7ff fcf2 	bl	80055e0 <fabs>
 8005bfc:	f7ff fb20 	bl	8005240 <atan>
 8005c00:	4604      	mov	r4, r0
 8005c02:	460d      	mov	r5, r1
 8005c04:	2e01      	cmp	r6, #1
 8005c06:	d015      	beq.n	8005c34 <__ieee754_atan2+0x11c>
 8005c08:	2e02      	cmp	r6, #2
 8005c0a:	d017      	beq.n	8005c3c <__ieee754_atan2+0x124>
 8005c0c:	2e00      	cmp	r6, #0
 8005c0e:	d0c1      	beq.n	8005b94 <__ieee754_atan2+0x7c>
 8005c10:	a31d      	add	r3, pc, #116	; (adr r3, 8005c88 <__ieee754_atan2+0x170>)
 8005c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c16:	4620      	mov	r0, r4
 8005c18:	4629      	mov	r1, r5
 8005c1a:	f7fa faa5 	bl	8000168 <__aeabi_dsub>
 8005c1e:	a31c      	add	r3, pc, #112	; (adr r3, 8005c90 <__ieee754_atan2+0x178>)
 8005c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c24:	e016      	b.n	8005c54 <__ieee754_atan2+0x13c>
 8005c26:	a51c      	add	r5, pc, #112	; (adr r5, 8005c98 <__ieee754_atan2+0x180>)
 8005c28:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005c2c:	e7ea      	b.n	8005c04 <__ieee754_atan2+0xec>
 8005c2e:	2400      	movs	r4, #0
 8005c30:	2500      	movs	r5, #0
 8005c32:	e7e7      	b.n	8005c04 <__ieee754_atan2+0xec>
 8005c34:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005c38:	461d      	mov	r5, r3
 8005c3a:	e7ab      	b.n	8005b94 <__ieee754_atan2+0x7c>
 8005c3c:	a312      	add	r3, pc, #72	; (adr r3, 8005c88 <__ieee754_atan2+0x170>)
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	4620      	mov	r0, r4
 8005c44:	4629      	mov	r1, r5
 8005c46:	f7fa fa8f 	bl	8000168 <__aeabi_dsub>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	a110      	add	r1, pc, #64	; (adr r1, 8005c90 <__ieee754_atan2+0x178>)
 8005c50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c54:	f7fa fa88 	bl	8000168 <__aeabi_dsub>
 8005c58:	e77f      	b.n	8005b5a <__ieee754_atan2+0x42>
 8005c5a:	a50d      	add	r5, pc, #52	; (adr r5, 8005c90 <__ieee754_atan2+0x178>)
 8005c5c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005c60:	e798      	b.n	8005b94 <__ieee754_atan2+0x7c>
 8005c62:	a50f      	add	r5, pc, #60	; (adr r5, 8005ca0 <__ieee754_atan2+0x188>)
 8005c64:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005c68:	e794      	b.n	8005b94 <__ieee754_atan2+0x7c>
 8005c6a:	2400      	movs	r4, #0
 8005c6c:	2500      	movs	r5, #0
 8005c6e:	e791      	b.n	8005b94 <__ieee754_atan2+0x7c>
 8005c70:	a509      	add	r5, pc, #36	; (adr r5, 8005c98 <__ieee754_atan2+0x180>)
 8005c72:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005c76:	e78d      	b.n	8005b94 <__ieee754_atan2+0x7c>
 8005c78:	54442d18 	.word	0x54442d18
 8005c7c:	c00921fb 	.word	0xc00921fb
 8005c80:	54442d18 	.word	0x54442d18
 8005c84:	bff921fb 	.word	0xbff921fb
 8005c88:	33145c07 	.word	0x33145c07
 8005c8c:	3ca1a626 	.word	0x3ca1a626
 8005c90:	54442d18 	.word	0x54442d18
 8005c94:	400921fb 	.word	0x400921fb
 8005c98:	54442d18 	.word	0x54442d18
 8005c9c:	3ff921fb 	.word	0x3ff921fb
 8005ca0:	54442d18 	.word	0x54442d18
 8005ca4:	3fe921fb 	.word	0x3fe921fb
 8005ca8:	7ff00000 	.word	0x7ff00000
 8005cac:	080069f0 	.word	0x080069f0
 8005cb0:	08006a08 	.word	0x08006a08
 8005cb4:	00000000 	.word	0x00000000

08005cb8 <__ieee754_rem_pio2>:
 8005cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cbc:	4614      	mov	r4, r2
 8005cbe:	4ac2      	ldr	r2, [pc, #776]	; (8005fc8 <__ieee754_rem_pio2+0x310>)
 8005cc0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8005cc4:	b08d      	sub	sp, #52	; 0x34
 8005cc6:	4592      	cmp	sl, r2
 8005cc8:	9104      	str	r1, [sp, #16]
 8005cca:	dc07      	bgt.n	8005cdc <__ieee754_rem_pio2+0x24>
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e9c4 0100 	strd	r0, r1, [r4]
 8005cd4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005cd8:	2500      	movs	r5, #0
 8005cda:	e024      	b.n	8005d26 <__ieee754_rem_pio2+0x6e>
 8005cdc:	4abb      	ldr	r2, [pc, #748]	; (8005fcc <__ieee754_rem_pio2+0x314>)
 8005cde:	4592      	cmp	sl, r2
 8005ce0:	dc72      	bgt.n	8005dc8 <__ieee754_rem_pio2+0x110>
 8005ce2:	9b04      	ldr	r3, [sp, #16]
 8005ce4:	4dba      	ldr	r5, [pc, #744]	; (8005fd0 <__ieee754_rem_pio2+0x318>)
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	a3a9      	add	r3, pc, #676	; (adr r3, 8005f90 <__ieee754_rem_pio2+0x2d8>)
 8005cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cee:	dd36      	ble.n	8005d5e <__ieee754_rem_pio2+0xa6>
 8005cf0:	f7fa fa3a 	bl	8000168 <__aeabi_dsub>
 8005cf4:	45aa      	cmp	sl, r5
 8005cf6:	4606      	mov	r6, r0
 8005cf8:	460f      	mov	r7, r1
 8005cfa:	d018      	beq.n	8005d2e <__ieee754_rem_pio2+0x76>
 8005cfc:	a3a6      	add	r3, pc, #664	; (adr r3, 8005f98 <__ieee754_rem_pio2+0x2e0>)
 8005cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d02:	f7fa fa31 	bl	8000168 <__aeabi_dsub>
 8005d06:	4602      	mov	r2, r0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	e9c4 2300 	strd	r2, r3, [r4]
 8005d10:	4639      	mov	r1, r7
 8005d12:	f7fa fa29 	bl	8000168 <__aeabi_dsub>
 8005d16:	a3a0      	add	r3, pc, #640	; (adr r3, 8005f98 <__ieee754_rem_pio2+0x2e0>)
 8005d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1c:	f7fa fa24 	bl	8000168 <__aeabi_dsub>
 8005d20:	2501      	movs	r5, #1
 8005d22:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005d26:	4628      	mov	r0, r5
 8005d28:	b00d      	add	sp, #52	; 0x34
 8005d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d2e:	a39c      	add	r3, pc, #624	; (adr r3, 8005fa0 <__ieee754_rem_pio2+0x2e8>)
 8005d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d34:	f7fa fa18 	bl	8000168 <__aeabi_dsub>
 8005d38:	a39b      	add	r3, pc, #620	; (adr r3, 8005fa8 <__ieee754_rem_pio2+0x2f0>)
 8005d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3e:	4606      	mov	r6, r0
 8005d40:	460f      	mov	r7, r1
 8005d42:	f7fa fa11 	bl	8000168 <__aeabi_dsub>
 8005d46:	4602      	mov	r2, r0
 8005d48:	460b      	mov	r3, r1
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	e9c4 2300 	strd	r2, r3, [r4]
 8005d50:	4639      	mov	r1, r7
 8005d52:	f7fa fa09 	bl	8000168 <__aeabi_dsub>
 8005d56:	a394      	add	r3, pc, #592	; (adr r3, 8005fa8 <__ieee754_rem_pio2+0x2f0>)
 8005d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5c:	e7de      	b.n	8005d1c <__ieee754_rem_pio2+0x64>
 8005d5e:	f7fa fa05 	bl	800016c <__adddf3>
 8005d62:	45aa      	cmp	sl, r5
 8005d64:	4606      	mov	r6, r0
 8005d66:	460f      	mov	r7, r1
 8005d68:	d016      	beq.n	8005d98 <__ieee754_rem_pio2+0xe0>
 8005d6a:	a38b      	add	r3, pc, #556	; (adr r3, 8005f98 <__ieee754_rem_pio2+0x2e0>)
 8005d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d70:	f7fa f9fc 	bl	800016c <__adddf3>
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	4630      	mov	r0, r6
 8005d7a:	e9c4 2300 	strd	r2, r3, [r4]
 8005d7e:	4639      	mov	r1, r7
 8005d80:	f7fa f9f2 	bl	8000168 <__aeabi_dsub>
 8005d84:	a384      	add	r3, pc, #528	; (adr r3, 8005f98 <__ieee754_rem_pio2+0x2e0>)
 8005d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8a:	f7fa f9ef 	bl	800016c <__adddf3>
 8005d8e:	f04f 35ff 	mov.w	r5, #4294967295
 8005d92:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005d96:	e7c6      	b.n	8005d26 <__ieee754_rem_pio2+0x6e>
 8005d98:	a381      	add	r3, pc, #516	; (adr r3, 8005fa0 <__ieee754_rem_pio2+0x2e8>)
 8005d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9e:	f7fa f9e5 	bl	800016c <__adddf3>
 8005da2:	a381      	add	r3, pc, #516	; (adr r3, 8005fa8 <__ieee754_rem_pio2+0x2f0>)
 8005da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da8:	4606      	mov	r6, r0
 8005daa:	460f      	mov	r7, r1
 8005dac:	f7fa f9de 	bl	800016c <__adddf3>
 8005db0:	4602      	mov	r2, r0
 8005db2:	460b      	mov	r3, r1
 8005db4:	4630      	mov	r0, r6
 8005db6:	e9c4 2300 	strd	r2, r3, [r4]
 8005dba:	4639      	mov	r1, r7
 8005dbc:	f7fa f9d4 	bl	8000168 <__aeabi_dsub>
 8005dc0:	a379      	add	r3, pc, #484	; (adr r3, 8005fa8 <__ieee754_rem_pio2+0x2f0>)
 8005dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc6:	e7e0      	b.n	8005d8a <__ieee754_rem_pio2+0xd2>
 8005dc8:	4a82      	ldr	r2, [pc, #520]	; (8005fd4 <__ieee754_rem_pio2+0x31c>)
 8005dca:	4592      	cmp	sl, r2
 8005dcc:	f300 80d4 	bgt.w	8005f78 <__ieee754_rem_pio2+0x2c0>
 8005dd0:	f7ff fc06 	bl	80055e0 <fabs>
 8005dd4:	a376      	add	r3, pc, #472	; (adr r3, 8005fb0 <__ieee754_rem_pio2+0x2f8>)
 8005dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dda:	4606      	mov	r6, r0
 8005ddc:	460f      	mov	r7, r1
 8005dde:	f7fa fb7b 	bl	80004d8 <__aeabi_dmul>
 8005de2:	2200      	movs	r2, #0
 8005de4:	4b7c      	ldr	r3, [pc, #496]	; (8005fd8 <__ieee754_rem_pio2+0x320>)
 8005de6:	f7fa f9c1 	bl	800016c <__adddf3>
 8005dea:	f7fa fe25 	bl	8000a38 <__aeabi_d2iz>
 8005dee:	4605      	mov	r5, r0
 8005df0:	f7fa fb08 	bl	8000404 <__aeabi_i2d>
 8005df4:	4602      	mov	r2, r0
 8005df6:	460b      	mov	r3, r1
 8005df8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005dfc:	a364      	add	r3, pc, #400	; (adr r3, 8005f90 <__ieee754_rem_pio2+0x2d8>)
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	f7fa fb69 	bl	80004d8 <__aeabi_dmul>
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	4639      	mov	r1, r7
 8005e0e:	f7fa f9ab 	bl	8000168 <__aeabi_dsub>
 8005e12:	a361      	add	r3, pc, #388	; (adr r3, 8005f98 <__ieee754_rem_pio2+0x2e0>)
 8005e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e18:	4680      	mov	r8, r0
 8005e1a:	4689      	mov	r9, r1
 8005e1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e20:	f7fa fb5a 	bl	80004d8 <__aeabi_dmul>
 8005e24:	2d1f      	cmp	r5, #31
 8005e26:	4606      	mov	r6, r0
 8005e28:	460f      	mov	r7, r1
 8005e2a:	dc0e      	bgt.n	8005e4a <__ieee754_rem_pio2+0x192>
 8005e2c:	4b6b      	ldr	r3, [pc, #428]	; (8005fdc <__ieee754_rem_pio2+0x324>)
 8005e2e:	1e6a      	subs	r2, r5, #1
 8005e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e34:	4553      	cmp	r3, sl
 8005e36:	d008      	beq.n	8005e4a <__ieee754_rem_pio2+0x192>
 8005e38:	4632      	mov	r2, r6
 8005e3a:	463b      	mov	r3, r7
 8005e3c:	4640      	mov	r0, r8
 8005e3e:	4649      	mov	r1, r9
 8005e40:	f7fa f992 	bl	8000168 <__aeabi_dsub>
 8005e44:	e9c4 0100 	strd	r0, r1, [r4]
 8005e48:	e012      	b.n	8005e70 <__ieee754_rem_pio2+0x1b8>
 8005e4a:	463b      	mov	r3, r7
 8005e4c:	4632      	mov	r2, r6
 8005e4e:	4640      	mov	r0, r8
 8005e50:	4649      	mov	r1, r9
 8005e52:	f7fa f989 	bl	8000168 <__aeabi_dsub>
 8005e56:	ea4f 532a 	mov.w	r3, sl, asr #20
 8005e5a:	9305      	str	r3, [sp, #20]
 8005e5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005e60:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 8005e64:	2b10      	cmp	r3, #16
 8005e66:	dc1f      	bgt.n	8005ea8 <__ieee754_rem_pio2+0x1f0>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	e9c4 2300 	strd	r2, r3, [r4]
 8005e70:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8005e74:	4640      	mov	r0, r8
 8005e76:	4653      	mov	r3, sl
 8005e78:	4649      	mov	r1, r9
 8005e7a:	f7fa f975 	bl	8000168 <__aeabi_dsub>
 8005e7e:	4632      	mov	r2, r6
 8005e80:	463b      	mov	r3, r7
 8005e82:	f7fa f971 	bl	8000168 <__aeabi_dsub>
 8005e86:	460b      	mov	r3, r1
 8005e88:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005e8c:	9904      	ldr	r1, [sp, #16]
 8005e8e:	4602      	mov	r2, r0
 8005e90:	2900      	cmp	r1, #0
 8005e92:	f6bf af48 	bge.w	8005d26 <__ieee754_rem_pio2+0x6e>
 8005e96:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8005e9a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8005e9e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005ea2:	60e3      	str	r3, [r4, #12]
 8005ea4:	426d      	negs	r5, r5
 8005ea6:	e73e      	b.n	8005d26 <__ieee754_rem_pio2+0x6e>
 8005ea8:	a33d      	add	r3, pc, #244	; (adr r3, 8005fa0 <__ieee754_rem_pio2+0x2e8>)
 8005eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005eb2:	f7fa fb11 	bl	80004d8 <__aeabi_dmul>
 8005eb6:	4606      	mov	r6, r0
 8005eb8:	460f      	mov	r7, r1
 8005eba:	4602      	mov	r2, r0
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	4649      	mov	r1, r9
 8005ec2:	f7fa f951 	bl	8000168 <__aeabi_dsub>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4682      	mov	sl, r0
 8005ecc:	468b      	mov	fp, r1
 8005ece:	4640      	mov	r0, r8
 8005ed0:	4649      	mov	r1, r9
 8005ed2:	f7fa f949 	bl	8000168 <__aeabi_dsub>
 8005ed6:	4632      	mov	r2, r6
 8005ed8:	463b      	mov	r3, r7
 8005eda:	f7fa f945 	bl	8000168 <__aeabi_dsub>
 8005ede:	a332      	add	r3, pc, #200	; (adr r3, 8005fa8 <__ieee754_rem_pio2+0x2f0>)
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	4606      	mov	r6, r0
 8005ee6:	460f      	mov	r7, r1
 8005ee8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005eec:	f7fa faf4 	bl	80004d8 <__aeabi_dmul>
 8005ef0:	4632      	mov	r2, r6
 8005ef2:	463b      	mov	r3, r7
 8005ef4:	f7fa f938 	bl	8000168 <__aeabi_dsub>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4606      	mov	r6, r0
 8005efe:	460f      	mov	r7, r1
 8005f00:	4650      	mov	r0, sl
 8005f02:	4659      	mov	r1, fp
 8005f04:	f7fa f930 	bl	8000168 <__aeabi_dsub>
 8005f08:	9a05      	ldr	r2, [sp, #20]
 8005f0a:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b31      	cmp	r3, #49	; 0x31
 8005f12:	dc06      	bgt.n	8005f22 <__ieee754_rem_pio2+0x26a>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	46d0      	mov	r8, sl
 8005f1a:	46d9      	mov	r9, fp
 8005f1c:	e9c4 2300 	strd	r2, r3, [r4]
 8005f20:	e7a6      	b.n	8005e70 <__ieee754_rem_pio2+0x1b8>
 8005f22:	a325      	add	r3, pc, #148	; (adr r3, 8005fb8 <__ieee754_rem_pio2+0x300>)
 8005f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f2c:	f7fa fad4 	bl	80004d8 <__aeabi_dmul>
 8005f30:	4606      	mov	r6, r0
 8005f32:	460f      	mov	r7, r1
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	4650      	mov	r0, sl
 8005f3a:	4659      	mov	r1, fp
 8005f3c:	f7fa f914 	bl	8000168 <__aeabi_dsub>
 8005f40:	4602      	mov	r2, r0
 8005f42:	460b      	mov	r3, r1
 8005f44:	4680      	mov	r8, r0
 8005f46:	4689      	mov	r9, r1
 8005f48:	4650      	mov	r0, sl
 8005f4a:	4659      	mov	r1, fp
 8005f4c:	f7fa f90c 	bl	8000168 <__aeabi_dsub>
 8005f50:	4632      	mov	r2, r6
 8005f52:	463b      	mov	r3, r7
 8005f54:	f7fa f908 	bl	8000168 <__aeabi_dsub>
 8005f58:	a319      	add	r3, pc, #100	; (adr r3, 8005fc0 <__ieee754_rem_pio2+0x308>)
 8005f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5e:	4606      	mov	r6, r0
 8005f60:	460f      	mov	r7, r1
 8005f62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f66:	f7fa fab7 	bl	80004d8 <__aeabi_dmul>
 8005f6a:	4632      	mov	r2, r6
 8005f6c:	463b      	mov	r3, r7
 8005f6e:	f7fa f8fb 	bl	8000168 <__aeabi_dsub>
 8005f72:	4606      	mov	r6, r0
 8005f74:	460f      	mov	r7, r1
 8005f76:	e75f      	b.n	8005e38 <__ieee754_rem_pio2+0x180>
 8005f78:	4a19      	ldr	r2, [pc, #100]	; (8005fe0 <__ieee754_rem_pio2+0x328>)
 8005f7a:	4592      	cmp	sl, r2
 8005f7c:	dd32      	ble.n	8005fe4 <__ieee754_rem_pio2+0x32c>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	f7fa f8f1 	bl	8000168 <__aeabi_dsub>
 8005f86:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005f8a:	e9c4 0100 	strd	r0, r1, [r4]
 8005f8e:	e6a3      	b.n	8005cd8 <__ieee754_rem_pio2+0x20>
 8005f90:	54400000 	.word	0x54400000
 8005f94:	3ff921fb 	.word	0x3ff921fb
 8005f98:	1a626331 	.word	0x1a626331
 8005f9c:	3dd0b461 	.word	0x3dd0b461
 8005fa0:	1a600000 	.word	0x1a600000
 8005fa4:	3dd0b461 	.word	0x3dd0b461
 8005fa8:	2e037073 	.word	0x2e037073
 8005fac:	3ba3198a 	.word	0x3ba3198a
 8005fb0:	6dc9c883 	.word	0x6dc9c883
 8005fb4:	3fe45f30 	.word	0x3fe45f30
 8005fb8:	2e000000 	.word	0x2e000000
 8005fbc:	3ba3198a 	.word	0x3ba3198a
 8005fc0:	252049c1 	.word	0x252049c1
 8005fc4:	397b839a 	.word	0x397b839a
 8005fc8:	3fe921fb 	.word	0x3fe921fb
 8005fcc:	4002d97b 	.word	0x4002d97b
 8005fd0:	3ff921fb 	.word	0x3ff921fb
 8005fd4:	413921fb 	.word	0x413921fb
 8005fd8:	3fe00000 	.word	0x3fe00000
 8005fdc:	08006a20 	.word	0x08006a20
 8005fe0:	7fefffff 	.word	0x7fefffff
 8005fe4:	ea4f 552a 	mov.w	r5, sl, asr #20
 8005fe8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005fec:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8005ff0:	460f      	mov	r7, r1
 8005ff2:	4606      	mov	r6, r0
 8005ff4:	f7fa fd20 	bl	8000a38 <__aeabi_d2iz>
 8005ff8:	f7fa fa04 	bl	8000404 <__aeabi_i2d>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	4630      	mov	r0, r6
 8006002:	4639      	mov	r1, r7
 8006004:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006008:	f7fa f8ae 	bl	8000168 <__aeabi_dsub>
 800600c:	2200      	movs	r2, #0
 800600e:	4b22      	ldr	r3, [pc, #136]	; (8006098 <__ieee754_rem_pio2+0x3e0>)
 8006010:	f7fa fa62 	bl	80004d8 <__aeabi_dmul>
 8006014:	460f      	mov	r7, r1
 8006016:	4606      	mov	r6, r0
 8006018:	f7fa fd0e 	bl	8000a38 <__aeabi_d2iz>
 800601c:	f7fa f9f2 	bl	8000404 <__aeabi_i2d>
 8006020:	4602      	mov	r2, r0
 8006022:	460b      	mov	r3, r1
 8006024:	4630      	mov	r0, r6
 8006026:	4639      	mov	r1, r7
 8006028:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800602c:	f7fa f89c 	bl	8000168 <__aeabi_dsub>
 8006030:	2200      	movs	r2, #0
 8006032:	4b19      	ldr	r3, [pc, #100]	; (8006098 <__ieee754_rem_pio2+0x3e0>)
 8006034:	f7fa fa50 	bl	80004d8 <__aeabi_dmul>
 8006038:	f04f 0803 	mov.w	r8, #3
 800603c:	2600      	movs	r6, #0
 800603e:	2700      	movs	r7, #0
 8006040:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006044:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8006048:	4632      	mov	r2, r6
 800604a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800604e:	463b      	mov	r3, r7
 8006050:	46c2      	mov	sl, r8
 8006052:	f108 38ff 	add.w	r8, r8, #4294967295
 8006056:	f7fa fca7 	bl	80009a8 <__aeabi_dcmpeq>
 800605a:	2800      	cmp	r0, #0
 800605c:	d1f4      	bne.n	8006048 <__ieee754_rem_pio2+0x390>
 800605e:	4b0f      	ldr	r3, [pc, #60]	; (800609c <__ieee754_rem_pio2+0x3e4>)
 8006060:	462a      	mov	r2, r5
 8006062:	9301      	str	r3, [sp, #4]
 8006064:	2302      	movs	r3, #2
 8006066:	4621      	mov	r1, r4
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	a806      	add	r0, sp, #24
 800606c:	4653      	mov	r3, sl
 800606e:	f000 f817 	bl	80060a0 <__kernel_rem_pio2>
 8006072:	9b04      	ldr	r3, [sp, #16]
 8006074:	4605      	mov	r5, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	f6bf ae55 	bge.w	8005d26 <__ieee754_rem_pio2+0x6e>
 800607c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006080:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006084:	e9c4 2300 	strd	r2, r3, [r4]
 8006088:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800608c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006090:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006094:	e706      	b.n	8005ea4 <__ieee754_rem_pio2+0x1ec>
 8006096:	bf00      	nop
 8006098:	41700000 	.word	0x41700000
 800609c:	08006aa0 	.word	0x08006aa0

080060a0 <__kernel_rem_pio2>:
 80060a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a4:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80060a8:	9308      	str	r3, [sp, #32]
 80060aa:	9106      	str	r1, [sp, #24]
 80060ac:	4bb6      	ldr	r3, [pc, #728]	; (8006388 <__kernel_rem_pio2+0x2e8>)
 80060ae:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80060b0:	f112 0f14 	cmn.w	r2, #20
 80060b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80060b8:	bfa8      	it	ge
 80060ba:	1ed4      	subge	r4, r2, #3
 80060bc:	9302      	str	r3, [sp, #8]
 80060be:	9b08      	ldr	r3, [sp, #32]
 80060c0:	bfb8      	it	lt
 80060c2:	2400      	movlt	r4, #0
 80060c4:	f103 33ff 	add.w	r3, r3, #4294967295
 80060c8:	9307      	str	r3, [sp, #28]
 80060ca:	bfa4      	itt	ge
 80060cc:	2318      	movge	r3, #24
 80060ce:	fb94 f4f3 	sdivge	r4, r4, r3
 80060d2:	f06f 0317 	mvn.w	r3, #23
 80060d6:	fb04 3303 	mla	r3, r4, r3, r3
 80060da:	eb03 0b02 	add.w	fp, r3, r2
 80060de:	9a07      	ldr	r2, [sp, #28]
 80060e0:	9b02      	ldr	r3, [sp, #8]
 80060e2:	1aa7      	subs	r7, r4, r2
 80060e4:	eb03 0802 	add.w	r8, r3, r2
 80060e8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80060ea:	2500      	movs	r5, #0
 80060ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80060f0:	2200      	movs	r2, #0
 80060f2:	2300      	movs	r3, #0
 80060f4:	9009      	str	r0, [sp, #36]	; 0x24
 80060f6:	ae20      	add	r6, sp, #128	; 0x80
 80060f8:	4545      	cmp	r5, r8
 80060fa:	dd14      	ble.n	8006126 <__kernel_rem_pio2+0x86>
 80060fc:	f04f 0800 	mov.w	r8, #0
 8006100:	9a08      	ldr	r2, [sp, #32]
 8006102:	ab20      	add	r3, sp, #128	; 0x80
 8006104:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8006108:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800610c:	9b02      	ldr	r3, [sp, #8]
 800610e:	4598      	cmp	r8, r3
 8006110:	dc35      	bgt.n	800617e <__kernel_rem_pio2+0xde>
 8006112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006114:	2200      	movs	r2, #0
 8006116:	f1a3 0908 	sub.w	r9, r3, #8
 800611a:	2300      	movs	r3, #0
 800611c:	462f      	mov	r7, r5
 800611e:	2600      	movs	r6, #0
 8006120:	e9cd 2300 	strd	r2, r3, [sp]
 8006124:	e01f      	b.n	8006166 <__kernel_rem_pio2+0xc6>
 8006126:	42ef      	cmn	r7, r5
 8006128:	d40b      	bmi.n	8006142 <__kernel_rem_pio2+0xa2>
 800612a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800612e:	e9cd 2300 	strd	r2, r3, [sp]
 8006132:	f7fa f967 	bl	8000404 <__aeabi_i2d>
 8006136:	e9dd 2300 	ldrd	r2, r3, [sp]
 800613a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800613e:	3501      	adds	r5, #1
 8006140:	e7da      	b.n	80060f8 <__kernel_rem_pio2+0x58>
 8006142:	4610      	mov	r0, r2
 8006144:	4619      	mov	r1, r3
 8006146:	e7f8      	b.n	800613a <__kernel_rem_pio2+0x9a>
 8006148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800614c:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8006150:	f7fa f9c2 	bl	80004d8 <__aeabi_dmul>
 8006154:	4602      	mov	r2, r0
 8006156:	460b      	mov	r3, r1
 8006158:	e9dd 0100 	ldrd	r0, r1, [sp]
 800615c:	f7fa f806 	bl	800016c <__adddf3>
 8006160:	e9cd 0100 	strd	r0, r1, [sp]
 8006164:	3601      	adds	r6, #1
 8006166:	9b07      	ldr	r3, [sp, #28]
 8006168:	3f08      	subs	r7, #8
 800616a:	429e      	cmp	r6, r3
 800616c:	ddec      	ble.n	8006148 <__kernel_rem_pio2+0xa8>
 800616e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006172:	f108 0801 	add.w	r8, r8, #1
 8006176:	e8ea 2302 	strd	r2, r3, [sl], #8
 800617a:	3508      	adds	r5, #8
 800617c:	e7c6      	b.n	800610c <__kernel_rem_pio2+0x6c>
 800617e:	9b02      	ldr	r3, [sp, #8]
 8006180:	aa0c      	add	r2, sp, #48	; 0x30
 8006182:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006186:	930b      	str	r3, [sp, #44]	; 0x2c
 8006188:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800618a:	9e02      	ldr	r6, [sp, #8]
 800618c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006190:	930a      	str	r3, [sp, #40]	; 0x28
 8006192:	ab98      	add	r3, sp, #608	; 0x260
 8006194:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006198:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800619c:	ab70      	add	r3, sp, #448	; 0x1c0
 800619e:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 80061a2:	46d0      	mov	r8, sl
 80061a4:	46b1      	mov	r9, r6
 80061a6:	af0c      	add	r7, sp, #48	; 0x30
 80061a8:	9700      	str	r7, [sp, #0]
 80061aa:	f1b9 0f00 	cmp.w	r9, #0
 80061ae:	f1a8 0808 	sub.w	r8, r8, #8
 80061b2:	dc70      	bgt.n	8006296 <__kernel_rem_pio2+0x1f6>
 80061b4:	465a      	mov	r2, fp
 80061b6:	4620      	mov	r0, r4
 80061b8:	4629      	mov	r1, r5
 80061ba:	f000 fab1 	bl	8006720 <scalbn>
 80061be:	2200      	movs	r2, #0
 80061c0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80061c4:	4604      	mov	r4, r0
 80061c6:	460d      	mov	r5, r1
 80061c8:	f7fa f986 	bl	80004d8 <__aeabi_dmul>
 80061cc:	f000 fb24 	bl	8006818 <floor>
 80061d0:	2200      	movs	r2, #0
 80061d2:	4b6e      	ldr	r3, [pc, #440]	; (800638c <__kernel_rem_pio2+0x2ec>)
 80061d4:	f7fa f980 	bl	80004d8 <__aeabi_dmul>
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	4620      	mov	r0, r4
 80061de:	4629      	mov	r1, r5
 80061e0:	f7f9 ffc2 	bl	8000168 <__aeabi_dsub>
 80061e4:	460d      	mov	r5, r1
 80061e6:	4604      	mov	r4, r0
 80061e8:	f7fa fc26 	bl	8000a38 <__aeabi_d2iz>
 80061ec:	9004      	str	r0, [sp, #16]
 80061ee:	f7fa f909 	bl	8000404 <__aeabi_i2d>
 80061f2:	4602      	mov	r2, r0
 80061f4:	460b      	mov	r3, r1
 80061f6:	4620      	mov	r0, r4
 80061f8:	4629      	mov	r1, r5
 80061fa:	f7f9 ffb5 	bl	8000168 <__aeabi_dsub>
 80061fe:	f1bb 0f00 	cmp.w	fp, #0
 8006202:	4680      	mov	r8, r0
 8006204:	4689      	mov	r9, r1
 8006206:	dd6f      	ble.n	80062e8 <__kernel_rem_pio2+0x248>
 8006208:	1e71      	subs	r1, r6, #1
 800620a:	ab0c      	add	r3, sp, #48	; 0x30
 800620c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006210:	9c04      	ldr	r4, [sp, #16]
 8006212:	f1cb 0018 	rsb	r0, fp, #24
 8006216:	fa43 f200 	asr.w	r2, r3, r0
 800621a:	4414      	add	r4, r2
 800621c:	4082      	lsls	r2, r0
 800621e:	1a9b      	subs	r3, r3, r2
 8006220:	aa0c      	add	r2, sp, #48	; 0x30
 8006222:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006226:	f1cb 0217 	rsb	r2, fp, #23
 800622a:	9404      	str	r4, [sp, #16]
 800622c:	4113      	asrs	r3, r2
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	9b00      	ldr	r3, [sp, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	dd66      	ble.n	8006304 <__kernel_rem_pio2+0x264>
 8006236:	2200      	movs	r2, #0
 8006238:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800623c:	4614      	mov	r4, r2
 800623e:	9b04      	ldr	r3, [sp, #16]
 8006240:	3301      	adds	r3, #1
 8006242:	9304      	str	r3, [sp, #16]
 8006244:	4296      	cmp	r6, r2
 8006246:	f300 80ad 	bgt.w	80063a4 <__kernel_rem_pio2+0x304>
 800624a:	f1bb 0f00 	cmp.w	fp, #0
 800624e:	dd07      	ble.n	8006260 <__kernel_rem_pio2+0x1c0>
 8006250:	f1bb 0f01 	cmp.w	fp, #1
 8006254:	f000 80b5 	beq.w	80063c2 <__kernel_rem_pio2+0x322>
 8006258:	f1bb 0f02 	cmp.w	fp, #2
 800625c:	f000 80bb 	beq.w	80063d6 <__kernel_rem_pio2+0x336>
 8006260:	9b00      	ldr	r3, [sp, #0]
 8006262:	2b02      	cmp	r3, #2
 8006264:	d14e      	bne.n	8006304 <__kernel_rem_pio2+0x264>
 8006266:	4642      	mov	r2, r8
 8006268:	464b      	mov	r3, r9
 800626a:	2000      	movs	r0, #0
 800626c:	4948      	ldr	r1, [pc, #288]	; (8006390 <__kernel_rem_pio2+0x2f0>)
 800626e:	f7f9 ff7b 	bl	8000168 <__aeabi_dsub>
 8006272:	4680      	mov	r8, r0
 8006274:	4689      	mov	r9, r1
 8006276:	2c00      	cmp	r4, #0
 8006278:	d044      	beq.n	8006304 <__kernel_rem_pio2+0x264>
 800627a:	465a      	mov	r2, fp
 800627c:	2000      	movs	r0, #0
 800627e:	4944      	ldr	r1, [pc, #272]	; (8006390 <__kernel_rem_pio2+0x2f0>)
 8006280:	f000 fa4e 	bl	8006720 <scalbn>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	4640      	mov	r0, r8
 800628a:	4649      	mov	r1, r9
 800628c:	f7f9 ff6c 	bl	8000168 <__aeabi_dsub>
 8006290:	4680      	mov	r8, r0
 8006292:	4689      	mov	r9, r1
 8006294:	e036      	b.n	8006304 <__kernel_rem_pio2+0x264>
 8006296:	2200      	movs	r2, #0
 8006298:	4b3e      	ldr	r3, [pc, #248]	; (8006394 <__kernel_rem_pio2+0x2f4>)
 800629a:	4620      	mov	r0, r4
 800629c:	4629      	mov	r1, r5
 800629e:	f7fa f91b 	bl	80004d8 <__aeabi_dmul>
 80062a2:	f7fa fbc9 	bl	8000a38 <__aeabi_d2iz>
 80062a6:	f7fa f8ad 	bl	8000404 <__aeabi_i2d>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80062b2:	2200      	movs	r2, #0
 80062b4:	4b38      	ldr	r3, [pc, #224]	; (8006398 <__kernel_rem_pio2+0x2f8>)
 80062b6:	f7fa f90f 	bl	80004d8 <__aeabi_dmul>
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	4620      	mov	r0, r4
 80062c0:	4629      	mov	r1, r5
 80062c2:	f7f9 ff51 	bl	8000168 <__aeabi_dsub>
 80062c6:	f7fa fbb7 	bl	8000a38 <__aeabi_d2iz>
 80062ca:	9b00      	ldr	r3, [sp, #0]
 80062cc:	f109 39ff 	add.w	r9, r9, #4294967295
 80062d0:	f843 0b04 	str.w	r0, [r3], #4
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062da:	e9d8 2300 	ldrd	r2, r3, [r8]
 80062de:	f7f9 ff45 	bl	800016c <__adddf3>
 80062e2:	4604      	mov	r4, r0
 80062e4:	460d      	mov	r5, r1
 80062e6:	e760      	b.n	80061aa <__kernel_rem_pio2+0x10a>
 80062e8:	d105      	bne.n	80062f6 <__kernel_rem_pio2+0x256>
 80062ea:	1e73      	subs	r3, r6, #1
 80062ec:	aa0c      	add	r2, sp, #48	; 0x30
 80062ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f2:	15db      	asrs	r3, r3, #23
 80062f4:	e79b      	b.n	800622e <__kernel_rem_pio2+0x18e>
 80062f6:	2200      	movs	r2, #0
 80062f8:	4b28      	ldr	r3, [pc, #160]	; (800639c <__kernel_rem_pio2+0x2fc>)
 80062fa:	f7fa fb73 	bl	80009e4 <__aeabi_dcmpge>
 80062fe:	2800      	cmp	r0, #0
 8006300:	d13e      	bne.n	8006380 <__kernel_rem_pio2+0x2e0>
 8006302:	9000      	str	r0, [sp, #0]
 8006304:	2200      	movs	r2, #0
 8006306:	2300      	movs	r3, #0
 8006308:	4640      	mov	r0, r8
 800630a:	4649      	mov	r1, r9
 800630c:	f7fa fb4c 	bl	80009a8 <__aeabi_dcmpeq>
 8006310:	2800      	cmp	r0, #0
 8006312:	f000 80b2 	beq.w	800647a <__kernel_rem_pio2+0x3da>
 8006316:	1e74      	subs	r4, r6, #1
 8006318:	4623      	mov	r3, r4
 800631a:	2200      	movs	r2, #0
 800631c:	9902      	ldr	r1, [sp, #8]
 800631e:	428b      	cmp	r3, r1
 8006320:	da60      	bge.n	80063e4 <__kernel_rem_pio2+0x344>
 8006322:	2a00      	cmp	r2, #0
 8006324:	d075      	beq.n	8006412 <__kernel_rem_pio2+0x372>
 8006326:	ab0c      	add	r3, sp, #48	; 0x30
 8006328:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800632c:	f1ab 0b18 	sub.w	fp, fp, #24
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 80a0 	beq.w	8006476 <__kernel_rem_pio2+0x3d6>
 8006336:	465a      	mov	r2, fp
 8006338:	2000      	movs	r0, #0
 800633a:	4915      	ldr	r1, [pc, #84]	; (8006390 <__kernel_rem_pio2+0x2f0>)
 800633c:	f000 f9f0 	bl	8006720 <scalbn>
 8006340:	46a2      	mov	sl, r4
 8006342:	4606      	mov	r6, r0
 8006344:	460f      	mov	r7, r1
 8006346:	f04f 0800 	mov.w	r8, #0
 800634a:	ab70      	add	r3, sp, #448	; 0x1c0
 800634c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8006394 <__kernel_rem_pio2+0x2f4>
 8006350:	00e5      	lsls	r5, r4, #3
 8006352:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8006356:	f1ba 0f00 	cmp.w	sl, #0
 800635a:	f280 80c4 	bge.w	80064e6 <__kernel_rem_pio2+0x446>
 800635e:	4626      	mov	r6, r4
 8006360:	2e00      	cmp	r6, #0
 8006362:	f2c0 80f6 	blt.w	8006552 <__kernel_rem_pio2+0x4b2>
 8006366:	4b0e      	ldr	r3, [pc, #56]	; (80063a0 <__kernel_rem_pio2+0x300>)
 8006368:	f04f 0a00 	mov.w	sl, #0
 800636c:	9307      	str	r3, [sp, #28]
 800636e:	ab70      	add	r3, sp, #448	; 0x1c0
 8006370:	f04f 0b00 	mov.w	fp, #0
 8006374:	f04f 0800 	mov.w	r8, #0
 8006378:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800637c:	1ba7      	subs	r7, r4, r6
 800637e:	e0dc      	b.n	800653a <__kernel_rem_pio2+0x49a>
 8006380:	2302      	movs	r3, #2
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	e757      	b.n	8006236 <__kernel_rem_pio2+0x196>
 8006386:	bf00      	nop
 8006388:	08006be8 	.word	0x08006be8
 800638c:	40200000 	.word	0x40200000
 8006390:	3ff00000 	.word	0x3ff00000
 8006394:	3e700000 	.word	0x3e700000
 8006398:	41700000 	.word	0x41700000
 800639c:	3fe00000 	.word	0x3fe00000
 80063a0:	08006ba8 	.word	0x08006ba8
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	b944      	cbnz	r4, 80063ba <__kernel_rem_pio2+0x31a>
 80063a8:	b11b      	cbz	r3, 80063b2 <__kernel_rem_pio2+0x312>
 80063aa:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80063ae:	603b      	str	r3, [r7, #0]
 80063b0:	2301      	movs	r3, #1
 80063b2:	461c      	mov	r4, r3
 80063b4:	3201      	adds	r2, #1
 80063b6:	3704      	adds	r7, #4
 80063b8:	e744      	b.n	8006244 <__kernel_rem_pio2+0x1a4>
 80063ba:	1acb      	subs	r3, r1, r3
 80063bc:	603b      	str	r3, [r7, #0]
 80063be:	4623      	mov	r3, r4
 80063c0:	e7f7      	b.n	80063b2 <__kernel_rem_pio2+0x312>
 80063c2:	1e72      	subs	r2, r6, #1
 80063c4:	ab0c      	add	r3, sp, #48	; 0x30
 80063c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ca:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80063ce:	a90c      	add	r1, sp, #48	; 0x30
 80063d0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80063d4:	e744      	b.n	8006260 <__kernel_rem_pio2+0x1c0>
 80063d6:	1e72      	subs	r2, r6, #1
 80063d8:	ab0c      	add	r3, sp, #48	; 0x30
 80063da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063de:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80063e2:	e7f4      	b.n	80063ce <__kernel_rem_pio2+0x32e>
 80063e4:	a90c      	add	r1, sp, #48	; 0x30
 80063e6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80063ea:	3b01      	subs	r3, #1
 80063ec:	430a      	orrs	r2, r1
 80063ee:	e795      	b.n	800631c <__kernel_rem_pio2+0x27c>
 80063f0:	3301      	adds	r3, #1
 80063f2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80063f6:	2900      	cmp	r1, #0
 80063f8:	d0fa      	beq.n	80063f0 <__kernel_rem_pio2+0x350>
 80063fa:	9a08      	ldr	r2, [sp, #32]
 80063fc:	a920      	add	r1, sp, #128	; 0x80
 80063fe:	18b2      	adds	r2, r6, r2
 8006400:	f106 0801 	add.w	r8, r6, #1
 8006404:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8006408:	18f4      	adds	r4, r6, r3
 800640a:	4544      	cmp	r4, r8
 800640c:	da04      	bge.n	8006418 <__kernel_rem_pio2+0x378>
 800640e:	4626      	mov	r6, r4
 8006410:	e6bf      	b.n	8006192 <__kernel_rem_pio2+0xf2>
 8006412:	2301      	movs	r3, #1
 8006414:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006416:	e7ec      	b.n	80063f2 <__kernel_rem_pio2+0x352>
 8006418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800641a:	f04f 0900 	mov.w	r9, #0
 800641e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006422:	f7f9 ffef 	bl	8000404 <__aeabi_i2d>
 8006426:	2600      	movs	r6, #0
 8006428:	2700      	movs	r7, #0
 800642a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800642c:	e9c5 0100 	strd	r0, r1, [r5]
 8006430:	3b08      	subs	r3, #8
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	9504      	str	r5, [sp, #16]
 8006436:	9b07      	ldr	r3, [sp, #28]
 8006438:	4599      	cmp	r9, r3
 800643a:	dd05      	ble.n	8006448 <__kernel_rem_pio2+0x3a8>
 800643c:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8006440:	f108 0801 	add.w	r8, r8, #1
 8006444:	3508      	adds	r5, #8
 8006446:	e7e0      	b.n	800640a <__kernel_rem_pio2+0x36a>
 8006448:	f8dd c010 	ldr.w	ip, [sp, #16]
 800644c:	9900      	ldr	r1, [sp, #0]
 800644e:	f109 0901 	add.w	r9, r9, #1
 8006452:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8006456:	9100      	str	r1, [sp, #0]
 8006458:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800645c:	f8cd c010 	str.w	ip, [sp, #16]
 8006460:	f7fa f83a 	bl	80004d8 <__aeabi_dmul>
 8006464:	4602      	mov	r2, r0
 8006466:	460b      	mov	r3, r1
 8006468:	4630      	mov	r0, r6
 800646a:	4639      	mov	r1, r7
 800646c:	f7f9 fe7e 	bl	800016c <__adddf3>
 8006470:	4606      	mov	r6, r0
 8006472:	460f      	mov	r7, r1
 8006474:	e7df      	b.n	8006436 <__kernel_rem_pio2+0x396>
 8006476:	3c01      	subs	r4, #1
 8006478:	e755      	b.n	8006326 <__kernel_rem_pio2+0x286>
 800647a:	f1cb 0200 	rsb	r2, fp, #0
 800647e:	4640      	mov	r0, r8
 8006480:	4649      	mov	r1, r9
 8006482:	f000 f94d 	bl	8006720 <scalbn>
 8006486:	2200      	movs	r2, #0
 8006488:	4ba3      	ldr	r3, [pc, #652]	; (8006718 <__kernel_rem_pio2+0x678>)
 800648a:	4604      	mov	r4, r0
 800648c:	460d      	mov	r5, r1
 800648e:	f7fa faa9 	bl	80009e4 <__aeabi_dcmpge>
 8006492:	b1f8      	cbz	r0, 80064d4 <__kernel_rem_pio2+0x434>
 8006494:	2200      	movs	r2, #0
 8006496:	4ba1      	ldr	r3, [pc, #644]	; (800671c <__kernel_rem_pio2+0x67c>)
 8006498:	4620      	mov	r0, r4
 800649a:	4629      	mov	r1, r5
 800649c:	f7fa f81c 	bl	80004d8 <__aeabi_dmul>
 80064a0:	f7fa faca 	bl	8000a38 <__aeabi_d2iz>
 80064a4:	4607      	mov	r7, r0
 80064a6:	f7f9 ffad 	bl	8000404 <__aeabi_i2d>
 80064aa:	2200      	movs	r2, #0
 80064ac:	4b9a      	ldr	r3, [pc, #616]	; (8006718 <__kernel_rem_pio2+0x678>)
 80064ae:	f7fa f813 	bl	80004d8 <__aeabi_dmul>
 80064b2:	460b      	mov	r3, r1
 80064b4:	4602      	mov	r2, r0
 80064b6:	4629      	mov	r1, r5
 80064b8:	4620      	mov	r0, r4
 80064ba:	f7f9 fe55 	bl	8000168 <__aeabi_dsub>
 80064be:	f7fa fabb 	bl	8000a38 <__aeabi_d2iz>
 80064c2:	1c74      	adds	r4, r6, #1
 80064c4:	ab0c      	add	r3, sp, #48	; 0x30
 80064c6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80064ca:	f10b 0b18 	add.w	fp, fp, #24
 80064ce:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 80064d2:	e730      	b.n	8006336 <__kernel_rem_pio2+0x296>
 80064d4:	4620      	mov	r0, r4
 80064d6:	4629      	mov	r1, r5
 80064d8:	f7fa faae 	bl	8000a38 <__aeabi_d2iz>
 80064dc:	ab0c      	add	r3, sp, #48	; 0x30
 80064de:	4634      	mov	r4, r6
 80064e0:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80064e4:	e727      	b.n	8006336 <__kernel_rem_pio2+0x296>
 80064e6:	ab0c      	add	r3, sp, #48	; 0x30
 80064e8:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80064ec:	f7f9 ff8a 	bl	8000404 <__aeabi_i2d>
 80064f0:	4632      	mov	r2, r6
 80064f2:	463b      	mov	r3, r7
 80064f4:	f7f9 fff0 	bl	80004d8 <__aeabi_dmul>
 80064f8:	4642      	mov	r2, r8
 80064fa:	e86b 0102 	strd	r0, r1, [fp], #-8
 80064fe:	464b      	mov	r3, r9
 8006500:	4630      	mov	r0, r6
 8006502:	4639      	mov	r1, r7
 8006504:	f7f9 ffe8 	bl	80004d8 <__aeabi_dmul>
 8006508:	f10a 3aff 	add.w	sl, sl, #4294967295
 800650c:	4606      	mov	r6, r0
 800650e:	460f      	mov	r7, r1
 8006510:	e721      	b.n	8006356 <__kernel_rem_pio2+0x2b6>
 8006512:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8006516:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800651a:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800651e:	f8cd c01c 	str.w	ip, [sp, #28]
 8006522:	f7f9 ffd9 	bl	80004d8 <__aeabi_dmul>
 8006526:	4602      	mov	r2, r0
 8006528:	460b      	mov	r3, r1
 800652a:	4650      	mov	r0, sl
 800652c:	4659      	mov	r1, fp
 800652e:	f7f9 fe1d 	bl	800016c <__adddf3>
 8006532:	4682      	mov	sl, r0
 8006534:	468b      	mov	fp, r1
 8006536:	f108 0801 	add.w	r8, r8, #1
 800653a:	9b02      	ldr	r3, [sp, #8]
 800653c:	4598      	cmp	r8, r3
 800653e:	dc01      	bgt.n	8006544 <__kernel_rem_pio2+0x4a4>
 8006540:	45b8      	cmp	r8, r7
 8006542:	dde6      	ble.n	8006512 <__kernel_rem_pio2+0x472>
 8006544:	ab48      	add	r3, sp, #288	; 0x120
 8006546:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800654a:	e9c7 ab00 	strd	sl, fp, [r7]
 800654e:	3e01      	subs	r6, #1
 8006550:	e706      	b.n	8006360 <__kernel_rem_pio2+0x2c0>
 8006552:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8006554:	2b02      	cmp	r3, #2
 8006556:	dc09      	bgt.n	800656c <__kernel_rem_pio2+0x4cc>
 8006558:	2b00      	cmp	r3, #0
 800655a:	dc32      	bgt.n	80065c2 <__kernel_rem_pio2+0x522>
 800655c:	d058      	beq.n	8006610 <__kernel_rem_pio2+0x570>
 800655e:	9b04      	ldr	r3, [sp, #16]
 8006560:	f003 0007 	and.w	r0, r3, #7
 8006564:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800656c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800656e:	2b03      	cmp	r3, #3
 8006570:	d1f5      	bne.n	800655e <__kernel_rem_pio2+0x4be>
 8006572:	ab48      	add	r3, sp, #288	; 0x120
 8006574:	441d      	add	r5, r3
 8006576:	46aa      	mov	sl, r5
 8006578:	46a3      	mov	fp, r4
 800657a:	f1bb 0f00 	cmp.w	fp, #0
 800657e:	dc74      	bgt.n	800666a <__kernel_rem_pio2+0x5ca>
 8006580:	46aa      	mov	sl, r5
 8006582:	46a3      	mov	fp, r4
 8006584:	f1bb 0f01 	cmp.w	fp, #1
 8006588:	f300 808e 	bgt.w	80066a8 <__kernel_rem_pio2+0x608>
 800658c:	2700      	movs	r7, #0
 800658e:	463e      	mov	r6, r7
 8006590:	2c01      	cmp	r4, #1
 8006592:	f300 80a8 	bgt.w	80066e6 <__kernel_rem_pio2+0x646>
 8006596:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800659a:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800659e:	9b00      	ldr	r3, [sp, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f040 80aa 	bne.w	80066fa <__kernel_rem_pio2+0x65a>
 80065a6:	4603      	mov	r3, r0
 80065a8:	462a      	mov	r2, r5
 80065aa:	9806      	ldr	r0, [sp, #24]
 80065ac:	e9c0 2300 	strd	r2, r3, [r0]
 80065b0:	4622      	mov	r2, r4
 80065b2:	460b      	mov	r3, r1
 80065b4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80065b8:	463a      	mov	r2, r7
 80065ba:	4633      	mov	r3, r6
 80065bc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80065c0:	e7cd      	b.n	800655e <__kernel_rem_pio2+0x4be>
 80065c2:	2000      	movs	r0, #0
 80065c4:	46a0      	mov	r8, r4
 80065c6:	4601      	mov	r1, r0
 80065c8:	ab48      	add	r3, sp, #288	; 0x120
 80065ca:	441d      	add	r5, r3
 80065cc:	f1b8 0f00 	cmp.w	r8, #0
 80065d0:	da38      	bge.n	8006644 <__kernel_rem_pio2+0x5a4>
 80065d2:	9b00      	ldr	r3, [sp, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d03c      	beq.n	8006652 <__kernel_rem_pio2+0x5b2>
 80065d8:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80065dc:	4602      	mov	r2, r0
 80065de:	462b      	mov	r3, r5
 80065e0:	9d06      	ldr	r5, [sp, #24]
 80065e2:	2601      	movs	r6, #1
 80065e4:	e9c5 2300 	strd	r2, r3, [r5]
 80065e8:	460b      	mov	r3, r1
 80065ea:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80065ee:	f7f9 fdbb 	bl	8000168 <__aeabi_dsub>
 80065f2:	4684      	mov	ip, r0
 80065f4:	460f      	mov	r7, r1
 80065f6:	ad48      	add	r5, sp, #288	; 0x120
 80065f8:	42b4      	cmp	r4, r6
 80065fa:	da2c      	bge.n	8006656 <__kernel_rem_pio2+0x5b6>
 80065fc:	9b00      	ldr	r3, [sp, #0]
 80065fe:	b10b      	cbz	r3, 8006604 <__kernel_rem_pio2+0x564>
 8006600:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8006604:	4662      	mov	r2, ip
 8006606:	463b      	mov	r3, r7
 8006608:	9906      	ldr	r1, [sp, #24]
 800660a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800660e:	e7a6      	b.n	800655e <__kernel_rem_pio2+0x4be>
 8006610:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8006612:	ab48      	add	r3, sp, #288	; 0x120
 8006614:	4637      	mov	r7, r6
 8006616:	441d      	add	r5, r3
 8006618:	2c00      	cmp	r4, #0
 800661a:	da09      	bge.n	8006630 <__kernel_rem_pio2+0x590>
 800661c:	9b00      	ldr	r3, [sp, #0]
 800661e:	b10b      	cbz	r3, 8006624 <__kernel_rem_pio2+0x584>
 8006620:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8006624:	4632      	mov	r2, r6
 8006626:	463b      	mov	r3, r7
 8006628:	9906      	ldr	r1, [sp, #24]
 800662a:	e9c1 2300 	strd	r2, r3, [r1]
 800662e:	e796      	b.n	800655e <__kernel_rem_pio2+0x4be>
 8006630:	4630      	mov	r0, r6
 8006632:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8006636:	4639      	mov	r1, r7
 8006638:	f7f9 fd98 	bl	800016c <__adddf3>
 800663c:	3c01      	subs	r4, #1
 800663e:	4606      	mov	r6, r0
 8006640:	460f      	mov	r7, r1
 8006642:	e7e9      	b.n	8006618 <__kernel_rem_pio2+0x578>
 8006644:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8006648:	f7f9 fd90 	bl	800016c <__adddf3>
 800664c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006650:	e7bc      	b.n	80065cc <__kernel_rem_pio2+0x52c>
 8006652:	460d      	mov	r5, r1
 8006654:	e7c2      	b.n	80065dc <__kernel_rem_pio2+0x53c>
 8006656:	4660      	mov	r0, ip
 8006658:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800665c:	4639      	mov	r1, r7
 800665e:	f7f9 fd85 	bl	800016c <__adddf3>
 8006662:	3601      	adds	r6, #1
 8006664:	4684      	mov	ip, r0
 8006666:	460f      	mov	r7, r1
 8006668:	e7c6      	b.n	80065f8 <__kernel_rem_pio2+0x558>
 800666a:	e9da 6700 	ldrd	r6, r7, [sl]
 800666e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8006672:	4632      	mov	r2, r6
 8006674:	463b      	mov	r3, r7
 8006676:	4640      	mov	r0, r8
 8006678:	4649      	mov	r1, r9
 800667a:	f7f9 fd77 	bl	800016c <__adddf3>
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
 8006682:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006686:	4640      	mov	r0, r8
 8006688:	4649      	mov	r1, r9
 800668a:	f7f9 fd6d 	bl	8000168 <__aeabi_dsub>
 800668e:	4632      	mov	r2, r6
 8006690:	463b      	mov	r3, r7
 8006692:	f7f9 fd6b 	bl	800016c <__adddf3>
 8006696:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800669a:	e86a 0102 	strd	r0, r1, [sl], #-8
 800669e:	f10b 3bff 	add.w	fp, fp, #4294967295
 80066a2:	e9ca 2300 	strd	r2, r3, [sl]
 80066a6:	e768      	b.n	800657a <__kernel_rem_pio2+0x4da>
 80066a8:	e9da 8900 	ldrd	r8, r9, [sl]
 80066ac:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80066b0:	4642      	mov	r2, r8
 80066b2:	464b      	mov	r3, r9
 80066b4:	4630      	mov	r0, r6
 80066b6:	4639      	mov	r1, r7
 80066b8:	f7f9 fd58 	bl	800016c <__adddf3>
 80066bc:	4602      	mov	r2, r0
 80066be:	460b      	mov	r3, r1
 80066c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066c4:	4630      	mov	r0, r6
 80066c6:	4639      	mov	r1, r7
 80066c8:	f7f9 fd4e 	bl	8000168 <__aeabi_dsub>
 80066cc:	4642      	mov	r2, r8
 80066ce:	464b      	mov	r3, r9
 80066d0:	f7f9 fd4c 	bl	800016c <__adddf3>
 80066d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066d8:	e86a 0102 	strd	r0, r1, [sl], #-8
 80066dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80066e0:	e9ca 2300 	strd	r2, r3, [sl]
 80066e4:	e74e      	b.n	8006584 <__kernel_rem_pio2+0x4e4>
 80066e6:	4638      	mov	r0, r7
 80066e8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80066ec:	4631      	mov	r1, r6
 80066ee:	f7f9 fd3d 	bl	800016c <__adddf3>
 80066f2:	3c01      	subs	r4, #1
 80066f4:	4607      	mov	r7, r0
 80066f6:	460e      	mov	r6, r1
 80066f8:	e74a      	b.n	8006590 <__kernel_rem_pio2+0x4f0>
 80066fa:	9b06      	ldr	r3, [sp, #24]
 80066fc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006700:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8006704:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8006708:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800670c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8006710:	601d      	str	r5, [r3, #0]
 8006712:	615e      	str	r6, [r3, #20]
 8006714:	e723      	b.n	800655e <__kernel_rem_pio2+0x4be>
 8006716:	bf00      	nop
 8006718:	41700000 	.word	0x41700000
 800671c:	3e700000 	.word	0x3e700000

08006720 <scalbn>:
 8006720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006722:	4616      	mov	r6, r2
 8006724:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006728:	4604      	mov	r4, r0
 800672a:	460d      	mov	r5, r1
 800672c:	460b      	mov	r3, r1
 800672e:	b992      	cbnz	r2, 8006756 <scalbn+0x36>
 8006730:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006734:	4303      	orrs	r3, r0
 8006736:	d03c      	beq.n	80067b2 <scalbn+0x92>
 8006738:	4b31      	ldr	r3, [pc, #196]	; (8006800 <scalbn+0xe0>)
 800673a:	2200      	movs	r2, #0
 800673c:	f7f9 fecc 	bl	80004d8 <__aeabi_dmul>
 8006740:	4b30      	ldr	r3, [pc, #192]	; (8006804 <scalbn+0xe4>)
 8006742:	4604      	mov	r4, r0
 8006744:	429e      	cmp	r6, r3
 8006746:	460d      	mov	r5, r1
 8006748:	da0f      	bge.n	800676a <scalbn+0x4a>
 800674a:	a329      	add	r3, pc, #164	; (adr r3, 80067f0 <scalbn+0xd0>)
 800674c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006750:	f7f9 fec2 	bl	80004d8 <__aeabi_dmul>
 8006754:	e006      	b.n	8006764 <scalbn+0x44>
 8006756:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800675a:	42ba      	cmp	r2, r7
 800675c:	d109      	bne.n	8006772 <scalbn+0x52>
 800675e:	4602      	mov	r2, r0
 8006760:	f7f9 fd04 	bl	800016c <__adddf3>
 8006764:	4604      	mov	r4, r0
 8006766:	460d      	mov	r5, r1
 8006768:	e023      	b.n	80067b2 <scalbn+0x92>
 800676a:	460b      	mov	r3, r1
 800676c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006770:	3a36      	subs	r2, #54	; 0x36
 8006772:	f24c 3150 	movw	r1, #50000	; 0xc350
 8006776:	428e      	cmp	r6, r1
 8006778:	dd0e      	ble.n	8006798 <scalbn+0x78>
 800677a:	a31f      	add	r3, pc, #124	; (adr r3, 80067f8 <scalbn+0xd8>)
 800677c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006780:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006784:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006788:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800678c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006790:	481d      	ldr	r0, [pc, #116]	; (8006808 <scalbn+0xe8>)
 8006792:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006796:	e7db      	b.n	8006750 <scalbn+0x30>
 8006798:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800679c:	4432      	add	r2, r6
 800679e:	428a      	cmp	r2, r1
 80067a0:	dceb      	bgt.n	800677a <scalbn+0x5a>
 80067a2:	2a00      	cmp	r2, #0
 80067a4:	dd08      	ble.n	80067b8 <scalbn+0x98>
 80067a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80067aa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80067ae:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80067b2:	4620      	mov	r0, r4
 80067b4:	4629      	mov	r1, r5
 80067b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067b8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80067bc:	da0c      	bge.n	80067d8 <scalbn+0xb8>
 80067be:	a30c      	add	r3, pc, #48	; (adr r3, 80067f0 <scalbn+0xd0>)
 80067c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80067c8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80067cc:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80067d0:	480e      	ldr	r0, [pc, #56]	; (800680c <scalbn+0xec>)
 80067d2:	f041 011f 	orr.w	r1, r1, #31
 80067d6:	e7bb      	b.n	8006750 <scalbn+0x30>
 80067d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80067dc:	3236      	adds	r2, #54	; 0x36
 80067de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80067e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80067e6:	4620      	mov	r0, r4
 80067e8:	4629      	mov	r1, r5
 80067ea:	2200      	movs	r2, #0
 80067ec:	4b08      	ldr	r3, [pc, #32]	; (8006810 <scalbn+0xf0>)
 80067ee:	e7af      	b.n	8006750 <scalbn+0x30>
 80067f0:	c2f8f359 	.word	0xc2f8f359
 80067f4:	01a56e1f 	.word	0x01a56e1f
 80067f8:	8800759c 	.word	0x8800759c
 80067fc:	7e37e43c 	.word	0x7e37e43c
 8006800:	43500000 	.word	0x43500000
 8006804:	ffff3cb0 	.word	0xffff3cb0
 8006808:	8800759c 	.word	0x8800759c
 800680c:	c2f8f359 	.word	0xc2f8f359
 8006810:	3c900000 	.word	0x3c900000
 8006814:	00000000 	.word	0x00000000

08006818 <floor>:
 8006818:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800681c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006820:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8006824:	2e13      	cmp	r6, #19
 8006826:	460b      	mov	r3, r1
 8006828:	4607      	mov	r7, r0
 800682a:	460c      	mov	r4, r1
 800682c:	4605      	mov	r5, r0
 800682e:	dc32      	bgt.n	8006896 <floor+0x7e>
 8006830:	2e00      	cmp	r6, #0
 8006832:	da14      	bge.n	800685e <floor+0x46>
 8006834:	a334      	add	r3, pc, #208	; (adr r3, 8006908 <floor+0xf0>)
 8006836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683a:	f7f9 fc97 	bl	800016c <__adddf3>
 800683e:	2200      	movs	r2, #0
 8006840:	2300      	movs	r3, #0
 8006842:	f7fa f8d9 	bl	80009f8 <__aeabi_dcmpgt>
 8006846:	b138      	cbz	r0, 8006858 <floor+0x40>
 8006848:	2c00      	cmp	r4, #0
 800684a:	da56      	bge.n	80068fa <floor+0xe2>
 800684c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006850:	4325      	orrs	r5, r4
 8006852:	d055      	beq.n	8006900 <floor+0xe8>
 8006854:	2500      	movs	r5, #0
 8006856:	4c2e      	ldr	r4, [pc, #184]	; (8006910 <floor+0xf8>)
 8006858:	4623      	mov	r3, r4
 800685a:	462f      	mov	r7, r5
 800685c:	e025      	b.n	80068aa <floor+0x92>
 800685e:	4a2d      	ldr	r2, [pc, #180]	; (8006914 <floor+0xfc>)
 8006860:	fa42 f806 	asr.w	r8, r2, r6
 8006864:	ea01 0208 	and.w	r2, r1, r8
 8006868:	4302      	orrs	r2, r0
 800686a:	d01e      	beq.n	80068aa <floor+0x92>
 800686c:	a326      	add	r3, pc, #152	; (adr r3, 8006908 <floor+0xf0>)
 800686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006872:	f7f9 fc7b 	bl	800016c <__adddf3>
 8006876:	2200      	movs	r2, #0
 8006878:	2300      	movs	r3, #0
 800687a:	f7fa f8bd 	bl	80009f8 <__aeabi_dcmpgt>
 800687e:	2800      	cmp	r0, #0
 8006880:	d0ea      	beq.n	8006858 <floor+0x40>
 8006882:	2c00      	cmp	r4, #0
 8006884:	bfbe      	ittt	lt
 8006886:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800688a:	4133      	asrlt	r3, r6
 800688c:	18e4      	addlt	r4, r4, r3
 800688e:	2500      	movs	r5, #0
 8006890:	ea24 0408 	bic.w	r4, r4, r8
 8006894:	e7e0      	b.n	8006858 <floor+0x40>
 8006896:	2e33      	cmp	r6, #51	; 0x33
 8006898:	dd0b      	ble.n	80068b2 <floor+0x9a>
 800689a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800689e:	d104      	bne.n	80068aa <floor+0x92>
 80068a0:	4602      	mov	r2, r0
 80068a2:	f7f9 fc63 	bl	800016c <__adddf3>
 80068a6:	4607      	mov	r7, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4638      	mov	r0, r7
 80068ac:	4619      	mov	r1, r3
 80068ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068b2:	f04f 38ff 	mov.w	r8, #4294967295
 80068b6:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80068ba:	fa28 f802 	lsr.w	r8, r8, r2
 80068be:	ea10 0f08 	tst.w	r0, r8
 80068c2:	d0f2      	beq.n	80068aa <floor+0x92>
 80068c4:	a310      	add	r3, pc, #64	; (adr r3, 8006908 <floor+0xf0>)
 80068c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ca:	f7f9 fc4f 	bl	800016c <__adddf3>
 80068ce:	2200      	movs	r2, #0
 80068d0:	2300      	movs	r3, #0
 80068d2:	f7fa f891 	bl	80009f8 <__aeabi_dcmpgt>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	d0be      	beq.n	8006858 <floor+0x40>
 80068da:	2c00      	cmp	r4, #0
 80068dc:	da0a      	bge.n	80068f4 <floor+0xdc>
 80068de:	2e14      	cmp	r6, #20
 80068e0:	d101      	bne.n	80068e6 <floor+0xce>
 80068e2:	3401      	adds	r4, #1
 80068e4:	e006      	b.n	80068f4 <floor+0xdc>
 80068e6:	2301      	movs	r3, #1
 80068e8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80068ec:	40b3      	lsls	r3, r6
 80068ee:	441d      	add	r5, r3
 80068f0:	42af      	cmp	r7, r5
 80068f2:	d8f6      	bhi.n	80068e2 <floor+0xca>
 80068f4:	ea25 0508 	bic.w	r5, r5, r8
 80068f8:	e7ae      	b.n	8006858 <floor+0x40>
 80068fa:	2500      	movs	r5, #0
 80068fc:	462c      	mov	r4, r5
 80068fe:	e7ab      	b.n	8006858 <floor+0x40>
 8006900:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006904:	e7a8      	b.n	8006858 <floor+0x40>
 8006906:	bf00      	nop
 8006908:	8800759c 	.word	0x8800759c
 800690c:	7e37e43c 	.word	0x7e37e43c
 8006910:	bff00000 	.word	0xbff00000
 8006914:	000fffff 	.word	0x000fffff

08006918 <_init>:
 8006918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691a:	bf00      	nop
 800691c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800691e:	bc08      	pop	{r3}
 8006920:	469e      	mov	lr, r3
 8006922:	4770      	bx	lr

08006924 <_fini>:
 8006924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006926:	bf00      	nop
 8006928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800692a:	bc08      	pop	{r3}
 800692c:	469e      	mov	lr, r3
 800692e:	4770      	bx	lr
